// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex Admin API
 * Webex Admin API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAnOrganization200Response;
import org.openapitools.client.model.GetOrganizationDetails200Response;
import org.openapitools.client.model.ListOrganizations200Response;
import org.openapitools.client.model.UpdateAnOrganizationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultWebexAdminApi api = new DefaultWebexAdminApi();

    /**
     * Delete Organization
     *
     * Deletes an organization, by ID. It may take up to 10 minutes for the organization to be deleted after the response is returned. &lt;br/&gt;&lt;br/&gt; Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting your organization permanently deletes all of the information associated with your organization and is irreversible.&lt;/Callout&gt;&lt;/div&gt;  Deleting an Organization may fail with a HTTP 409 Conflict response and encounter one or more of the errors described below. Resolve these conditions to allow the delete to succeed. &lt;br/&gt;&lt;br/&gt;  + Org cannot be deleted as it has Linked sites.  + Org cannot be deleted as it has active subscriptions or licenses.  + Org cannot be deleted as [Directory Synchronization](https://developer.webex.com/docs/api/v1/broadworks-enterprises/get-directory-sync-status-for-an-enterprise) is enabled.  + Org cannot be deleted as it has more than 1 user.  + Org cannot be deleted as it has more than 1 managed by relationship.  + Org cannot be deleted as it has managed orgs.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt;When deleting a Webex for BroadWorks Organization with BroadWorks Directory Synchronization enabled, a prerequisite is to disable BroadWorks Directory Synchronization for the given Organization. Refer to the [Organization Deletion](https://developer.webex.com/docs/api/guides/webex-for-broadworks-developers-guide#organization-deletion) section of the [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information.&lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        api.deleteOrganization(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get an organization
     *
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  - &#x60;identity:organizations_read&#x60;  &lt;br/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetAnOrganization200Response response = api.getAnOrganization(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Organization Details
     *
     * Shows details for an organization, by ID.  Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDetailsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetOrganizationDetails200Response response = api.getOrganizationDetails(orgId, authorization);
        // TODO: test validations
    }

    /**
     * List Organizations
     *
     * List all organizations visible by your account. The results will not be [paginated](/docs/basics#pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationsTest() throws ApiException {
        String authorization = null;
        ListOrganizations200Response response = api.listOrganizations(authorization);
        // TODO: test validations
    }

    /**
     * Update an organization
     *
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  &lt;br/&gt;  The following administrators can use this API:  - &#x60;id_full_admin&#x60;  &lt;br/&gt;  **Usage**:  1. Input JSON must contain schema: \&quot;urn:cisco:codev:identity:organization:core:1.0\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        UpdateAnOrganizationRequest updateAnOrganizationRequest = null;
        GetAnOrganization200Response response = api.updateAnOrganization(orgId, authorization, updateAnOrganizationRequest);
        // TODO: test validations
    }

}
