// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex Admin API
 * Webex Admin API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.WebexAdminApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import com.google.gson.reflect.TypeToken;


import org.openapitools.client.model.GetAnOrganization200Response;
import org.openapitools.client.model.GetOrganizationDetails200Response;
import org.openapitools.client.model.ListOrganizations200Response;
import org.openapitools.client.model.UpdateAnOrganizationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultWebexAdminApi {
    private WebexAdminApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultWebexAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultWebexAdminApi(WebexAdminApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public WebexAdminApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(WebexAdminApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOrganization
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationValidateBeforeCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteOrganization(Async)");
        }

        return deleteOrganizationCall(orgId, authorization, _callback);

    }

    /**
     * Delete Organization
     * Deletes an organization, by ID. It may take up to 10 minutes for the organization to be deleted after the response is returned. &lt;br/&gt;&lt;br/&gt; Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting your organization permanently deletes all of the information associated with your organization and is irreversible.&lt;/Callout&gt;&lt;/div&gt;  Deleting an Organization may fail with a HTTP 409 Conflict response and encounter one or more of the errors described below. Resolve these conditions to allow the delete to succeed. &lt;br/&gt;&lt;br/&gt;  + Org cannot be deleted as it has Linked sites.  + Org cannot be deleted as it has active subscriptions or licenses.  + Org cannot be deleted as [Directory Synchronization](https://developer.webex.com/docs/api/v1/broadworks-enterprises/get-directory-sync-status-for-an-enterprise) is enabled.  + Org cannot be deleted as it has more than 1 user.  + Org cannot be deleted as it has more than 1 managed by relationship.  + Org cannot be deleted as it has managed orgs.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt;When deleting a Webex for BroadWorks Organization with BroadWorks Directory Synchronization enabled, a prerequisite is to disable BroadWorks Directory Synchronization for the given Organization. Refer to the [Organization Deletion](https://developer.webex.com/docs/api/guides/webex-for-broadworks-developers-guide#organization-deletion) section of the [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information.&lt;/Callout&gt; &lt;/div&gt;
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganization(String orgId, String authorization) throws ApiException {
        deleteOrganizationWithHttpInfo(orgId, authorization);
    }

    /**
     * Delete Organization
     * Deletes an organization, by ID. It may take up to 10 minutes for the organization to be deleted after the response is returned. &lt;br/&gt;&lt;br/&gt; Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting your organization permanently deletes all of the information associated with your organization and is irreversible.&lt;/Callout&gt;&lt;/div&gt;  Deleting an Organization may fail with a HTTP 409 Conflict response and encounter one or more of the errors described below. Resolve these conditions to allow the delete to succeed. &lt;br/&gt;&lt;br/&gt;  + Org cannot be deleted as it has Linked sites.  + Org cannot be deleted as it has active subscriptions or licenses.  + Org cannot be deleted as [Directory Synchronization](https://developer.webex.com/docs/api/v1/broadworks-enterprises/get-directory-sync-status-for-an-enterprise) is enabled.  + Org cannot be deleted as it has more than 1 user.  + Org cannot be deleted as it has more than 1 managed by relationship.  + Org cannot be deleted as it has managed orgs.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt;When deleting a Webex for BroadWorks Organization with BroadWorks Directory Synchronization enabled, a prerequisite is to disable BroadWorks Directory Synchronization for the given Organization. Refer to the [Organization Deletion](https://developer.webex.com/docs/api/guides/webex-for-broadworks-developers-guide#organization-deletion) section of the [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information.&lt;/Callout&gt; &lt;/div&gt;
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationWithHttpInfo(String orgId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(orgId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Organization (asynchronously)
     * Deletes an organization, by ID. It may take up to 10 minutes for the organization to be deleted after the response is returned. &lt;br/&gt;&lt;br/&gt; Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting your organization permanently deletes all of the information associated with your organization and is irreversible.&lt;/Callout&gt;&lt;/div&gt;  Deleting an Organization may fail with a HTTP 409 Conflict response and encounter one or more of the errors described below. Resolve these conditions to allow the delete to succeed. &lt;br/&gt;&lt;br/&gt;  + Org cannot be deleted as it has Linked sites.  + Org cannot be deleted as it has active subscriptions or licenses.  + Org cannot be deleted as [Directory Synchronization](https://developer.webex.com/docs/api/v1/broadworks-enterprises/get-directory-sync-status-for-an-enterprise) is enabled.  + Org cannot be deleted as it has more than 1 user.  + Org cannot be deleted as it has more than 1 managed by relationship.  + Org cannot be deleted as it has managed orgs.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt;When deleting a Webex for BroadWorks Organization with BroadWorks Directory Synchronization enabled, a prerequisite is to disable BroadWorks Directory Synchronization for the given Organization. Refer to the [Organization Deletion](https://developer.webex.com/docs/api/guides/webex-for-broadworks-developers-guide#organization-deletion) section of the [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information.&lt;/Callout&gt; &lt;/div&gt;
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAsync(String orgId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(orgId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnOrganization
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnOrganizationCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/identity/organizations/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnOrganizationValidateBeforeCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAnOrganization(Async)");
        }

        return getAnOrganizationCall(orgId, authorization, _callback);

    }

    /**
     * Get an organization
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  - &#x60;identity:organizations_read&#x60;  &lt;br/&gt;
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return GetAnOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAnOrganization200Response getAnOrganization(String orgId, String authorization) throws ApiException {
        ApiResponse<GetAnOrganization200Response> localVarResp = getAnOrganizationWithHttpInfo(orgId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get an organization
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  - &#x60;identity:organizations_read&#x60;  &lt;br/&gt;
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return ApiResponse&lt;GetAnOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAnOrganization200Response> getAnOrganizationWithHttpInfo(String orgId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getAnOrganizationValidateBeforeCall(orgId, authorization, null);
        Type localVarReturnType = new TypeToken<GetAnOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization (asynchronously)
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  - &#x60;identity:organizations_read&#x60;  &lt;br/&gt;
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnOrganizationAsync(String orgId, String authorization, final ApiCallback<GetAnOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnOrganizationValidateBeforeCall(orgId, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetAnOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDetails
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDetailsCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDetailsValidateBeforeCall(String orgId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOrganizationDetails(Async)");
        }

        return getOrganizationDetailsCall(orgId, authorization, _callback);

    }

    /**
     * Get Organization Details
     * Shows details for an organization, by ID.  Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return GetOrganizationDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationDetails200Response getOrganizationDetails(String orgId, String authorization) throws ApiException {
        ApiResponse<GetOrganizationDetails200Response> localVarResp = getOrganizationDetailsWithHttpInfo(orgId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Organization Details
     * Shows details for an organization, by ID.  Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return ApiResponse&lt;GetOrganizationDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrganizationDetails200Response> getOrganizationDetailsWithHttpInfo(String orgId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDetailsValidateBeforeCall(orgId, authorization, null);
        Type localVarReturnType = new TypeToken<GetOrganizationDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization Details (asynchronously)
     * Shows details for an organization, by ID.  Specify the org ID in the &#x60;orgId&#x60; parameter in the URI.
     * @param orgId The unique identifier for the organization. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDetailsAsync(String orgId, String authorization, final ApiCallback<GetOrganizationDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDetailsValidateBeforeCall(orgId, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetOrganizationDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizations
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        return listOrganizationsCall(authorization, _callback);

    }

    /**
     * List Organizations
     * List all organizations visible by your account. The results will not be [paginated](/docs/basics#pagination).
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return ListOrganizations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListOrganizations200Response listOrganizations(String authorization) throws ApiException {
        ApiResponse<ListOrganizations200Response> localVarResp = listOrganizationsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * List Organizations
     * List all organizations visible by your account. The results will not be [paginated](/docs/basics#pagination).
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @return ApiResponse&lt;ListOrganizations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOrganizations200Response> listOrganizationsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<ListOrganizations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Organizations (asynchronously)
     * List all organizations visible by your account. The results will not be [paginated](/docs/basics#pagination).
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationsAsync(String authorization, final ApiCallback<ListOrganizations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<ListOrganizations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnOrganization
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param updateAnOrganizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationCall(String orgId, String authorization, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnOrganizationRequest;

        // create path and map variables
        String localVarPath = "/identity/organizations/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnOrganizationValidateBeforeCall(String orgId, String authorization, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateAnOrganization(Async)");
        }

        return updateAnOrganizationCall(orgId, authorization, updateAnOrganizationRequest, _callback);

    }

    /**
     * Update an organization
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  &lt;br/&gt;  The following administrators can use this API:  - &#x60;id_full_admin&#x60;  &lt;br/&gt;  **Usage**:  1. Input JSON must contain schema: \&quot;urn:cisco:codev:identity:organization:core:1.0\&quot;.
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param updateAnOrganizationRequest  (optional)
     * @return GetAnOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAnOrganization200Response updateAnOrganization(String orgId, String authorization, UpdateAnOrganizationRequest updateAnOrganizationRequest) throws ApiException {
        ApiResponse<GetAnOrganization200Response> localVarResp = updateAnOrganizationWithHttpInfo(orgId, authorization, updateAnOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  &lt;br/&gt;  The following administrators can use this API:  - &#x60;id_full_admin&#x60;  &lt;br/&gt;  **Usage**:  1. Input JSON must contain schema: \&quot;urn:cisco:codev:identity:organization:core:1.0\&quot;.
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param updateAnOrganizationRequest  (optional)
     * @return ApiResponse&lt;GetAnOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAnOrganization200Response> updateAnOrganizationWithHttpInfo(String orgId, String authorization, UpdateAnOrganizationRequest updateAnOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAnOrganizationValidateBeforeCall(orgId, authorization, updateAnOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<GetAnOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization (asynchronously)
     * &lt;br/&gt;  **Authorization**  OAuth token rendered by identity broker.  &lt;br/&gt;  One of the following OAuth scopes is required:  - &#x60;identity:organizations_rw&#x60;  &lt;br/&gt;  The following administrators can use this API:  - &#x60;id_full_admin&#x60;  &lt;br/&gt;  **Usage**:  1. Input JSON must contain schema: \&quot;urn:cisco:codev:identity:organization:core:1.0\&quot;.
     * @param orgId Webex Identity assigned organization identifier. (required)
     * @param authorization e.g. Bearer YOUR_AUTHORIZATION_TOKEN (optional)
     * @param updateAnOrganizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnOrganizationAsync(String orgId, String authorization, UpdateAnOrganizationRequest updateAnOrganizationRequest, final ApiCallback<GetAnOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnOrganizationValidateBeforeCall(orgId, authorization, updateAnOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<GetAnOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
