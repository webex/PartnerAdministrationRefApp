// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Activate Phone Numbers in a location
     *
     * Activate the specified set of phone numbers in a location for an organization.  Each location has a set of phone numbers that can be assigned to people, workspaces, or features. Phone numbers must follow the E.164 format. Active phone numbers are in service.  A mobile number is activated when assigned to a user. This API will not activate mobile numbers.  Activating a phone number in a location requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;br/&gt;  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;This API is only supported for non-integrated PSTN connection types of Local Gateway (LGW) and Non-integrated CPP. It should never be used for locations with integrated PSTN connection types like Cisco Calling Plans or Integrated CCP because backend data issues may occur.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activatePhoneNumbersInALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        NumbersRequest numbersRequest = null;
        api.activatePhoneNumbersInALocation(locationId, orgId, authorization, numbersRequest);
        // TODO: test validations
    }

    /**
     * Add a Handset to a DECT Network
     *
     * Add a handset to a DECT network in a location in an organization.  Adding a handset to a DECT network requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Adding a DECT handset to a person with a Webex Calling Standard license will disable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAHandsetToADECTNetworkTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        AddAHandsetToADECTNetworkRequest addAHandsetToADECTNetworkRequest = null;
        api.addAHandsetToADECTNetwork(locationId, dectNetworkId, orgId, authorization, addAHandsetToADECTNetworkRequest);
        // TODO: test validations
    }

    /**
     * Add a New Event for Person&#39;s Schedule
     *
     * People can use shared location schedules or define personal schedules containing events.  &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addANewEventForPersonsScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        CreateScheduleForAPersonRequestEventsInner createScheduleForAPersonRequestEventsInner = null;
        UpdateAnEventForAPersonSSchedule200Response response = api.addANewEventForPersonsSchedule(personId, scheduleType, scheduleId, orgId, authorization, createScheduleForAPersonRequestEventsInner);
        // TODO: test validations
    }

    /**
     * Add Phone Numbers to a location
     *
     * Adds a specified set of phone numbers to a location for an organization.  Each location has a set of phone numbers that can be assigned to people, workspaces, or features. Phone numbers must follow the E.164 format. Active phone numbers are in service.  Adding a phone number to a location requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;br/&gt;  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;This API is only supported for adding DID and Toll-free numbers to non-integrated PSTN connection types such as Local Gateway (LGW) and Non-integrated CPP. It should never be used for locations with integrated PSTN connection types like Cisco Calling Plans or Integrated CCP because backend data issues may occur. &lt;/Callout&gt;&lt;/div&gt;  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Mobile numbers can be added to any location that has PSTN connection setup. Only 20 mobile numbers can be added per request. &lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPhoneNumbersToALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        NumbersPost numbersPost = null;
        api.addPhoneNumbersToALocation(locationId, orgId, authorization, numbersPost);
        // TODO: test validations
    }

    /**
     * Answer
     *
     * Answer an incoming call. When no endpointId is specified, the call is answered on the user&#39;s primary device. When an endpointId is specified, the call is answered on the device or application identified by the endpointId. The answer API is rejected if the device is not alerting for the call or the device does not support answer via API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void answerTest() throws ApiException {
        String authorization = null;
        AnswerRequest answerRequest = null;
        api.answer(authorization, answerRequest);
        // TODO: test validations
    }

    /**
     * Assign or Unassign numbers associated with a specific workspace
     *
     * Assign or unassign alternate phone numbers associated with a specific workspace.  Each location has a set of phone numbers that can be assigned to people, workspaces, or features. Phone numbers must follow the E.164 format for all countries, except for the United States, which can also follow the National format. Active phone numbers are in service.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrUnassignNumbersAssociatedWithASpecificWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        AssignOrUnassignNumbersAssociatedWithASpecificWorkspaceRequest assignOrUnassignNumbersAssociatedWithASpecificWorkspaceRequest = null;
        api.assignOrUnassignNumbersAssociatedWithASpecificWorkspace(workspaceId, orgId, authorization, assignOrUnassignNumbersAssociatedWithASpecificWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Assign or Unassign numbers to a person
     *
     * Assign or unassign alternate phone numbers to a person.  Each location has a set of phone numbers that can be assigned to people, workspaces, or features. Phone numbers must follow the E.164 format for all countries, except for the United States, which can also follow the National format. Active phone numbers are in service.  Assigning or unassigning an alternate phone number to a person requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrUnassignNumbersToAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        UserNumbersPatch userNumbersPatch = null;
        api.assignOrUnassignNumbersToAPerson(personId, orgId, authorization, userNumbersPatch);
        // TODO: test validations
    }

    /**
     * Barge In
     *
     * Barge-in on another user&#39;s answered call. A new call is initiated to perform the barge-in in a similar manner to the dial command.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bargeInTest() throws ApiException {
        String authorization = null;
        BargeInRequest bargeInRequest = null;
        Retrieve201Response response = api.bargeIn(authorization, bargeInRequest);
        // TODO: test validations
    }

    /**
     * Configure a person&#39;s Calling Behavior
     *
     * Modifies the calling behavior settings for the person which includes calling behavior and UC Manager Profile ID.  Webex Calling Behavior controls which Webex telephony application and which UC Manager Profile is to be used for a person.  An organization has an organization-wide default Calling Behavior that may be overridden for individual persons.  UC Manager Profiles are applicable if your organization uses Jabber in Team Messaging mode or Calling in Webex (Unified CM).  The UC Manager Profile also has an organization-wide default and may be overridden for individual persons.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAPersonsCallingBehaviorTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureAPersonSCallingBehaviorRequest configureAPersonSCallingBehaviorRequest = null;
        api.configureAPersonsCallingBehavior(personId, orgId, authorization, configureAPersonSCallingBehaviorRequest);
        // TODO: test validations
    }

    /**
     * Configure a Person&#39;s MS Teams Setting
     *
     * &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Not supported for Webex for Government (FedRAMP)&lt;/Callout&gt;&lt;/div&gt;  Configure a Person&#39;s MS Teams setting.  MS Teams settings can be configured at the person level.  Requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAPersonsMSTeamsSettingTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ModifyUserMSTeamsSettingsObject modifyUserMSTeamsSettingsObject = null;
        api.configureAPersonsMSTeamsSetting(personId, orgId, authorization, modifyUserMSTeamsSettingsObject);
        // TODO: test validations
    }

    /**
     * Configure a person&#39;s Privacy Settings
     *
     * Configure a person&#39;s privacy settings for the specified person ID.  The privacy feature enables the person&#39;s line to be monitored by others and determine if they can be reached by Auto Attendant services.  This API requires a full or user administrator or location administrator auth token with the spark-admin:people_write scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAPersonsPrivacySettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureAPersonSPrivacySettingsRequest configureAPersonSPrivacySettingsRequest = null;
        api.configureAPersonsPrivacySettings(personId, orgId, authorization, configureAPersonSPrivacySettingsRequest);
        // TODO: test validations
    }

    /**
     * Configure a Virtual Line&#39;s Privacy Settings
     *
     * Configure a virtual line&#39;s privacy settings for the specified virtual line ID.  The privacy feature enables the virtual line&#39;s line to be monitored by others and determine if they can be reached by Auto Attendant services.  Updating the privacy settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAVirtualLinesPrivacySettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureAVirtualLineSPrivacySettingsRequest configureAVirtualLineSPrivacySettingsRequest = null;
        api.configureAVirtualLinesPrivacySettings(virtualLineId, orgId, authorization, configureAVirtualLineSPrivacySettingsRequest);
        // TODO: test validations
    }

    /**
     * Configure Barge In Settings for a Person
     *
     * Configure a person&#39;s Barge In settings.  The Barge In feature enables you to use a Feature Access Code (FAC) to answer a call that was directed to another subscriber, or barge-in on the call if it was already answered. Barge In can be used across locations.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their own settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureBargeInSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureBargeInSettingsForAPersonRequest configureBargeInSettingsForAPersonRequest = null;
        api.configureBargeInSettingsForAPerson(personId, orgId, authorization, configureBargeInSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Barge In Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s barge in settings.  The Barge In feature enables you to use a Feature Access Code (FAC) to answer a call that was directed to another subscriber, or barge-in on the call if it was already answered. Barge In can be used across locations.  Updating the barge in settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureBargeInSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureBargeInSettingsForAVirtualLineRequest configureBargeInSettingsForAVirtualLineRequest = null;
        api.configureBargeInSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureBargeInSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Busy Voicemail Greeting for a Person
     *
     * Configure a person&#39;s Busy Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureBusyVoicemailGreetingForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        api.configureBusyVoicemailGreetingForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Busy Voicemail Greeting for a Place
     *
     * Configure a workspace&#39;s Busy Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureBusyVoicemailGreetingForAPlaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        api.configureBusyVoicemailGreetingForAPlace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Busy Voicemail Greeting for a Virtual Line
     *
     * Configure a virtual line&#39;s Busy Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  Uploading the voicemail busy greeting announcement for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **WARNING:** This API is not callable using the developer portal web interface due to the lack of support for multipart POST. This API can be utilized using other tools that support multipart POST, such as Postman.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureBusyVoicemailGreetingForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        api.configureBusyVoicemailGreetingForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Call Bridge Settings for a Person
     *
     * Configure a person&#39;s Call Bridge settings.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallBridgeSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallBridgeSettingsForAPersonRequest configureCallBridgeSettingsForAPersonRequest = null;
        api.configureCallBridgeSettingsForAPerson(personId, orgId, authorization, configureCallBridgeSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Bridge Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s call bridge settings.  Updating the call bridge settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallBridgeSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallBridgeSettingsForAVirtualLineRequest configureCallBridgeSettingsForAVirtualLineRequest = null;
        api.configureCallBridgeSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureCallBridgeSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Forwarding Settings for a Person
     *
     * Configure a person&#39;s Call Forwarding settings.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy - forwards all incoming calls to the destination you chose while the phone is in use or the person is busy.  + When no answer - forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallForwardingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallForwardingSettingsForAPersonRequest configureCallForwardingSettingsForAPersonRequest = null;
        api.configureCallForwardingSettingsForAPerson(personId, orgId, authorization, configureCallForwardingSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Forwarding Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s Call Forwarding settings.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy - forwards all incoming calls to the destination you chose while the phone is in use or the virtual line is busy.  + When no answer - forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  Updating the call forwarding settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallForwardingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallForwardingSettingsForAVirtualLineRequest configureCallForwardingSettingsForAVirtualLineRequest = null;
        api.configureCallForwardingSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureCallForwardingSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Intercept Greeting for a Person
     *
     * Configure a person&#39;s Call Intercept Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallInterceptGreetingForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        api.configureCallInterceptGreetingForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Call Intercept Greeting for a Virtual Line
     *
     * Configure a virtual line&#39;s Call Intercept Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  Uploading the intercept greeting announcement for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **WARNING:** This API is not callable using the developer portal web interface due to the lack of support for multipart POST. This API can be utilized using other tools that support multipart POST, such as Postman.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallInterceptGreetingForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        api.configureCallInterceptGreetingForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Call Intercept Settings for a Person
     *
     * Configures a person&#39;s Call Intercept settings.  The intercept feature gracefully takes a person&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified person are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallInterceptSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallInterceptSettingsForAPersonRequest configureCallInterceptSettingsForAPersonRequest = null;
        api.configureCallInterceptSettingsForAPerson(personId, orgId, authorization, configureCallInterceptSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Intercept Settings for a Virtual Line
     *
     * Configures a virtual line&#39;s Call Intercept settings.  The intercept feature gracefully takes a virtual line&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified virtual line are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  Updating the intercept settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallInterceptSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallInterceptSettingsForAVirtualLineRequest configureCallInterceptSettingsForAVirtualLineRequest = null;
        api.configureCallInterceptSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureCallInterceptSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Intercept Settings for a Workspace
     *
     * Configures a Workspace&#39;s Call Intercept Settings  The intercept feature gracefully takes a workspace&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified person are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_write&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used by a person to read their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallInterceptSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        InterceptPatch interceptPatch = null;
        api.configureCallInterceptSettingsForAWorkspace(workspaceId, orgId, authorization, interceptPatch);
        // TODO: test validations
    }

    /**
     * Configure Call Policy Settings for a Workspace
     *
     * Configure a workspace Call Policies settings.  The call policy feature enables administrator to configure call policy settings such as Connected Line Identification Privacy on Redirected Calls for a professional workspace.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallPolicySettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadCallPolicySettingsForAWorkspace200Response readCallPolicySettingsForAWorkspace200Response = null;
        api.configureCallPolicySettingsForAWorkspace(workspaceId, orgId, authorization, readCallPolicySettingsForAWorkspace200Response);
        // TODO: test validations
    }

    /**
     * Configure Call Recording Settings for a Person
     *
     * Configure a person&#39;s Call Recording settings.  The Call Recording feature provides a hosted mechanism to record the calls placed and received on the Carrier platform for replay and archival. This feature is helpful for quality assurance, security, training, and more.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;A person with a Webex Calling Standard license is eligible for the Call Recording feature only when the Call Recording vendor is Webex.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallRecordingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallRecordingSettingsForAPersonRequest configureCallRecordingSettingsForAPersonRequest = null;
        api.configureCallRecordingSettingsForAPerson(personId, orgId, authorization, configureCallRecordingSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Recording Settings for a Virtual Line
     *
     * Configure virtual line&#39;s Call Recording settings.  The Call Recording feature provides a hosted mechanism to record the calls placed and received on the Carrier platform for replay and archival. This feature is helpful for quality assurance, security, training, and more.  This API requires a full or user administrator auth token with the &#x60;spark-admin:telephony_config_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallRecordingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallRecordingSettingsForAVirtualLineRequest configureCallRecordingSettingsForAVirtualLineRequest = null;
        api.configureCallRecordingSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureCallRecordingSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Call Waiting Settings for a Person
     *
     * Configure a person&#39;s Call Waiting settings.  With this feature, a person can place an active call on hold and answer an incoming call.  When enabled, while you are on an active call, a tone alerts you of an incoming call and you can choose to answer or ignore the call.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallWaitingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallWaitingSettingsForAPerson200Response readCallWaitingSettingsForAPerson200Response = null;
        api.configureCallWaitingSettingsForAPerson(personId, orgId, authorization, readCallWaitingSettingsForAPerson200Response);
        // TODO: test validations
    }

    /**
     * Configure Call Waiting Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s Call Waiting settings.  With this feature, a virtual line can place an active call on hold and answer an incoming call.  When enabled, while you are on an active call, a tone alerts you of an incoming call and you can choose to answer or ignore the call.  Updating the call waiting settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallWaitingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallWaitingSettingsForAPerson200Response readCallWaitingSettingsForAPerson200Response = null;
        api.configureCallWaitingSettingsForAVirtualLine(virtualLineId, orgId, authorization, readCallWaitingSettingsForAPerson200Response);
        // TODO: test validations
    }

    /**
     * Configure Caller ID Settings for a Person
     *
     * Configure a person&#39;s Caller ID settings.  Caller ID settings control how a person&#39;s information is displayed when making outgoing calls.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallerIDSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallerIDSettingsForAPersonRequest configureCallerIDSettingsForAPersonRequest = null;
        api.configureCallerIDSettingsForAPerson(personId, orgId, authorization, configureCallerIDSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Caller ID Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s Caller ID settings.  Caller ID settings control how a virtual line&#39;s information is displayed when making outgoing calls.  Updating the caller ID settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallerIDSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureCallerIDSettingsForAVirtualLineRequest configureCallerIDSettingsForAVirtualLineRequest = null;
        api.configureCallerIDSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureCallerIDSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Caller ID Settings for a Workspace
     *
     * Configure workspace&#39;s Caller ID settings.  Caller ID settings control how a workspace&#39;s information is displayed when making outgoing calls.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureCallerIDSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ModifyPlaceCallerIdGet modifyPlaceCallerIdGet = null;
        api.configureCallerIDSettingsForAWorkspace(workspaceId, orgId, authorization, modifyPlaceCallerIdGet);
        // TODO: test validations
    }

    /**
     * Configure Do Not Disturb Settings for a Person
     *
     * Configure a person&#39;s Do Not Disturb settings.  When enabled, this feature will give all incoming calls the busy treatment. Optionally, you can enable a Ring Reminder to play a brief tone on your desktop phone when you receive incoming calls.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureDoNotDisturbSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureDoNotDisturbSettingsForAPersonRequest configureDoNotDisturbSettingsForAPersonRequest = null;
        api.configureDoNotDisturbSettingsForAPerson(personId, orgId, authorization, configureDoNotDisturbSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Hoteling Settings for a Person
     *
     * Configure a person&#39;s hoteling settings.  As an administrator, you can enable hoteling for people so that their phone profile (phone number, features, and calling plan) is temporarily loaded onto a shared (host) phone.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureHotelingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadHotelingSettingsForAPerson200Response readHotelingSettingsForAPerson200Response = null;
        api.configureHotelingSettingsForAPerson(personId, orgId, authorization, readHotelingSettingsForAPerson200Response);
        // TODO: test validations
    }

    /**
     * Configure Incoming Permission Settings for a Person
     *
     * Configure a person&#39;s Incoming Permission settings.  You can change the incoming calling permissions for a person if you want them to be different from your organization&#39;s default.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureIncomingPermissionSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadIncomingPermissionSettingsForAPerson200Response readIncomingPermissionSettingsForAPerson200Response = null;
        api.configureIncomingPermissionSettingsForAPerson(personId, orgId, authorization, readIncomingPermissionSettingsForAPerson200Response);
        // TODO: test validations
    }

    /**
     * Configure Incoming Permission Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s Incoming Permission settings.  You can change the incoming calling permissions for a virtual line if you want them to be different from your organization&#39;s default.  Updating the incoming permission settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureIncomingPermissionSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadIncomingPermissionSettingsForAVirtualLine200Response readIncomingPermissionSettingsForAVirtualLine200Response = null;
        api.configureIncomingPermissionSettingsForAVirtualLine(virtualLineId, orgId, authorization, readIncomingPermissionSettingsForAVirtualLine200Response);
        // TODO: test validations
    }

    /**
     * Configure Music On Hold Settings for a Person
     *
     * Configure a person&#39;s music on hold settings.  Music on hold is played when a caller is put on hold, or the call is parked.  To configure music on hold settings for a person, music on hold setting must be enabled for this location.  Updating a person&#39;s music on hold settings requires a full or user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureMusicOnHoldSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        PutMusicOnHoldObject putMusicOnHoldObject = null;
        api.configureMusicOnHoldSettingsForAPerson(personId, orgId, authorization, putMusicOnHoldObject);
        // TODO: test validations
    }

    /**
     * Configure Music On Hold Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s music on hold settings.  Music on hold is played when a caller is put on hold, or the call is parked.  To configure music on hold settings for a virtual line, music on hold setting must be enabled for this location.  Updating the music on hold settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureMusicOnHoldSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        PutMusicOnHoldObject putMusicOnHoldObject = null;
        api.configureMusicOnHoldSettingsForAVirtualLine(virtualLineId, orgId, authorization, putMusicOnHoldObject);
        // TODO: test validations
    }

    /**
     * Configure No Answer Voicemail Greeting for a Person
     *
     * Configure a person&#39;s No Answer Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureNoAnswerVoicemailGreetingForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        api.configureNoAnswerVoicemailGreetingForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure No Answer Voicemail Greeting for a Place
     *
     * Configure a workspace&#39;s No Answer Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureNoAnswerVoicemailGreetingForAPlaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        api.configureNoAnswerVoicemailGreetingForAPlace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure No Answer Voicemail Greeting for a Virtual Line
     *
     * Configure a virtual line&#39;s No Answer Voicemail Greeting by uploading a Waveform Audio File Format, &#x60;.wav&#x60;, encoded audio file.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  Uploading the voicemail no answer greeting announcement for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **WARNING:** This API is not callable using the developer portal web interface due to the lack of support for multipart POST. This API can be utilized using other tools that support multipart POST, such as Postman.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureNoAnswerVoicemailGreetingForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        api.configureNoAnswerVoicemailGreetingForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Configure Priority Alert Settings for a Workspace
     *
     * Configure a workspace Priority Alert Settings.  The priority alert feature enables administrator to configure priority alert settings for a professional workspace.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope that can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurePriorityAlertSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ConfigurePriorityAlertSettingsForAWorkspaceRequest configurePriorityAlertSettingsForAWorkspaceRequest = null;
        api.configurePriorityAlertSettingsForAWorkspace(workspaceId, orgId, authorization, configurePriorityAlertSettingsForAWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Configure Push-to-Talk Settings for a Person
     *
     * Configure a person&#39;s Push-to-Talk settings.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people in different parts of your organization.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurePushToTalkSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigurePushToTalkSettingsForAPersonRequest configurePushToTalkSettingsForAPersonRequest = null;
        api.configurePushToTalkSettingsForAPerson(personId, orgId, authorization, configurePushToTalkSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Push-to-Talk Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s Push-to-Talk settings.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people in different parts of your organization.  Updating the Push-to-Talk settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurePushToTalkSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigurePushToTalkSettingsForAPersonRequest configurePushToTalkSettingsForAPersonRequest = null;
        api.configurePushToTalkSettingsForAVirtualLine(virtualLineId, orgId, authorization, configurePushToTalkSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Push-to-Talk Settings for a Workspace
     *
     * Configure Push-to-Talk settings for a workspace.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people/workspaces in different parts of your organization.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurePushToTalkSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ConfigurePushToTalkSettingsForAPersonRequest configurePushToTalkSettingsForAPersonRequest = null;
        api.configurePushToTalkSettingsForAWorkspace(workspaceId, orgId, authorization, configurePushToTalkSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Receptionist Client Settings for a Person
     *
     * Configure a person&#39;s Receptionist Client settings.  To help support the needs of your front-office personnel, you can set up people, workspaces or virtual lines as telephone attendants so that they can screen all incoming calls to certain numbers within your organization.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureReceptionistClientSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureReceptionistClientSettingsForAPersonRequest configureReceptionistClientSettingsForAPersonRequest = null;
        api.configureReceptionistClientSettingsForAPerson(personId, orgId, authorization, configureReceptionistClientSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Voicemail Settings for a Person
     *
     * Configure a person&#39;s Voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail. Voicemail audio is sent in Waveform Audio File Format, &#x60;.wav&#x60;, format.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope or a user auth token with &#x60;spark:people_write&#x60; scope can be used by a person to update their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureVoicemailSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ConfigureVoicemailSettingsForAPersonRequest configureVoicemailSettingsForAPersonRequest = null;
        api.configureVoicemailSettingsForAPerson(personId, orgId, authorization, configureVoicemailSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Configure Voicemail Settings for a Virtual Line
     *
     * Configure a virtual line&#39;s voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via voicemail.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  Updating the voicemail settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureVoicemailSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ConfigureVoicemailSettingsForAVirtualLineRequest configureVoicemailSettingsForAVirtualLineRequest = null;
        api.configureVoicemailSettingsForAVirtualLine(virtualLineId, orgId, authorization, configureVoicemailSettingsForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Configure Voicemail Settings for a Workspace
     *
     * Configure a workspace Voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail. Voicemail audio is sent in Waveform Audio File Format, &#x60;.wav&#x60;, format.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureVoicemailSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ConfigureVoicemailSettingsForAWorkspaceRequest configureVoicemailSettingsForAWorkspaceRequest = null;
        api.configureVoicemailSettingsForAWorkspace(workspaceId, orgId, authorization, configureVoicemailSettingsForAWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Create a BroadWorks Billing Report
     *
     * Generate a monthly reconciliation report.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; Partners who have moved to extended wholesale subscription model should generate reports via [Wholesale Billing Reports](/docs/api/v1/wholesale-billing). &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createABroadWorksBillingReportTest() throws ApiException {
        String authorization = null;
        CreateABroadWorksBillingReportRequest createABroadWorksBillingReportRequest = null;
        CreateABroadWorksBillingReport200Response response = api.createABroadWorksBillingReport(authorization, createABroadWorksBillingReportRequest);
        // TODO: test validations
    }

    /**
     * Create a Call Park
     *
     * Create new Call Parks for the given location.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Creating a call park requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Park ID will change upon modification of the Call Park name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACallParkTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateACallParkRequest createACallParkRequest = null;
        CreateACallPark201Response response = api.createACallPark(locationId, orgId, authorization, createACallParkRequest);
        // TODO: test validations
    }

    /**
     * Create a Call Park Extension
     *
     * Create new Call Park Extensions for the given location.  Call Park Extension enables a call recipient to park a call to an extension, so someone else within the same Organization can retrieve the parked call by dialing that extension. Call Park Extensions can be added as monitored lines by users&#39; Cisco phones, so users can park and retrieve calls by pressing the associated phone line key.  Creating a call park extension requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACallParkExtensionTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateACallParkExtensionRequest createACallParkExtensionRequest = null;
        CreateACallParkExtension201Response response = api.createACallParkExtension(locationId, orgId, authorization, createACallParkExtensionRequest);
        // TODO: test validations
    }

    /**
     * Create a Call Pickup
     *
     * Create new Call Pickups for the given location.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Creating a call pickup requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Pickup ID will change upon modification of the Call Pickup name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACallPickupTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateACallPickupRequest createACallPickupRequest = null;
        CreateACallPickup201Response response = api.createACallPickup(locationId, orgId, authorization, createACallPickupRequest);
        // TODO: test validations
    }

    /**
     * Create a Call Queue
     *
     * Create new Call Queues for the given location.  Call queues temporarily hold calls in the cloud when all agents, which can be users or agents, assigned to receive calls from the queue are unavailable. Queued calls are routed to an available agent when not on an active call. Each call queue is assigned a Lead Number, which is a telephone number outside callers can dial to reach users assigned to the call queue. Call queues are also assigned an internal extension, which can be dialed internally to reach users assigned to the call queue.  Creating a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACallQueueTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateACallQueueRequest createACallQueueRequest = null;
        CreateACallQueue200Response response = api.createACallQueue(locationId, orgId, authorization, createACallQueueRequest);
        // TODO: test validations
    }

    /**
     * Create a DECT Network
     *
     * Create a multi-cell DECT network for a given location.  Creating a DECT network requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createADECTNetworkTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateADECTNetworkRequest createADECTNetworkRequest = null;
        CreateADECTNetwork201Response response = api.createADECTNetwork(locationId, orgId, authorization, createADECTNetworkRequest);
        // TODO: test validations
    }

    /**
     * Create a Device Activation Code
     *
     * Generate an activation code for a device in a specific workspace by &#x60;workspaceId&#x60; or for a person by &#x60;personId&#x60;. This requires an auth token with the &#x60;spark-admin:devices_write&#x60; scope, and either &#x60;identity:placeonetimepassword_create&#x60; (allows creating activation codes for workspaces only) or &#x60;identity:one_time_password&#x60; (allows creating activation codes for workspaces or persons).  * Adding a device to a workspace with calling type &#x60;none&#x60; or &#x60;thirdPartySipCalling&#x60; will reset the workspace calling type to &#x60;freeCalling&#x60;.  * Either &#x60;workspaceId&#x60; or &#x60;personId&#x60; should be provided. If both are supplied, the request will be invalid.  * If no &#x60;model&#x60; is supplied, the &#x60;code&#x60; returned will only be accepted on RoomOS devices.  * If your device is a phone, you must provide the &#x60;model&#x60; as a field. You can get the &#x60;model&#x60; from the [supported devices](/docs/api/v1/device-call-settings/read-the-list-of-supported-devices) API.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Adding a device to a person with a Webex Calling Standard license will disable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createADeviceActivationCodeTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        CreateADeviceActivationCodeRequest createADeviceActivationCodeRequest = null;
        CreateADeviceActivationCode200Response response = api.createADeviceActivationCode(orgId, authorization, createADeviceActivationCodeRequest);
        // TODO: test validations
    }

    /**
     * Create a Device by MAC Address
     *
     * Create a phone by its MAC address in a specific workspace or for a person.  Specify the &#x60;mac&#x60;, &#x60;model&#x60; and either &#x60;workspaceId&#x60; or &#x60;personId&#x60;.  * You can get the &#x60;model&#x60; from the [supported devices](/docs/api/v1/device-call-settings/read-the-list-of-supported-devices) API.  * Either &#x60;workspaceId&#x60; or &#x60;personId&#x60; should be provided. If both are supplied, the request will be invalid.  * The &#x60;password&#x60; field is only required for third party devices. You can obtain the required third party phone configuration from [here](/docs/api/v1/beta-device-call-settings-with-third-party-device-support/get-third-party-device).  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Adding a device to a person with a Webex Calling Standard license will disable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createADeviceByMACAddressTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        CreateADeviceByMACAddressRequest createADeviceByMACAddressRequest = null;
        CreateADeviceByMACAddress200Response response = api.createADeviceByMACAddress(orgId, authorization, createADeviceByMACAddressRequest);
        // TODO: test validations
    }

    /**
     * Create a Dial Plan
     *
     * Create a Dial Plan for the organization.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Creating a dial plan requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createADialPlanTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        DialPlanPost dialPlanPost = null;
        CreateADialPlan201Response response = api.createADialPlan(orgId, authorization, dialPlanPost);
        // TODO: test validations
    }

    /**
     * Create a Hunt Group
     *
     * Create new Hunt Groups for the given location.  Hunt groups can route incoming calls to a group of people, workspaces or virtual lines. You can even configure a pattern to route to a whole group.  Creating a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAHuntGroupTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateAHuntGroupRequest createAHuntGroupRequest = null;
        CreateAHuntGroup200Response response = api.createAHuntGroup(locationId, orgId, authorization, createAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a Location
     *
     * Create a new Location for a given organization. Only an admin in the organization can create a new Location.  * Creating a location in your organization requires a full administrator auth token with a scope of &#x60;spark-admin:locations_write&#x60;.  * Partners may specify &#x60;orgId&#x60; query parameter to create location in managed organization.  * The following body parameters are required to create a new location:      * &#x60;name&#x60;     * &#x60;timeZone&#x60;     * &#x60;preferredLanguage&#x60;     * &#x60;address&#x60;     * &#x60;announcementLanguage&#x60;.  * &#x60;latitude&#x60;, &#x60;longitude&#x60; and &#x60;notes&#x60; are optional parameters to create a new location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createALocationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        CreateALocationRequest createALocationRequest = null;
        CreateALocation201Response response = api.createALocation(orgId, authorization, createALocationRequest);
        // TODO: test validations
    }

    /**
     * Create a Location Floor
     *
     * Create a new floor in the given location. The &#x60;displayName&#x60; parameter is optional, and omitting it will result in the creation of a floor without that value set. Requires an administrator auth token with the &#x60;spark-admin:locations_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createALocationFloorTest() throws ApiException {
        String locationId = null;
        String authorization = null;
        CreateALocationFloorRequest createALocationFloorRequest = null;
        CreateALocationFloor201Response response = api.createALocationFloor(locationId, authorization, createALocationFloorRequest);
        // TODO: test validations
    }

    /**
     * Create a new Paging Group
     *
     * Create a new Paging Group for the given location.  Group Paging allows a one-way call or group page to up to 75 people, workspaces and virtual lines by dialing a number or extension assigned to a specific paging group. The Group Paging service makes a simultaneous call to all the assigned targets.  Creating a paging group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewPagingGroupTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateANewPagingGroupRequest createANewPagingGroupRequest = null;
        CreateANewPagingGroup201Response response = api.createANewPagingGroup(locationId, orgId, authorization, createANewPagingGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a new Voicemail Group for a Location
     *
     * Create a new voicemail group for the given location for a customer.  A voicemail group can be created for given location for a customer.  Creating a voicemail group for the given location requires a full or user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createANewVoicemailGroupForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateANewVoicemailGroupForALocationRequest createANewVoicemailGroupForALocationRequest = null;
        CreateANewVoicemailGroupForALocation201Response response = api.createANewVoicemailGroupForALocation(locationId, orgId, authorization, createANewVoicemailGroupForALocationRequest);
        // TODO: test validations
    }

    /**
     * Create a Person
     *
     * Create a new user account for a given organization. Only an admin can create a new user account.  At least one of the following body parameters is required to create a new user: &#x60;displayName&#x60;, &#x60;firstName&#x60;, &#x60;lastName&#x60;.  Currently, users may have only one email address associated with their account. The &#x60;emails&#x60; parameter is an array, which accepts multiple values to allow for future expansion, but currently only one email address will be used for the new user.  Admin users can include &#x60;Webex calling&#x60; (BroadCloud) user details in the response by specifying &#x60;callingData&#x60; parameter as true. It may happen that the POST request with calling data returns a 400 status, but the person was created still. One way to get into this state is if an invalid phone number is assigned to a user. The people API aggregates calls to several other microservices, and one may have failed. A best practice is to check if the user exists before retrying. This can be done with the user&#39;s email address and a GET /people.  When doing attendee management, append &#x60;#attendee&#x60; to the &#x60;siteUrl&#x60; parameter (e.g. &#x60;mysite.webex.com#attendee&#x60;) to make the new user an attendee for a site.  **NOTES**:  * For creating a &#x60;Webex Calling&#x60; user, you must provide &#x60;phoneNumbers&#x60; or &#x60;extension&#x60;, &#x60;locationId&#x60;, and &#x60;licenses&#x60; string in the same request.  * &#x60;SipAddresses&#x60; are asigned via an asynchronous process. This means that the POST response may not show the SIPAddresses immediately. Instead you can verify them with a separate GET to /people, after they were newly configured.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAPersonTest() throws ApiException {
        Boolean callingData = null;
        Boolean minResponse = null;
        String authorization = null;
        CreateAPersonRequest createAPersonRequest = null;
        CreateAPerson200Response response = api.createAPerson(callingData, minResponse, authorization, createAPersonRequest);
        // TODO: test validations
    }

    /**
     * Create a RedSky Building Address and Alert Email for a Location
     *
     * Add a RedSky building address and alert email for a specified location.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Creating a building address and alert email requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createARedSkyBuildingAddressAndAlertEmailForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateBuildingRequest createBuildingRequest = null;
        api.createARedSkyBuildingAddressAndAlertEmailForALocation(locationId, orgId, authorization, createBuildingRequest);
        // TODO: test validations
    }

    /**
     * Create a Report
     *
     * Create a new report. For each &#x60;templateId&#x60;, there are a set of validation rules that need to be followed. For example, for templates belonging to Webex, the user needs to provide &#x60;siteUrl&#x60;. These validation rules can be retrieved via the [Report Templates API](/docs/api/v1/report-templates).  The &#39;templateId&#39; parameter is a number. However, it is a limitation of developer.webex.com platform that it is passed as a string when you try to test the API from here.  CSV reports for Teams services are only supported for organizations based in the North American region. Organizations based in a different region will return blank CSV files for any Teams reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAReportTest() throws ApiException {
        String authorization = null;
        CreateAReportRequest createAReportRequest = null;
        CreateAReport200Response response = api.createAReport(authorization, createAReportRequest);
        // TODO: test validations
    }

    /**
     * Create a Route List
     *
     * Create a Route List for the organization.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Creating a Route List requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createARouteListTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RouteListPost routeListPost = null;
        CreateARouteList201Response response = api.createARouteList(orgId, authorization, routeListPost);
        // TODO: test validations
    }

    /**
     * Create a Schedule
     *
     * Create new Schedule for the given location.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Creating a schedule requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAScheduleTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateAScheduleRequest createAScheduleRequest = null;
        CreateASchedule201Response response = api.createASchedule(locationId, orgId, authorization, createAScheduleRequest);
        // TODO: test validations
    }

    /**
     * Create a Schedule Event
     *
     * Create new Event for the given location Schedule.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Creating a schedule event requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAScheduleEventTest() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        CreateAScheduleEventRequest createAScheduleEventRequest = null;
        CreateAScheduleEvent201Response response = api.createAScheduleEvent(locationId, type, scheduleId, orgId, authorization, createAScheduleEventRequest);
        // TODO: test validations
    }

    /**
     * Create a Selective Call Forwarding Rule for a Call Queue
     *
     * Create a Selective Call Forwarding Rule for the designated Call Queue.  A selective call forwarding rule for a call queue allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the call queue&#39;s call forwarding settings.  Creating a selective call forwarding rule for a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createASelectiveCallForwardingRuleForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        CreateASelectiveCallForwardingRuleForAHuntGroupRequest createASelectiveCallForwardingRuleForAHuntGroupRequest = null;
        CreateACallQueue200Response response = api.createASelectiveCallForwardingRuleForACallQueue(locationId, queueId, orgId, authorization, createASelectiveCallForwardingRuleForAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a Selective Call Forwarding Rule for a Hunt Group
     *
     * Create a Selective Call Forwarding Rule for the designated Hunt Group.  A selective call forwarding rule for a hunt group allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the hunt group&#39;s call forwarding settings.  Creating a selective call forwarding rule for a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createASelectiveCallForwardingRuleForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        CreateASelectiveCallForwardingRuleForAHuntGroupRequest createASelectiveCallForwardingRuleForAHuntGroupRequest = null;
        CreateAHuntGroup200Response response = api.createASelectiveCallForwardingRuleForAHuntGroup(locationId, huntGroupId, orgId, authorization, createASelectiveCallForwardingRuleForAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Create a Selective Call Forwarding Rule for an Auto Attendant
     *
     * Create a Selective Call Forwarding Rule for the designated Auto Attendant.  A selective call forwarding rule for an auto attendant allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the auto attendant&#39;s call forwarding settings.  Creating a selective call forwarding rule for an auto attendant requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createASelectiveCallForwardingRuleForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        CreateASelectiveCallForwardingRuleForAnAutoAttendantRequest createASelectiveCallForwardingRuleForAnAutoAttendantRequest = null;
        CreateASelectiveCallForwardingRuleForAnAutoAttendant201Response response = api.createASelectiveCallForwardingRuleForAnAutoAttendant(locationId, autoAttendantId, orgId, authorization, createASelectiveCallForwardingRuleForAnAutoAttendantRequest);
        // TODO: test validations
    }

    /**
     * Create a Trunk
     *
     * Create a Trunk for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Creating a trunk requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createATrunkTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        TrunkPost trunkPost = null;
        CreateATrunk201Response response = api.createATrunk(orgId, authorization, trunkPost);
        // TODO: test validations
    }

    /**
     * Create a Virtual Line
     *
     * Create new Virtual Line for the given location.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Creating a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAVirtualLineTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        CreateAVirtualLineRequest createAVirtualLineRequest = null;
        CreateAVirtualLine201Response response = api.createAVirtualLine(orgId, authorization, createAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Create a Wholesale Billing Report
     *
     * Generate a wholesale billing reconciliation report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAWholesaleBillingReportTest() throws ApiException {
        String authorization = null;
        CreateAWholesaleBillingReportRequest createAWholesaleBillingReportRequest = null;
        CreateAWholesaleBillingReport200Response response = api.createAWholesaleBillingReport(authorization, createAWholesaleBillingReportRequest);
        // TODO: test validations
    }

    /**
     * Create a Workspace
     *
     * Create a workspace.  The &#x60;locationId&#x60;, &#x60;workspaceLocationId&#x60;, &#x60;floorId&#x60;, &#x60;indoorNavigation&#x60;, &#x60;capacity&#x60;, &#x60;type&#x60;, &#x60;notes&#x60; and &#x60;hotdeskingStatus&#x60; parameters are optional, and omitting them will result in the creation of a workspace without these values set, or set to their default. A &#x60;locationId&#x60; must be provided when the &#x60;floorId&#x60; is set. Calendar and calling can also be set for a new workspace. Omitting them will default to free calling and no calendaring. The &#x60;orgId&#x60; parameter can only be used by admin users of another organization (such as partners).  * Information for Webex Calling fields may be found here: [locations](/docs/api/v1/locations/list-locations), [available numbers](/docs/api/v1/numbers/get-phone-numbers-for-an-organization-with-given-criterias) and [licenses](/docs/api/v1/licenses).  * The &#x60;locationId&#x60; and &#x60;supportedDevices&#x60; fields cannot be changed once configured.  * When creating a &#x60;webexCalling&#x60; workspace, a &#x60;locationId&#x60; and either a &#x60;phoneNumber&#x60; or &#x60;extension&#x60; or both is required. Furthermore, it is possible to set the &#x60;licenses&#x60; field with a list of Webex Calling license IDs, if desired. If multiple license IDs are provided, the oldest suitable one will be applied. If no licenses are supplied, the oldest suitable one from the active subscriptions will be automaticaly applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAWorkspaceTest() throws ApiException {
        String authorization = null;
        CreateAWorkspaceRequest createAWorkspaceRequest = null;
        CreateAWorkspace201Response response = api.createAWorkspace(authorization, createAWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Create Access Codes for a Workspace
     *
     * Create new Access codes for the given workspace.  Access codes are used to bypass permissions.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessCodesForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        CreateAccessCodesForAWorkspaceRequest createAccessCodesForAWorkspaceRequest = null;
        api.createAccessCodesForAWorkspace(workspaceId, orgId, authorization, createAccessCodesForAWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Create an Account and Admin in RedSky
     *
     * Create an account and admin in RedSky.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Creating a RedSky account requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAccountAndAdminInRedSkyTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RedSkyCreateObject redSkyCreateObject = null;
        api.createAnAccountAndAdminInRedSky(orgId, authorization, redSkyCreateObject);
        // TODO: test validations
    }

    /**
     * Create an Auto Attendant
     *
     * Create new Auto Attendant for the given location.  Auto attendants play customized prompts and provide callers with menu options for routing their calls through your system.  Creating an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateAnAutoAttendantRequest createAnAutoAttendantRequest = null;
        CreateAnAutoAttendant201Response response = api.createAnAutoAttendant(locationId, orgId, authorization, createAnAutoAttendantRequest);
        // TODO: test validations
    }

    /**
     * Create Multiple Base Stations
     *
     * This API is used to create multiple base stations in a DECT network in an organization.  Creating base stations in a DECT network requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultipleBaseStationsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        CreateMultipleBaseStationsRequest createMultipleBaseStationsRequest = null;
        CreateMultipleBaseStations201Response response = api.createMultipleBaseStations(locationId, dectNetworkId, orgId, authorization, createMultipleBaseStationsRequest);
        // TODO: test validations
    }

    /**
     * Create Outgoing Permission a new access code for a customer location
     *
     * Add a new access code for the given location for a customer.  Use Access Codes to bypass the set permissions for all persons/workspaces at this location.  Creating an access code for the given location requires a full or user administrator or location administrator auth token with a scope of spark-admin:telephony_config_write.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOutgoingPermissionANewAccessCodeForACustomerLocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        CreateOutgoingPermissionANewAccessCodeForACustomerLocationRequest createOutgoingPermissionANewAccessCodeForACustomerLocationRequest = null;
        api.createOutgoingPermissionANewAccessCodeForACustomerLocation(locationId, orgId, authorization, createOutgoingPermissionANewAccessCodeForACustomerLocationRequest);
        // TODO: test validations
    }

    /**
     * Create Priority Alert Criteria for a Workspace
     *
     * Create Priority Alert Criteria Settings for a Workspace.  The priority alert feature enables administrators to configure priority alert settings for a professional workspace. Priority Alert Criteria (Schedules) can also be set up to alert these phones during certain times of the day or days of the week.  This API requires a full, user, or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPriorityAlertCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PlacePriorityAlertCriteriaPost placePriorityAlertCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createPriorityAlertCriteriaForAWorkspace(workspaceId, orgId, authorization, placePriorityAlertCriteriaPost);
        // TODO: test validations
    }

    /**
     * Create Route Group for a Organization
     *
     * Creates a Route Group for the organization.  A Route Group is a collection of trunks that allows further scale and redundancy with the connection to the premises. Route groups can include up to 10 trunks from different locations.  Creating a Route Group requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteGroupForAOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RouteGroupPost routeGroupPost = null;
        CreateRouteGroupForAOrganization201Response response = api.createRouteGroupForAOrganization(orgId, authorization, routeGroupPost);
        // TODO: test validations
    }

    /**
     * Create Schedule for a Person
     *
     * Create a new schedule for a person.  Schedules are used to support calling features and can be defined at the location or person level. &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScheduleForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        CreateScheduleForAPersonRequest createScheduleForAPersonRequest = null;
        CreateScheduleForAPerson201Response response = api.createScheduleForAPerson(personId, orgId, authorization, createScheduleForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Create Selective Accept Criteria for a Workspace
     *
     * Create Selective Accept Criteria Settings for a Workspace.  With the Selective Accept feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSelectiveAcceptCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveAcceptCallCriteriaPost placeSelectiveAcceptCallCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createSelectiveAcceptCriteriaForAWorkspace(workspaceId, orgId, authorization, placeSelectiveAcceptCallCriteriaPost);
        // TODO: test validations
    }

    /**
     * Create Selective Forward Criteria for a Workspace
     *
     * Create Selective Forward Call Criteria Settings for a Workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSelectiveForwardCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveForwardCallCriteriaPost placeSelectiveForwardCallCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createSelectiveForwardCriteriaForAWorkspace(workspaceId, orgId, authorization, placeSelectiveForwardCallCriteriaPost);
        // TODO: test validations
    }

    /**
     * Create Selective Reject Criteria for a Workspace
     *
     * Create Selective Reject Criteria Settings for a Workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSelectiveRejectCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveRejectCallCriteriaPost placeSelectiveRejectCallCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createSelectiveRejectCriteriaForAWorkspace(workspaceId, orgId, authorization, placeSelectiveRejectCallCriteriaPost);
        // TODO: test validations
    }

    /**
     * Create Sequential Ring Criteria for a Workspace
     *
     * Create sequential ring criteria for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another. The sequential ring criteria specify settings such as schedule and incoming numbers for which to sequentially ring or not.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSequentialRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SequentialRingCriteriaPost sequentialRingCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createSequentialRingCriteriaForAWorkspace(workspaceId, orgId, authorization, sequentialRingCriteriaPost);
        // TODO: test validations
    }

    /**
     * Create Simultaneous Ring Criteria for a Workspace
     *
     * Create Simultaneous Ring Criteria Settings for a Workspace.  The Simultaneous Ring feature allows you to configure your office phone and other phones of your choice to ring simultaneously. Simultaneous Ring Criteria (Schedules) can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSimultaneousRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PlaceSimultaneousRingCriteriaPost placeSimultaneousRingCriteriaPost = null;
        CreateSequentialRingCriteriaForAWorkspace201Response response = api.createSimultaneousRingCriteriaForAWorkspace(workspaceId, orgId, authorization, placeSimultaneousRingCriteriaPost);
        // TODO: test validations
    }

    /**
     * Delete a BroadWorks Billing Report
     *
     * Delete a monthly reconciliation report using a report ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteABroadWorksBillingReportTest() throws ApiException {
        String id = null;
        String authorization = null;
        api.deleteABroadWorksBillingReport(id, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Call Park
     *
     * Delete the designated Call Park.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Deleting a call park requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Park ID will change upon modification of the Call Park name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACallParkTest() throws ApiException {
        String locationId = null;
        String callParkId = null;
        String orgId = null;
        String authorization = null;
        api.deleteACallPark(locationId, callParkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Call Park Extension
     *
     * Delete the designated Call Park Extension.  Call Park Extension enables a call recipient to park a call to an extension, so someone else within the same Organization can retrieve the parked call by dialing that extension. Call Park Extensions can be added as monitored lines by users&#39; Cisco phones, so users can park and retrieve calls by pressing the associated phone line key.  Deleting a call park extension requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACallParkExtensionTest() throws ApiException {
        String locationId = null;
        String callParkExtensionId = null;
        String orgId = null;
        String authorization = null;
        api.deleteACallParkExtension(locationId, callParkExtensionId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Call Pickup
     *
     * Delete the designated Call Pickup.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Deleting a call pickup requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Pickup ID will change upon modification of the Call Pickup name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACallPickupTest() throws ApiException {
        String locationId = null;
        String callPickupId = null;
        String orgId = null;
        String authorization = null;
        api.deleteACallPickup(locationId, callPickupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Call Queue
     *
     * Delete the designated Call Queue.  Call queues temporarily hold calls in the cloud when all agents, which can be users or agents, assigned to receive calls from the queue are unavailable. Queued calls are routed to an available agent when not on an active call. Each call queue is assigned a Lead Number, which is a telephone number outside callers can dial to reach users assigned to the call queue. Call queues are also assigned an internal extension, which can be dialed internally to reach users assigned to the call queue.  Deleting a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        api.deleteACallQueue(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Call Queue Announcement File
     *
     * Delete an announcement file for the designated Call Queue.  Call Queue announcement files contain messages and music that callers hear while waiting in the queue. A call queue can be configured to play whatever subset of these announcement files is desired.  Deleting an announcement file for a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACallQueueAnnouncementFileTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String fileName = null;
        String orgId = null;
        String authorization = null;
        api.deleteACallQueueAnnouncementFile(locationId, queueId, fileName, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Device
     *
     * Deletes a device, by ID. Deleting your own device requires an auth token with the &#x60;spark:devices_write&#x60; scope. Deleting any other device in the organization will require an administrator auth token with the &#x60;spark-admin:devices_write&#x60; scope.  Specify the device ID in the &#x60;deviceId&#x60; parameter in the URI.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting a device from a person with a Webex Calling Standard license will enable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteADeviceTest() throws ApiException {
        String deviceId = null;
        String orgId = null;
        String authorization = null;
        api.deleteADevice(deviceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Dial Plan
     *
     * Delete a Dial Plan for the organization.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Deleting a dial plan requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteADialPlanTest() throws ApiException {
        String dialPlanId = null;
        String orgId = null;
        String authorization = null;
        api.deleteADialPlan(dialPlanId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Hunt Group
     *
     * Delete the designated Hunt Group.  Hunt groups can route incoming calls to a group of people or workspaces. You can even configure a pattern to route to a whole group.  Deleting a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAHuntGroup(locationId, huntGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Location Floor
     *
     * Deletes a floor, by ID. Requires an administrator auth token with the &#x60;spark-admin:locations_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteALocationFloorTest() throws ApiException {
        String locationId = null;
        String floorId = null;
        String authorization = null;
        api.deleteALocationFloor(locationId, floorId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Paging Group
     *
     * Delete the designated Paging Group.  Group Paging allows a person to place a one-way call or group page to up to 75 people and/or workspaces by dialing a number or extension assigned to a specific paging group. The Group Paging service makes a simultaneous call to all the assigned targets.  Deleting a paging group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAPagingGroupTest() throws ApiException {
        String locationId = null;
        String pagingId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAPagingGroup(locationId, pagingId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Person
     *
     * Remove a person from the system. Only an admin can remove a person.  Specify the person ID in the &#x60;personId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAPersonTest() throws ApiException {
        String personId = null;
        String authorization = null;
        api.deleteAPerson(personId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Recording
     *
     * Removes a recording with a specified recording ID. The deleted recording cannot be recovered.  If a Compliance Officer deletes another user&#39;s recording, the recording will be inaccessible to regular users (host, attendees and shared), and to the Compliance officer as well. This action purges the recordings from Webex.  Delete a Recording requires the spark-compliance:recordings_write scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteARecordingTest() throws ApiException {
        String recordingId = null;
        String authorization = null;
        DeleteARecordingRequest deleteARecordingRequest = null;
        api.deleteARecording(recordingId, authorization, deleteARecordingRequest);
        // TODO: test validations
    }

    /**
     * Delete a Report
     *
     * Remove a report from the system.  Specify the report ID in the &#x60;reportId&#x60; parameter in the URI  CSV reports for Teams services are only supported for organizations based in the North American region. Organizations based in a different region will return blank CSV files for any Teams reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAReportTest() throws ApiException {
        String reportId = null;
        String authorization = null;
        api.deleteAReport(reportId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Route List
     *
     * Delete a route list for a customer.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Deleting a Route List requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteARouteListTest() throws ApiException {
        String routeListId = null;
        String orgId = null;
        String authorization = null;
        api.deleteARouteList(routeListId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Schedule
     *
     * Delete a schedule by its schedule ID.  Schedules are used to support calling features and can be defined at the location or person level. &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASchedule(personId, scheduleType, scheduleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Schedule Event
     *
     * Delete the designated Schedule Event.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Deleting a schedule event requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAScheduleEventTest() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAScheduleEvent(locationId, type, scheduleId, eventId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Schedule
     *
     * Delete the designated Schedule.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Deleting a schedule requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASchedule_0Test() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASchedule_0(locationId, type, scheduleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Selective Call Forwarding Rule for a Call Queue
     *
     * Delete a Selective Call Forwarding Rule for the designated Call Queue.  A selective call forwarding rule for a call queue allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the call queue&#39;s call forwarding settings.  Deleting a selective call forwarding rule for a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASelectiveCallForwardingRuleForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASelectiveCallForwardingRuleForACallQueue(locationId, queueId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Selective Call Forwarding Rule for a Hunt Group
     *
     * Delete a Selective Call Forwarding Rule for the designated Hunt Group.  A selective call forwarding rule for a hunt group allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the hunt group&#39;s call forwarding settings.  Deleting a selective call forwarding rule for a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASelectiveCallForwardingRuleForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASelectiveCallForwardingRuleForAHuntGroup(locationId, huntGroupId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Selective Call Forwarding Rule for an Auto Attendant
     *
     * Delete a Selective Call Forwarding Rule for the designated Auto Attendant.  A selective call forwarding rule for an auto attendant allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the auto attendant&#39;s call forwarding settings.  Deleting a selective call forwarding rule for an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASelectiveCallForwardingRuleForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASelectiveCallForwardingRuleForAnAutoAttendant(locationId, autoAttendantId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a specific DECT Network Base Station
     *
     * Delete a specific base station in the DECT Network.  A DECT network supports 2 types of base stations, DECT DBS-110 Single-Cell and DECT DBS-210 Multi-Cell. A DECT DBS-110 allows up to 30 lines of registration and supports 1 base station only. A DECT DBS-210 can have up to 254 base stations and supports up to 1000 lines of registration.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteASpecificDECTNetworkBaseStationTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String baseStationId = null;
        String orgId = null;
        String authorization = null;
        api.deleteASpecificDECTNetworkBaseStation(locationId, dectNetworkId, baseStationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Trunk
     *
     * Delete a Trunk for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group - a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Deleting a trunk requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteATrunkTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        api.deleteATrunk(trunkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Virtual Line
     *
     * Delete the designated Virtual Line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Deleting a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Voicemail Group for a Location
     *
     * Delete the designated voicemail group.  Deleting a voicemail group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAVoicemailGroupForALocationTest() throws ApiException {
        String locationId = null;
        String voicemailGroupId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAVoicemailGroupForALocation(locationId, voicemailGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Wholesale Billing Report
     *
     * Delete a monthly reconciliation report by report ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAWholesaleBillingReportTest() throws ApiException {
        String id = null;
        String authorization = null;
        api.deleteAWholesaleBillingReport(id, authorization);
        // TODO: test validations
    }

    /**
     * Delete a Workspace
     *
     * Deletes a workspace by ID.  Also deletes all devices associated with the workspace. Any deleted devices will need to be reactivated. Specify the workspace ID in the &#x60;workspaceId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        api.deleteAWorkspace(workspaceId, authorization);
        // TODO: test validations
    }

    /**
     * Delete an announcement greeting in a location
     *
     * Delete an announcement greeting in a location.  This API requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnAnnouncementGreetingInALocationTest() throws ApiException {
        String locationId = null;
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAnAnnouncementGreetingInALocation(locationId, announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete an announcement greeting of the organization
     *
     * Delete an announcement greeting for an organization.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnAnnouncementGreetingOfTheOrganizationTest() throws ApiException {
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAnAnnouncementGreetingOfTheOrganization(announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete an Auto Attendant
     *
     * Delete the designated Auto Attendant.  Auto attendants play customized prompts and provide callers with menu options for routing their calls through your system.  Deleting an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAnAutoAttendant(locationId, autoAttendantId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete an Event for a person&#39;s Schedule
     *
     * People can use shared location schedules or define personal schedules containing events.  &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnEventForAPersonsScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        api.deleteAnEventForAPersonsSchedule(personId, scheduleType, scheduleId, eventId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete bulk DECT Network Base Stations
     *
     * Delete all the base stations in the DECT Network.  A DECT network supports 2 types of base stations, DECT DBS-110 Single-Cell and DECT DBS-210 Multi-Cell. A DECT DBS-110 allows up to 30 lines of registration and supports 1 base station only. A DECT DBS-210 can have up to 254 base stations and supports up to 1000 lines of registration.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBulkDECTNetworkBaseStationsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        api.deleteBulkDECTNetworkBaseStations(locationId, dectNetworkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete DECT Network
     *
     * Delete a DECT network.  DECT Networks provide roaming voice services via base stations and wireless handsets. A DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDECTNetworkTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        api.deleteDECTNetwork(locationId, dectNetworkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Message
     *
     * Delete a specfic voicemail message for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        String messageId = null;
        String authorization = null;
        api.deleteMessage(messageId, authorization);
        // TODO: test validations
    }

    /**
     * Delete multiple handsets
     *
     * Delete multiple handsets or all of them.  A handset can have up to two lines, and a DECT network supports a total of 120 lines across all handsets. A member on line1 of a DECT handset can be of type PEOPLE or PLACE while a member on line2 of a DECT handset can be of type PEOPLE, PLACE, or VIRTUAL_LINE.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting a DECT handset from a person with a Webex Calling Standard license will enable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultipleHandsetsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        DeleteMultipleHandsetsRequest deleteMultipleHandsetsRequest = null;
        api.deleteMultipleHandsets(locationId, dectNetworkId, orgId, authorization, deleteMultipleHandsetsRequest);
        // TODO: test validations
    }

    /**
     * Delete Outgoing Permission Access Code Location
     *
     * Deletes the access code details for a particular location for a customer.  Use Access Codes to bypass the set permissions for all persons/workspaces at this location.  Modifying the access code location details requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOutgoingPermissionAccessCodeLocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutAccessCodeLocationObject putAccessCodeLocationObject = null;
        api.deleteOutgoingPermissionAccessCodeLocation(locationId, orgId, authorization, putAccessCodeLocationObject);
        // TODO: test validations
    }

    /**
     * Delete Priority Alert Criteria for a Workspace
     *
     * Delete Priority Alert criteria Settings for a workspace.  The priority alert feature enables administrators to configure priority alert settings for a professional workspace. Priority Alert Criteria (Schedules) can also be set up to alert these phones during certain times of the day or days of the week.  This API requires a full, user, or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePriorityAlertCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deletePriorityAlertCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Selective Accept Criteria for a Workspace
     *
     * Delete Selective Accept criteria Settings for a workspace.  With the Selective Accept feature, you can accept calls at specific times from specific callers. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelectiveAcceptCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deleteSelectiveAcceptCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Selective Forward Criteria for a Workspace
     *
     * Delete Selective Forward Call criteria Settings for a workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelectiveForwardCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deleteSelectiveForwardCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Selective Reject Criteria for a Workspace
     *
     * Delete Selective Reject criteria Settings for a workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelectiveRejectCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deleteSelectiveRejectCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Sequential Ring Criteria for a Workspace
     *
     * Delete sequential ring criteria for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another. The sequential ring criteria specify settings such as schedule and incoming numbers for which to sequentially ring or not.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSequentialRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deleteSequentialRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Simultaneous Ring Criteria for a Workspace
     *
     * Delete simultaneous ring criteria Settings for a workspace.  The Simultaneous Ring feature allows you to configure your office phone and other phones of your choice to ring simultaneously. Simultaneous Ring Criteria (Schedules) can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSimultaneousRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        api.deleteSimultaneousRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Delete specific DECT Network Handset Details
     *
     * Delete a specific DECT Network handset.  A handset can have up to two lines, and a DECT network supports a total of 120 lines across all handsets. A member on line1 of a DECT handset can be of type PEOPLE or PLACE while a member on line2 of a DECT handset can be of type PEOPLE, PLACE, or VIRTUAL_LINE.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Deleting a DECT handset from a person with a Webex Calling Standard license will enable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpecificDECTNetworkHandsetDetailsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String handsetId = null;
        String orgId = null;
        String authorization = null;
        api.deleteSpecificDECTNetworkHandsetDetails(locationId, dectNetworkId, handsetId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Dial
     *
     * Initiate an outbound call to a specified destination. This is also commonly referred to as Click to Call or Click to Dial. Alerts occur on all the devices belonging to a user unless an optional endpointId is specified in which case only the device or application identified by the endpointId is alerted. When a user answers an alerting device, an outbound call is placed from that device to the destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dialTest() throws ApiException {
        String authorization = null;
        DialRequest dialRequest = null;
        Dial201Response response = api.dial(authorization, dialRequest);
        // TODO: test validations
    }

    /**
     * Divert
     *
     * Divert a call to a destination or a user&#39;s voicemail. This is also commonly referred to as a Blind Transfer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void divertTest() throws ApiException {
        String authorization = null;
        DivertRequest divertRequest = null;
        api.divert(authorization, divertRequest);
        // TODO: test validations
    }

    /**
     * Fetch details of a binary announcement greeting at location level
     *
     * Fetch details of a binary announcement greeting by its ID at a location level.  An admin can upload a file at a location level. This file will be uploaded to the announcement repository.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchDetailsOfABinaryAnnouncementGreetingAtLocationLevelTest() throws ApiException {
        String locationId = null;
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        FetchDetailsOfABinaryAnnouncementGreetingAtTheOrganizationLevel200Response response = api.fetchDetailsOfABinaryAnnouncementGreetingAtLocationLevel(locationId, announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Fetch details of a binary announcement greeting at the organization level
     *
     * Fetch details of a binary announcement greeting by its ID at an organization level.  An admin can upload a file at an organization level. This file will be uploaded to the announcement repository.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchDetailsOfABinaryAnnouncementGreetingAtTheOrganizationLevelTest() throws ApiException {
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        FetchDetailsOfABinaryAnnouncementGreetingAtTheOrganizationLevel200Response response = api.fetchDetailsOfABinaryAnnouncementGreetingAtTheOrganizationLevel(announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Fetch Event for a person&#39;s Schedule
     *
     * People can use shared location schedules or define personal schedules containing events.  &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchEventForAPersonsScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        FetchEventForAPersonSSchedule200Response response = api.fetchEventForAPersonsSchedule(personId, scheduleType, scheduleId, eventId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Fetch list of announcement greetings on location and organization level
     *
     * Fetch a list of binary announcement greetings at an organization as well as location level.  An admin can upload a file at an organization level. This file will be uploaded to the announcement repository.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchListOfAnnouncementGreetingsOnLocationAndOrganizationLevelTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String fileName = null;
        String fileType = null;
        String mediaFileType = null;
        String name = null;
        String authorization = null;
        FetchListOfAnnouncementGreetingsOnLocationAndOrganizationLevel200Response response = api.fetchListOfAnnouncementGreetingsOnLocationAndOrganizationLevel(orgId, locationId, max, start, order, fileName, fileType, mediaFileType, name, authorization);
        // TODO: test validations
    }

    /**
     * Fetch repository usage for announcements for an organization
     *
     * Retrieves repository usage for announcements for an organization.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchRepositoryUsageForAnnouncementsForAnOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        FetchRepositoryUsageForAnnouncementsForAnOrganization200Response response = api.fetchRepositoryUsageForAnnouncementsForAnOrganization(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Fetch repository usage for announcements in a location
     *
     * Retrieves repository usage for announcements in a location.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchRepositoryUsageForAnnouncementsInALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        FetchRepositoryUsageForAnnouncementsForAnOrganization200Response response = api.fetchRepositoryUsageForAnnouncementsInALocation(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * GET List of DECT networks associated with a Person
     *
     * Retrieves the list of DECT networks for a person in an organization.  DECT Network provides roaming voice services via base stations and wireless handsets. DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListOfDECTNetworksAssociatedWithAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        Object response = api.gETListOfDECTNetworksAssociatedWithAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * GET List of DECT networks associated with a workspace
     *
     * Retrieves the list of DECT networks for a workspace in an organization.  DECT Network provides roaming voice services via base stations and wireless handsets. DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListOfDECTNetworksAssociatedWithAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        Object response = api.gETListOfDECTNetworksAssociatedWithAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Generate example password for Location
     *
     * Generates an example password using the effective password settings for the location. If you don&#39;t specify anything in the &#x60;generate&#x60; field or don&#39;t provide a request body, then you will receive a SIP password by default.  Used while creating a trunk and shouldn&#39;t be used anywhere else.  Generating an example password requires a full or write-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateExamplePasswordForLocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GenerateExamplePasswordForLocationRequest generateExamplePasswordForLocationRequest = null;
        GenerateExamplePasswordForLocation200Response response = api.generateExamplePasswordForLocation(locationId, orgId, authorization, generateExamplePasswordForLocationRequest);
        // TODO: test validations
    }

    /**
     * Get a BroadWorks Billing Report
     *
     * Retrieve a specific billing reconciliation report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getABroadWorksBillingReportTest() throws ApiException {
        String id = null;
        String authorization = null;
        GetABroadWorksBillingReport200Response response = api.getABroadWorksBillingReport(id, authorization);
        // TODO: test validations
    }

    /**
     * Get a BroadWorks Subscriber
     *
     * This API lets a Service Provider retrieve details of a provisioned BroadWorks subscriber on Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getABroadWorksSubscriberTest() throws ApiException {
        String subscriberId = null;
        String authorization = null;
        ProvisionABroadWorksSubscriber200Response response = api.getABroadWorksSubscriber(subscriberId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Dial Plan
     *
     * Get a Dial Plan for the organization.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Retrieving a dial plan requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getADialPlanTest() throws ApiException {
        String dialPlanId = null;
        String orgId = null;
        String authorization = null;
        GetADialPlan200Response response = api.getADialPlan(dialPlanId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a list of DECT Network Base Stations
     *
     * Retrieve a list of base stations in a DECT Network.  A DECT network supports 2 types of base stations, DECT DBS-110 Single-Cell and DECT DBS-210 Multi-Cell. A DECT DBS-110 allows up to 30 lines of registration and supports 1 base station only. A DECT DBS-210 can have up to 254 base stations and supports up to 1000 lines of registration.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAListOfDECTNetworkBaseStationsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        GetAListOfDECTNetworkBaseStations200Response response = api.getAListOfDECTNetworkBaseStations(locationId, dectNetworkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a List of Phone Numbers for a Person
     *
     * Get a person&#39;s phone numbers including alternate numbers.  A person can have one or more phone numbers and/or extensions via which they can be called.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_read&#x60; scope.  &lt;br/&gt;  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;The &#x60;preferE164Format&#x60; query parameter can be used to get phone numbers either in E.164 format or in their legacy format. The support for getting phone numbers in non-E.164 format in some geographies will be removed in the future.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAListOfPhoneNumbersForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        Boolean preferE164Format = null;
        String authorization = null;
        GetAListOfPhoneNumbersForAPerson200Response response = api.getAListOfPhoneNumbersForAPerson(personId, orgId, preferE164Format, authorization);
        // TODO: test validations
    }

    /**
     * Get a Location Emergency Call Notification
     *
     * Get location emergency call notification.  Emergency Call Notifications can be enabled at the organization level, allowing specified email addresses to receive email notifications when an emergency call is made. Once activated at the organization level, individual locations can configure this setting to direct notifications to specific email addresses. To comply with U.S. Public Law 115-127, also known as Kari’s Law, any call that&#39;s made from within your organization to emergency services must generate an email notification.  To retrieve location call notifications requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getALocationEmergencyCallNotificationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetALocationEmergencyCallNotification200Response response = api.getALocationEmergencyCallNotification(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Location&#39;s RedSky Compliance Status
     *
     * Get RedSky compliance status for a specific location.  The enhanced emergency (E911) service for Webex Calling provides an emergency service designed for organizations with a hybrid or nomadic workforce. It provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada.  Retrieving the location&#39;s compliance status requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getALocationsRedSkyComplianceStatusTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetALocationSRedSkyComplianceStatus200Response response = api.getALocationsRedSkyComplianceStatus(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Location&#39;s RedSky Emergency Calling Parameters
     *
     * Get the Emergency Calling Parameters for a specific location.  The enhanced emergency (E911) service for Webex Calling provides an emergency service designed for organizations with a hybrid or nomadic workforce. It provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada.  To retrieve location calling parameters requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getALocationsRedSkyEmergencyCallingParametersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetALocationSRedSkyEmergencyCallingParameters200Response response = api.getALocationsRedSkyEmergencyCallingParameters(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Person&#39;s Emergency Callback Number
     *
     * Retrieve a person&#39;s emergency callback number settings.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Callback Numbers (ECBN) and Emergency Service Addresses to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  To retrieve a person&#39;s callback number requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAPersonsEmergencyCallbackNumberTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        GetAPersonSEmergencyCallbackNumber200Response response = api.getAPersonsEmergencyCallbackNumber(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a person&#39;s Privacy Settings
     *
     * Get a person&#39;s privacy settings for the specified person ID.  The privacy feature enables the person&#39;s line to be monitored by others and determine if they can be reached by Auto Attendant services.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of spark-admin:people_read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAPersonsPrivacySettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        GetAPersonSPrivacySettings200Response response = api.getAPersonsPrivacySettings(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Route List
     *
     * Get a rout list details.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving a Route List requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getARouteListTest() throws ApiException {
        String routeListId = null;
        String orgId = null;
        String authorization = null;
        GetARouteList200Response response = api.getARouteList(routeListId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Schedule Details
     *
     * Retrieve a schedule by its schedule ID.  Schedules are used to support calling features and can be defined at the location or person level. &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAScheduleDetailsTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        GetAScheduleDetails200Response response = api.getAScheduleDetails(personId, scheduleType, scheduleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Trunk
     *
     * Get a Trunk for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group - a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving a trunk requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getATrunkTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        GetATrunk200Response response = api.getATrunk(trunkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Virtual Line&#39;s Privacy Settings
     *
     * Get a virtual line&#39;s privacy settings for the specified virtual line ID.  The privacy feature enables the virtual line&#39;s line to be monitored by others and determine if they can be reached by Auto Attendant services.  Retrieving the privacy settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAVirtualLinesPrivacySettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetAVirtualLineSPrivacySettings200Response response = api.getAVirtualLinesPrivacySettings(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Wholesale Billing Report
     *
     * Retrieve a specific wholesale billing reconciliation report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAWholesaleBillingReportTest() throws ApiException {
        String id = null;
        String authorization = null;
        GetAWholesaleBillingReport200Response response = api.getAWholesaleBillingReport(id, authorization);
        // TODO: test validations
    }

    /**
     * Get a Wholesale Customer
     *
     * This API will allow a Service Provider to retrieve details of a provisioned Wholesale customer on Cisco Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAWholesaleCustomerTest() throws ApiException {
        String customerId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        GetAWholesaleCustomer200Response response = api.getAWholesaleCustomer(customerId, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Wholesale Subscriber
     *
     * This API allow a Service Provider to retrieve details of a provisioned Wholesale subscriber on Cisco Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAWholesaleSubscriberTest() throws ApiException {
        String subscriberId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        ProvisionAWholesaleSubscriber200Response response = api.getAWholesaleSubscriber(subscriberId, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * Get a Workspace Emergency Callback Number
     *
     * Retrieve the emergency callback number setting associated with a specific workspace.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Callback Numbers (ECBN) and Emergency Service Addresses to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  To retrieve an emergency callback number, it requires a full, location, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAWorkspaceEmergencyCallbackNumberTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        GetAWorkspaceEmergencyCallbackNumber200Response response = api.getAWorkspaceEmergencyCallbackNumber(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get an Organization Emergency Call Notification
     *
     * Get organization emergency call notification.  Emergency Call Notifications can be enabled at the organization level, allowing specified email addresses to receive email notifications when an emergency call is made. To comply with U.S. Public Law 115-127, also known as Kari’s Law, any call that&#39;s made from within your organization to emergency services must generate an email notification.  To retrieve organization call notifications requires a full, user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnOrganizationEmergencyCallNotificationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetAnOrganizationEmergencyCallNotification200Response response = api.getAnOrganizationEmergencyCallNotification(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get an Organization&#39;s MS Teams Settings
     *
     * &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Not supported for Webex for Government (FedRAMP)&lt;/Callout&gt;&lt;/div&gt;  Get organization MS Teams settings.  At an organization level, MS Teams settings allow access to viewing the &#x60;HIDE WEBEX APP&#x60; and &#x60;PRESENCE SYNC&#x60; settings.  To retrieve an organization&#39;s MS Teams settings requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnOrganizationsMSTeamsSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetAnOrganizationSMSTeamsSettings200Response response = api.getAnOrganizationsMSTeamsSettings(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Auto Attendant Alternate Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the auto attendant&#39;s alternate number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoAttendantAlternateAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getAutoAttendantAlternateAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Auto Attendant Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the auto attendant&#39;s call forward number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoAttendantCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getAutoAttendantCallForwardAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Auto Attendant Primary Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the auto attendant&#39;s primary phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoAttendantPrimaryAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getAutoAttendantPrimaryAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get available agents from Call Parks
     *
     * Retrieve available agents from call parks for a given location.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Retrieving available agents from call parks requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableAgentsFromCallParksTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String callParkName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String order = null;
        String authorization = null;
        GetAvailableAgentsFromCallParks200Response response = api.getAvailableAgentsFromCallParks(locationId, orgId, callParkName, max, start, name, phoneNumber, order, authorization);
        // TODO: test validations
    }

    /**
     * Get available agents from Call Pickups
     *
     * Retrieve available agents from call pickups for a given location.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Retrieving available agents from call pickups requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableAgentsFromCallPickupsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String callPickupName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String order = null;
        String authorization = null;
        GetAvailableAgentsFromCallPickups200Response response = api.getAvailableAgentsFromCallPickups(locationId, orgId, callPickupName, max, start, name, phoneNumber, order, authorization);
        // TODO: test validations
    }

    /**
     * Get available recall hunt groups from Call Parks
     *
     * Retrieve available recall hunt groups from call parks for a given location.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Retrieving available recall hunt groups from call parks requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableRecallHuntGroupsFromCallParksTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String order = null;
        String authorization = null;
        GetAvailableRecallHuntGroupsFromCallParks200Response response = api.getAvailableRecallHuntGroupsFromCallParks(locationId, orgId, max, start, name, order, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Details
     *
     * Get the details of the specified active call for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallDetailsTest() throws ApiException {
        String callId = null;
        String authorization = null;
        GetCallDetails200Response response = api.getCallDetails(callId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Forwarding Settings for a Call Queue
     *
     * Retrieve Call Forwarding settings for the designated Call Queue including the list of call forwarding rules.  Retrieving call forwarding settings for a call queue requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallForwardingSettingsForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetCallForwardingSettingsForAHuntGroup200Response response = api.getCallForwardingSettingsForACallQueue(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Forwarding Settings for a Hunt Group
     *
     * Retrieve Call Forwarding settings for the designated Hunt Group including the list of call forwarding rules.  Retrieving call forwarding settings for a hunt group requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallForwardingSettingsForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        GetCallForwardingSettingsForAHuntGroup200Response response = api.getCallForwardingSettingsForAHuntGroup(locationId, huntGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Forwarding Settings for an Auto Attendant
     *
     * Retrieve Call Forwarding settings for the designated Auto Attendant including the list of call forwarding rules.  Retrieving call forwarding settings for an auto attendant requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallForwardingSettingsForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        GetCallForwardingSettingsForAnAutoAttendant200Response response = api.getCallForwardingSettingsForAnAutoAttendant(locationId, autoAttendantId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Park Settings
     *
     * Retrieve Call Park Settings from call parks for a given location.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Retrieving settings from call parks requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallParkSettingsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetCallParkSettings200Response response = api.getCallParkSettings(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Queue Alternate Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the call queue&#39;s alternate phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallQueueAlternateAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getCallQueueAlternateAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Queue Available Agents
     *
     * List all available users, workspaces, or virtual lines that can be assigned as call queue agents.  Available agents are users (excluding users with Webex Calling Standard license), workspaces, or virtual lines that can be assigned to a call queue.  Calls from the call queue are routed to assigned agents based on configuration.  An agent can be assigned to one or more call queues and can be managed by supervisors.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallQueueAvailableAgentsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String order = null;
        String authorization = null;
        GetCallQueueAvailableAgents200Response response = api.getCallQueueAvailableAgents(locationId, orgId, max, start, name, phoneNumber, order, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Queue Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the call queue&#39;s call forward number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallQueueCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getCallQueueCallForwardAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Queue Primary Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the call queue&#39;s primary phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallQueuePrimaryAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getCallQueuePrimaryAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Recording Settings
     *
     * Retrieve Call Recording settings for the organization.  Call Recording feature enables authorized agents to record any active call that Webex Contact Center manages.  Retrieving call recording settings requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetCallRecordingSettings200Response response = api.getCallRecordingSettings(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Call Recording Terms Of Service Settings
     *
     * Retrieve Call Recording Terms Of Service settings for the organization.  Call Recording feature enables authorized agents to record any active call that Webex Contact Center manages.  Retrieving call recording terms of service settings requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallRecordingTermsOfServiceSettingsTest() throws ApiException {
        String vendorId = null;
        String orgId = null;
        String authorization = null;
        GetCallRecordingTermsOfServiceSettings200Response response = api.getCallRecordingTermsOfServiceSettings(vendorId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get DECT Network Details
     *
     * Retrieves the details of a DECT network.  DECT Networks provide roaming voice services via base stations and wireless handsets. A DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDECTNetworkDetailsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        GetTheListOfDECTNetworksForAnOrganization200ResponseDectNetworksInner response = api.getDECTNetworkDetails(locationId, dectNetworkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Dependencies for a Virtual Line Emergency Callback Number
     *
     * Retrieves the emergency callback number dependencies for a specific virtual line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines for Webex Calling users.  Retrieving the dependencies requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDependenciesForAVirtualLineEmergencyCallbackNumberTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetDependenciesForAVirtualLineEmergencyCallbackNumber200Response response = api.getDependenciesForAVirtualLineEmergencyCallbackNumber(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Detailed Call History
     *
     * Provides Webex Calling Detailed Call History data for your organization.  Results can be filtered with the &#x60;startTime&#x60;, &#x60;endTime&#x60; and &#x60;locations&#x60; request parameters. The &#x60;startTime&#x60; and &#x60;endTime&#x60; parameters specify the start and end of the time period for the Detailed Call History reports you wish to collect. The API will return all reports that were created between &#x60;startTime&#x60; and &#x60;endTime&#x60;.  &lt;br/&gt;&lt;br/&gt; Response entries may be added as more information is made available for the reports. Values in response items may be extended as more capabilities are added to Webex Calling.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailedCallHistoryTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        String locations = null;
        BigDecimal max = null;
        String authorization = null;
        ListManageNumbersJobErrors200Response response = api.getDetailedCallHistory(startTime, endTime, locations, max, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Park
     *
     * Retrieve Call Park details.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Retrieving call park details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Park ID will change upon modification of the Call Park name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallParkTest() throws ApiException {
        String locationId = null;
        String callParkId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallPark200Response response = api.getDetailsForACallPark(locationId, callParkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Park Extension
     *
     * Retrieve Call Park Extension details.  The Call Park service, enabled for all users by default, allows a user to park a call against an available user&#39;s extension or to a Call Park Extension. Call Park Extensions are extensions defined within the Call Park service for holding parked calls.  Retrieving call park extension details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallParkExtensionTest() throws ApiException {
        String locationId = null;
        String callParkExtensionId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallParkExtension200Response response = api.getDetailsForACallParkExtension(locationId, callParkExtensionId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Pickup
     *
     * Retrieve the designated Call Pickup details.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Retrieving call pickup details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Pickup ID will change upon modification of the Call Pickup name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallPickupTest() throws ApiException {
        String locationId = null;
        String callPickupId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallPickup200Response response = api.getDetailsForACallPickup(locationId, callPickupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Queue
     *
     * Retrieve Call Queue details.  Call queues temporarily hold calls in the cloud when all agents, which can be users or agents, assigned to receive calls from the queue are unavailable. Queued calls are routed to an available agent when not on an active call. Each call queue is assigned a Lead Number, which is a telephone number outside callers can dial to reach users assigned to the call queue. Call queues are also assigned an internal extension, which can be dialed internally to reach users assigned to the call queue.  Retrieving call queue details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallQueue200Response response = api.getDetailsForACallQueue(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Queue Forced Forward
     *
     * Retrieve Call Queue policy Forced Forward details.  This policy allows calls to be temporarily diverted to a configured destination.  Retrieving call queue Forced Forward details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallQueueForcedForwardTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallQueueForcedForward200Response response = api.getDetailsForACallQueueForcedForward(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Queue Holiday Service
     *
     * Retrieve Call Queue Holiday Service details.  Configure the call queue to route calls differently during the holidays.  Retrieving call queue holiday service details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallQueueHolidayServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallQueueHolidayService200Response response = api.getDetailsForACallQueueHolidayService(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Queue Night Service
     *
     * Retrieve Call Queue Night service details.  Configure the call queue to route calls differently during the hours when the queue is not in service. This is determined by a schedule that defines the business hours of the queue.  Retrieving call queue details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallQueueNightServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallQueueNightService200Response response = api.getDetailsForACallQueueNightService(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Call Queue Stranded Calls
     *
     * Allow admin to view default/configured Stranded Calls settings.  Stranded-All agents logoff Policy: If the last agent staffing a queue “unjoins” the queue or signs out, then all calls in the queue become stranded. Stranded-Unavailable Policy: This policy allows for the configuration of the processing of calls that are in a staffed queue when all agents are unavailable.  Retrieving call queue Stranded Calls details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForACallQueueStrandedCallsTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForACallQueueStrandedCalls200Response response = api.getDetailsForACallQueueStrandedCalls(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Hunt Group
     *
     * Retrieve Hunt Group details.  Hunt groups can route incoming calls to a group of people, workspaces or virtual lines. You can even configure a pattern to route to a whole group.  Retrieving hunt group details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForAHuntGroup200Response response = api.getDetailsForAHuntGroup(locationId, huntGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Paging Group
     *
     * Retrieve Paging Group details.  Group Paging allows a person, place or virtual line a one-way call or group page to up to 75 people and/or workspaces and/or virtual line by dialing a number or extension assigned to a specific paging group. The Group Paging service makes a simultaneous call to all the assigned targets.  Retrieving paging group details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAPagingGroupTest() throws ApiException {
        String locationId = null;
        String pagingId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForAPagingGroup200Response response = api.getDetailsForAPagingGroup(locationId, pagingId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Schedule
     *
     * Retrieve Schedule details.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Retrieving schedule details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAScheduleTest() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForASchedule200Response response = api.getDetailsForASchedule(locationId, type, scheduleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Schedule Event
     *
     * Retrieve Schedule Event details.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Retrieving a schedule event&#39;s details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAScheduleEventTest() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForAScheduleEvent200Response response = api.getDetailsForAScheduleEvent(locationId, type, scheduleId, eventId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for a Virtual Line
     *
     * Retrieve Virtual Line details.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Retrieving virtual line details requires a full or user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForAVirtualLine200Response response = api.getDetailsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for an Auto Attendant
     *
     * Retrieve an Auto Attendant details.  Auto attendants play customized prompts and provide callers with menu options for routing their calls through your system.  Retrieving an auto attendant details requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForAnAutoAttendant200Response response = api.getDetailsForAnAutoAttendant(locationId, autoAttendantId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for the location compliance announcement setting
     *
     * Retrieve the location compliance announcement settings.  The Compliance Announcement feature interacts with the Call Recording feature, specifically with the playback of the start/stop announcement. When the compliance announcement is played to the PSTN party, and the PSTN party is connected to a party with call recording enabled, then the start/stop announcement is inhibited.  Retrieving location compliance announcement setting requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForTheLocationComplianceAnnouncementSettingTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetDetailsForTheLocationComplianceAnnouncementSetting200Response response = api.getDetailsForTheLocationComplianceAnnouncementSetting(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Details for the organization compliance announcement setting
     *
     * Retrieve the organization compliance announcement settings.  The Compliance Announcement feature interacts with the Call Recording feature, specifically with the playback of the start/stop announcement. When the compliance announcement is played to the PSTN party, and the PSTN party is connected to a party with call recording enabled, then the start/stop announcement is inhibited.  Retrieving organization compliance announcement setting requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForTheOrganizationComplianceAnnouncementSettingTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetDetailsForTheOrganizationComplianceAnnouncementSetting200Response response = api.getDetailsForTheOrganizationComplianceAnnouncementSetting(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Device Details
     *
     * Shows details for a device, by ID. This requires an auth token with the &#x60;spark:devices_read&#x60; scope to see your own device, or &#x60;spark-admin:devices_read&#x60; to see any other device in your organization.  Specify the device ID in the &#x60;deviceId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        String orgId = null;
        String authorization = null;
        CreateADeviceByMACAddress200Response response = api.getDeviceDetails(deviceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Directory Sync Status for an Enterprise
     *
     * This API lets a Partner Admin get the most recent directory sync status for a customer&#39;s Broadworks enterprise on Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectorySyncStatusForAnEnterpriseTest() throws ApiException {
        String id = null;
        String authorization = null;
        GetDirectorySyncStatusForAnEnterprise200Response response = api.getDirectorySyncStatusForAnEnterprise(id, authorization);
        // TODO: test validations
    }

    /**
     * Get Hunt Group Alternate Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the hunt group&#39;s alternate phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHuntGroupAlternateAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getHuntGroupAlternateAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Hunt Group Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the hunt group&#39;s call forward number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHuntGroupCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getHuntGroupCallForwardAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Hunt Group Primary Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the hunt group&#39;s primary phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHuntGroupPrimaryAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getHuntGroupPrimaryAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get List of DECT Networks Handsets for a Virtual Line
     *
     * &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Not supported for Webex for Government (FedRAMP)&lt;/Callout&gt;&lt;/div&gt;  Retrieve DECT Network details assigned for a virtual line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Retrieving the assigned device detials for a virtual line requires a full or user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfDECTNetworksHandsetsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetListOfDECTNetworksHandsetsForAVirtualLine200Response response = api.getListOfDECTNetworksHandsetsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get List of Devices assigned for a Virtual Line
     *
     * Retrieve Device details assigned for a virtual line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Retrieving the assigned device detials for a virtual line requires a full or user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfDevicesAssignedForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetListOfDevicesAssignedForAVirtualLine200Response response = api.getListOfDevicesAssignedForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get List of Handsets for a DECT Network ID
     *
     * List all the handsets associated with a DECT Network ID.  A handset can have up to two lines, and a DECT network supports a total of 120 lines across all handsets. A member on line1 of a DECT handset can be of type PEOPLE or PLACE while a member on line2 of a DECT handset can be of type PEOPLE, PLACE, or VIRTUAL_LINE.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfHandsetsForADECTNetworkIDTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String basestationId = null;
        String memberId = null;
        String authorization = null;
        GetListOfHandsetsForADECTNetworkID200Response response = api.getListOfHandsetsForADECTNetworkID(locationId, dectNetworkId, orgId, basestationId, memberId, authorization);
        // TODO: test validations
    }

    /**
     * Get Local Gateway Call to On-Premises Extension Usage for a Trunk
     *
     * Get local gateway call to on-premises extension usage for a trunk.  A trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this information requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalGatewayCallToOnPremisesExtensionUsageForATrunkTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String order = null;
        String name = null;
        String authorization = null;
        GetLocalGatewayCallToOnPremisesExtensionUsageForATrunk200Response response = api.getLocalGatewayCallToOnPremisesExtensionUsageForATrunk(trunkId, orgId, start, max, order, name, authorization);
        // TODO: test validations
    }

    /**
     * Get Local Gateway Dial Plan Usage for a Trunk
     *
     * Get Local Gateway Dial Plan Usage for a Trunk.  A trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this information requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalGatewayDialPlanUsageForATrunkTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String order = null;
        String name = null;
        String authorization = null;
        GetLocalGatewayDialPlanUsageForATrunk200Response response = api.getLocalGatewayDialPlanUsageForATrunk(trunkId, orgId, start, max, order, name, authorization);
        // TODO: test validations
    }

    /**
     * Get Local Gateway Usage Count
     *
     * Get Local Gateway Usage Count  A trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this information requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalGatewayUsageCountTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        GetLocalGatewayUsageCount200Response response = api.getLocalGatewayUsageCount(trunkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Details
     *
     * Shows details for a location, by ID.  * Specify the location ID in the &#x60;locationId&#x60; parameter in the URI.  * Use query parameter &#x60;orgId&#x60; to filter the result set by organization(optional).  * Searching and viewing location in your organization requires an administrator or location administrator auth token with any of the following scopes:      * &#x60;spark-admin:locations_read&#x60;     * &#x60;spark-admin:people_read&#x60;     * &#x60;spark-admin:device_read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationDetailsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetLocationDetails200Response response = api.getLocationDetails(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Floor Details
     *
     * Shows details for a floor, by ID. Specify the floor ID in the &#x60;floorId&#x60; parameter in the URI. Requires an administrator auth token with the &#x60;spark-admin:locations_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationFloorDetailsTest() throws ApiException {
        String locationId = null;
        String floorId = null;
        String authorization = null;
        CreateALocationFloor201Response response = api.getLocationFloorDetails(locationId, floorId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Intercept
     *
     * Retrieve intercept location details for a customer location.  Intercept incoming or outgoing calls for persons in your organization. If this is enabled, calls are either routed to a designated number the person chooses, or to the person&#39;s voicemail.  Retrieving intercept location details requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationInterceptTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetLocationIntercept200Response response = api.getLocationIntercept(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Outgoing Permission
     *
     * Retrieve the location&#39;s outgoing call settings.  A location&#39;s outgoing call settings allow you to determine the types of calls the people/workspaces at the location are allowed to make, as well as configure the default calling permission for each call type at the location.  Retrieving a location&#39;s outgoing call settings requires a full, user or read-only administrator or location administrator auth token with a scope of spark-admin:telephony_config_read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationOutgoingPermissionTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetLocationOutgoingPermission200Response response = api.getLocationOutgoingPermission(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Voicemail
     *
     * Retrieve voicemail settings for a specific location.  Location voicemail settings allows you to enable voicemail transcription for a specific location.  Retrieving a location&#39;s voicemail settings requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationVoicemailTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetLocationVoicemail200Response response = api.getLocationVoicemail(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Location Voicemail Group
     *
     * Retrieve voicemail group details for a location.  Manage your voicemail group settings for a specific location, like when you want your voicemail to be active, message storage settings, and how you would like to be notified of new voicemail messages.  Retrieving voicemail group details requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationVoicemailGroupTest() throws ApiException {
        String locationId = null;
        String voicemailGroupId = null;
        String orgId = null;
        String authorization = null;
        GetLocationVoicemailGroup200Response response = api.getLocationVoicemailGroup(locationId, voicemailGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Locations Using the Local Gateway as PSTN Connection Routing
     *
     * Get Locations Using the Local Gateway as PSTN Connection Routing.  A trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this information requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationsUsingTheLocalGatewayAsPSTNConnectionRoutingTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        GetLocationsUsingTheLocalGatewayAsPSTNConnectionRouting200Response response = api.getLocationsUsingTheLocalGatewayAsPSTNConnectionRouting(trunkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Manage Numbers Job Status
     *
     * Returns the status and other details of the job.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManageNumbersJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        GetManageNumbersJobStatus200Response response = api.getManageNumbersJobStatus(jobId, authorization);
        // TODO: test validations
    }

    /**
     * Get Meeting Archive Details
     *
     * Retrieves details for a meeting archive report with a specified archive ID, which contains recording metadata.  Meeting archive details are only available to full administrators, not even the meeting host.  #### Request Header  * &#x60;timezone&#x60;: [Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingArchiveDetailsTest() throws ApiException {
        String archiveId = null;
        String authorization = null;
        String timezone = null;
        GetMeetingArchiveDetails200Response response = api.getMeetingArchiveDetails(archiveId, authorization, timezone);
        // TODO: test validations
    }

    /**
     * Get Message Summary
     *
     * Get a summary of the voicemail messages for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageSummaryTest() throws ApiException {
        String authorization = null;
        GetMessageSummary200Response response = api.getMessageSummary(authorization);
        // TODO: test validations
    }

    /**
     * Get Move Users Job Status
     *
     * Returns the status and other details of the job.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMoveUsersJobStatusTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String authorization = null;
        GetMoveUsersJobStatus200Response response = api.getMoveUsersJobStatus(jobId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get My Own Details
     *
     * Get profile details for the authenticated user. This is the same as GET &#x60;/people/{personId}&#x60; using the Person ID associated with your Auth token.  Admin users can include &#x60;Webex Calling&#x60; (BroadCloud) user details in the response by specifying &#x60;callingData&#x60; parameter as true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMyOwnDetailsTest() throws ApiException {
        Boolean callingData = null;
        String authorization = null;
        CreateAPerson200Response response = api.getMyOwnDetails(callingData, authorization);
        // TODO: test validations
    }

    /**
     * Get Numbers assigned to a Route List
     *
     * Get numbers assigned to a Route List  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving a Route List requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNumbersAssignedToARouteListTest() throws ApiException {
        String routeListId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String number = null;
        String order = null;
        String authorization = null;
        GetNumbersAssignedToARouteList200Response response = api.getNumbersAssignedToARouteList(routeListId, orgId, start, max, number, order, authorization);
        // TODO: test validations
    }

    /**
     * Get Outgoing Permission Auto Transfer Number
     *
     * Get the transfer numbers for the outbound permission in a location.  Outbound permissions can specify which transfer number an outbound call should transfer to via the &#x60;action&#x60; field.  Retrieving an auto transfer number requires a full, user or read-only administrator or location administrator auth token with a scope of spark-admin:telephony_config_read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingPermissionAutoTransferNumberTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetOutgoingPermissionAutoTransferNumber200Response response = api.getOutgoingPermissionAutoTransferNumber(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Outgoing Permission Location Access Code
     *
     * Retrieve access codes details for a customer location.  Use Access Codes to bypass the set permissions for all persons/workspaces at this location.  Retrieving access codes details requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingPermissionLocationAccessCodeTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetOutgoingPermissionLocationAccessCode200Response response = api.getOutgoingPermissionLocationAccessCode(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Paging Group Primary Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the paging group&#39;s primary phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagingGroupPrimaryAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getPagingGroupPrimaryAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a person&#39;s call forward number. These numbers are associated with the location of the person specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getPersonCallForwardAvailablePhoneNumbers(personId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Call Intercept Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a person&#39;s call intercept number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonCallInterceptAvailablePhoneNumbersTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getPersonCallInterceptAvailablePhoneNumbers(personId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Details
     *
     * Shows details for a person, by ID.  Response properties associated with a user&#39;s presence status, such as &#x60;status&#x60; or &#x60;lastActivity&#x60;, will only be displayed for people within your organization or an organization you manage. Presence information will not be shown if the authenticated user has [disabled status sharing](https://help.webex.com/nkzs6wl/).  Admin users can include &#x60;Webex Calling&#x60; (BroadCloud) user details in the response by specifying &#x60;callingData&#x60; parameter as &#x60;true&#x60;.  Specify the person ID in the &#x60;personId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonDetailsTest() throws ApiException {
        String personId = null;
        Boolean callingData = null;
        String authorization = null;
        CreateAPerson200Response response = api.getPersonDetails(personId, callingData, authorization);
        // TODO: test validations
    }

    /**
     * Get Person ECBN Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a person&#39;s emergency callback number. These numbers are associated with the location of the person specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonECBNAvailablePhoneNumbersTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String authorization = null;
        GetPersonECBNAvailablePhoneNumbers200Response response = api.getPersonECBNAvailablePhoneNumbers(personId, orgId, max, start, phoneNumber, ownerName, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Fax Message Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a person&#39;s FAX message number. These numbers are associated with the location of the person specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonFaxMessageAvailablePhoneNumbersTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getPersonFaxMessageAvailablePhoneNumbers(personId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Primary Available Phone Numbers
     *
     * List numbers that are available to be assigned as a person&#39;s primary phone number. By default, this API returns standard and mobile numbers from all locations that are unassigned. The parameters &#x60;licenseType&#x60; and &#x60;locationId&#x60; must align with the person&#39;s settings to determine the appropriate number for assignment. Failure to provide these parameters may result in the unsuccessful assignment of the returned number.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonPrimaryAvailablePhoneNumbersTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String licenseType = null;
        String authorization = null;
        GetPersonPrimaryAvailablePhoneNumbers200Response response = api.getPersonPrimaryAvailablePhoneNumbers(orgId, locationId, max, start, phoneNumber, licenseType, authorization);
        // TODO: test validations
    }

    /**
     * Get Person Secondary Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a person&#39;s secondary phone number. These numbers are associated with the location of the person specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonSecondaryAvailablePhoneNumbersTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getPersonSecondaryAvailablePhoneNumbers(personId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Phone Number assigned for a Virtual Line
     *
     * Get details on the assigned phone number and extension for the virtual line.  Retrieving virtual line phone number details requires a full or user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhoneNumberAssignedForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetPhoneNumberAssignedForAVirtualLine200Response response = api.getPhoneNumberAssignedForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Phone Numbers for an Organization with Given Criterias
     *
     * List all the phone numbers for the given organization along with the status and owner (if any).  Numbers can be standard, service, or mobile. Both standard and service numbers are PSTN numbers. Service numbers are considered as high-utilization or high-concurrency phone numbers and can be assigned to features like auto-attendants, call queues, and hunt groups. Phone numbers can be linked to a specific location, be active or inactive, and be assigned or unassigned. The owner of a number is the person, workspace, or feature to which the number is assigned. Only a person can own a mobile number.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhoneNumbersForAnOrganizationWithGivenCriteriasTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        Boolean available = null;
        String order = null;
        String ownerName = null;
        String ownerId = null;
        String ownerType = null;
        String extension = null;
        String numberType = null;
        String phoneNumberType = null;
        String state = null;
        Boolean details = null;
        Boolean tollFreeNumbers = null;
        Boolean restrictedNonGeoNumbers = null;
        String includedTelephonyTypes = null;
        Boolean serviceNumber = null;
        String authorization = null;
        GetPhoneNumbersForAnOrganizationWithGivenCriterias200Response response = api.getPhoneNumbersForAnOrganizationWithGivenCriterias(orgId, locationId, max, start, phoneNumber, available, order, ownerName, ownerId, ownerType, extension, numberType, phoneNumberType, state, details, tollFreeNumbers, restrictedNonGeoNumbers, includedTelephonyTypes, serviceNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Preferred Answer Endpoint
     *
     * Get the person&#39;s preferred answer endpoint and the list of endpoints available for selection. The preferred answer endpoint is null if one has not been selected. The list of endpoints is empty if the person has no endpoints assigned which support the preferred answer endpoint functionality. These endpoints can be used by the following Call Control API&#39;s that allow the person to specify an endpointId to use for the call:&lt;br&gt;  + [/v1/telephony/calls/dial](/docs/api/v1/call-controls/dial)&lt;br&gt;  + [/v1/telephony/calls/retrieve](/docs/api/v1/call-controls/retrieve)&lt;br&gt;  + [/v1/telephony/calls/pickup](/docs/api/v1/call-controls/pickup)&lt;br&gt;  + [/v1/telephony/calls/barge-in](/docs/api/v1/call-controls/barge-in)&lt;br&gt;  + [/v1/telephony/calls/answer](/docs/api/v1/call-controls/answer)&lt;br&gt;  This API requires &#x60;spark:telephony_config_read&#x60; or &#x60;spark-admin:telephony_config_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPreferredAnswerEndpointTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        GetPreferredAnswerEndpoint200Response response = api.getPreferredAnswerEndpoint(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Recording Audit Report Details
     *
     * Retrieves details for a recording audit report with a specified recording ID.  Only recording audit report details of meetings hosted by or shared with the authenticated user may be retrieved.  #### Request Header  * &#x60;timezone&#x60;: [Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingAuditReportDetailsTest() throws ApiException {
        String recordingId = null;
        String hostEmail = null;
        BigDecimal max = null;
        String authorization = null;
        String timezone = null;
        GetRecordingAuditReportDetails200Response response = api.getRecordingAuditReportDetails(recordingId, hostEmail, max, authorization, timezone);
        // TODO: test validations
    }

    /**
     * Get Recording Details
     *
     * Retrieves details for a recording with a specified recording ID.  Only recordings of owner with the authenticated user may be retrieved.  Get Recording Details requires the spark-compliance:recordings_read scope.  #### Request Header  * &#x60;timezone&#x60;: *[Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingDetailsTest() throws ApiException {
        String recordingId = null;
        String authorization = null;
        String timezone = null;
        GetRecordingDetails200Response response = api.getRecordingDetails(recordingId, authorization, timezone);
        // TODO: test validations
    }

    /**
     * Get Recording metadata
     *
     * Retrieves metadata details for a recording with a specified recording ID. The recording must be owned by the authenticated user.  For information on the metadata fields, refer to [Metadata Guide](https://developer.webex.com/docs/api/guides/consolidated-metadata-documentation-and-samples-guide)  Get Recording metadata requires the spark-compliance:recordings_read scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingMetadataTest() throws ApiException {
        String recordingId = null;
        Boolean showAllTypes = null;
        String authorization = null;
        GetRecordingMetadata200Response response = api.getRecordingMetadata(recordingId, showAllTypes, authorization);
        // TODO: test validations
    }

    /**
     * Get Report Details
     *
     * Shows details for a report, by report ID.  Specify the report ID in the &#x60;reportId&#x60; parameter in the URI.  **Notes**: CSV reports for Teams services are only supported for organizations based in the North American region. Organizations based in a different region will return blank CSV files for any Teams reports.  Reports are usually provided in zip format. A Content-header &#x60;application/zip&#x60; or &#x60;application/octet-stream&#x60; does indicate the zip     format. There is usually no .zip file extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportDetailsTest() throws ApiException {
        String reportId = null;
        String authorization = null;
        GetReportDetails200Response response = api.getReportDetails(reportId, authorization);
        // TODO: test validations
    }

    /**
     * Get Route Groups Using the Local Gateway
     *
     * Get Route Groups Using the Local Gateway.  A trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this information requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteGroupsUsingTheLocalGatewayTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        GetRouteGroupsUsingTheLocalGateway200Response response = api.getRouteGroupsUsingTheLocalGateway(trunkId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Selective Call Forwarding Rule for a Call Queue
     *
     * Retrieve a Selective Call Forwarding Rule&#39;s settings for the designated Call Queue.  A selective call forwarding rule for a call queue allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the call queue&#39;s call forwarding settings.  Retrieving a selective call forwarding rule&#39;s settings for a call queue requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectiveCallForwardingRuleForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        GetSelectiveCallForwardingRuleForAHuntGroup200Response response = api.getSelectiveCallForwardingRuleForACallQueue(locationId, queueId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Selective Call Forwarding Rule for a Hunt Group
     *
     * Retrieve a Selective Call Forwarding Rule&#39;s settings for the designated Hunt Group.  A selective call forwarding rule for a hunt group allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the hunt group&#39;s call forwarding settings.  Retrieving a selective call forwarding rule&#39;s settings for a hunt group requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectiveCallForwardingRuleForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        GetSelectiveCallForwardingRuleForAHuntGroup200Response response = api.getSelectiveCallForwardingRuleForAHuntGroup(locationId, huntGroupId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Selective Call Forwarding Rule for an Auto Attendant
     *
     * Retrieve a Selective Call Forwarding Rule&#39;s settings for the designated Auto Attendant.  A selective call forwarding rule for an auto attendant allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the auto attendant&#39;s call forwarding settings.  Retrieving a selective call forwarding rule&#39;s settings for an auto attendant requires a full or read-only administrator or location administrator  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectiveCallForwardingRuleForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        GetSelectiveCallForwardingRuleForAnAutoAttendant200Response response = api.getSelectiveCallForwardingRuleForAnAutoAttendant(locationId, autoAttendantId, ruleId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Shared-Line Appearance Members
     *
     * Get primary and secondary members assigned to a shared line on a Webex Calling Apps Desktop device.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSharedLineAppearanceMembersTest() throws ApiException {
        String personId = null;
        String applicationId = null;
        String authorization = null;
        GetSharedLineAppearanceMembers200Response response = api.getSharedLineAppearanceMembers(personId, applicationId, authorization);
        // TODO: test validations
    }

    /**
     * Get Single Number Reach Primary Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the single number reach&#39;s primary phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleNumberReachPrimaryAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getSingleNumberReachPrimaryAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Specific DECT Network Handset Details
     *
     * List the specific DECT Network handset details.  A handset can have up to two lines, and a DECT network supports a total of 120 lines across all handsets. A member on line1 of a DECT handset can be of type PEOPLE or PLACE while a member on line2 of a DECT handset can be of type PEOPLE, PLACE, or VIRTUAL_LINE.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificDECTNetworkHandsetDetailsTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String handsetId = null;
        String orgId = null;
        String authorization = null;
        GetSpecificDECTNetworkHandsetDetails200Response response = api.getSpecificDECTNetworkHandsetDetails(locationId, dectNetworkId, handsetId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get the details of a specific DECT Network Base Station
     *
     * Retrieve details of a specific base station in the DECT Network.  A DECT network supports 2 types of base stations, DECT DBS-110 Single-Cell and DECT DBS-210 Multi-Cell. A DECT DBS-110 allows up to 30 lines of registration and supports 1 base station only. A DECT DBS-210 can have up to 254 base stations and supports up to 1000 lines of registration.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheDetailsOfASpecificDECTNetworkBaseStationTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String baseStationId = null;
        String orgId = null;
        String authorization = null;
        GetTheDetailsOfASpecificDECTNetworkBaseStation200Response response = api.getTheDetailsOfASpecificDECTNetworkBaseStation(locationId, dectNetworkId, baseStationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get the List of DECT Networks for an organization
     *
     * Retrieves the list of DECT networks for an organization.  DECT Networks provide roaming voice services via base stations and wireless handsets. A DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheListOfDECTNetworksForAnOrganizationTest() throws ApiException {
        String orgId = null;
        String name = null;
        String locationId = null;
        String authorization = null;
        GetTheListOfDECTNetworksForAnOrganization200Response response = api.getTheListOfDECTNetworksForAnOrganization(orgId, name, locationId, authorization);
        // TODO: test validations
    }

    /**
     * Get the Organization Compliance Status and the Location Status List
     *
     * Get the organization compliance status and the location status list for a RedSky account.  The enhanced emergency (E911) service for Webex Calling provides an emergency service designed for organizations with a hybrid or nomadic workforce. It provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada.  To retrieve organization compliance status requires a full, user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheOrganizationComplianceStatusAndTheLocationStatusListTest() throws ApiException {
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String order = null;
        String authorization = null;
        GetTheOrganizationComplianceStatusAndTheLocationStatusList200Response response = api.getTheOrganizationComplianceStatusAndTheLocationStatusList(orgId, start, max, order, authorization);
        // TODO: test validations
    }

    /**
     * Get the Organization Compliance Status for a RedSky Account
     *
     * Get the organization compliance status for a RedSky account. The &#x60;locationStatus.state&#x60; in the response will show the state for the location that is in the earliest stage of configuration.  The enhanced emergency (E911) service for Webex Calling provides an emergency service designed for organizations with a hybrid or nomadic workforce. It provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada.  To retrieve organization compliance status requires a full, user or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheOrganizationComplianceStatusForARedSkyAccountTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetTheOrganizationComplianceStatusForARedSkyAccount200Response response = api.getTheOrganizationComplianceStatusForARedSkyAccount(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get the organization Music on Hold configuration
     *
     * Retrieve the organization&#39;s Music on Hold settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheOrganizationMusicOnHoldConfigurationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetTheOrganizationMusicOnHoldConfiguration200Response response = api.getTheOrganizationMusicOnHoldConfiguration(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get the Virtual Line&#39;s Emergency Callback settings
     *
     * Retrieves the emergency callback number settings for a specific virtual line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines for Webex Calling users.  Retrieving the dependencies requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTheVirtualLinesEmergencyCallbackSettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        GetTheVirtualLineSEmergencyCallbackSettings200Response response = api.getTheVirtualLinesEmergencyCallbackSettings(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Virtual Line Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a virtual line&#39;s phone number. By default, this API returns unassigned numbers from all locations. To select the suitable number for assignment, ensure the virtual line&#39;s location ID is provided as the &#x60;locationId&#x60; request parameter.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualLineAvailablePhoneNumbersTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getVirtualLineAvailablePhoneNumbers(orgId, locationId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Virtual Line Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a virtual line&#39;s call forward number. These numbers are associated with the location of the virtual line specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualLineCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getVirtualLineCallForwardAvailablePhoneNumbers(virtualLineId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Virtual Line Call Intercept Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a virtual line&#39;s call intercept number. These numbers are associated with the location of the virtual line specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualLineCallInterceptAvailablePhoneNumbersTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetHuntGroupCallForwardAvailablePhoneNumbers200Response response = api.getVirtualLineCallInterceptAvailablePhoneNumbers(virtualLineId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Virtual Line ECBN Available Phone Numbers
     *
     * List standard numbers that can be assigned as a virtual line&#39;s call forward number. These numbers are associated with the location of the virtual line specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualLineECBNAvailablePhoneNumbersTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String authorization = null;
        GetVirtualLineECBNAvailablePhoneNumbers200Response response = api.getVirtualLineECBNAvailablePhoneNumbers(virtualLineId, orgId, max, start, phoneNumber, ownerName, authorization);
        // TODO: test validations
    }

    /**
     * Get Virtual Line Fax Message Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a virtual line&#39;s FAX message number. These numbers are associated with the location of the virtual line specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualLineFaxMessageAvailablePhoneNumbersTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetVirtualLineFaxMessageAvailablePhoneNumbers200Response response = api.getVirtualLineFaxMessageAvailablePhoneNumbers(virtualLineId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get VoicePortal
     *
     * Retrieve Voice portal information for the location.  Voice portals provide an interactive voice response (IVR) system so administrators can manage auto attendant announcements.  Retrieving voice portal information for an organization requires a full read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicePortalTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetVoicePortal200Response response = api.getVoicePortal(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get VoicePortal Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as the location voice portal&#39;s phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicePortalAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getVoicePortalAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get VoicePortal Passcode Rule
     *
     * Retrieve the voice portal passcode rule for a location.  Voice portals provide an interactive voice response (IVR) system so administrators can manage auto attendant anouncements  Retrieving the voice portal passcode rule requires a full read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicePortalPasscodeRuleTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        GetVoicePortalPasscodeRule200Response response = api.getVoicePortalPasscodeRule(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Voicemail Group Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a voicemail group&#39;s phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicemailGroupAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getVoicemailGroupAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Voicemail Group Fax Message Available Phone Numbers
     *
     * List the standard and service PSTN numbers that are available to be assigned as a voicemail group&#39;s FAX message phone number. These numbers are associated with the location specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicemailGroupFaxMessageAvailablePhoneNumbersTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetSingleNumberReachPrimaryAvailablePhoneNumbers200Response response = api.getVoicemailGroupFaxMessageAvailablePhoneNumbers(locationId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Voicemail Rules
     *
     * Retrieve the organization&#39;s voicemail rules.  Organizational voicemail rules specify the default passcode requirements. They are provided for informational purposes only and cannot be modified.  Retrieving the organization&#39;s voicemail rules requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicemailRulesTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetVoicemailRules200Response response = api.getVoicemailRules(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Voicemail Settings
     *
     * Retrieve the organization&#39;s voicemail settings.  Organizational voicemail settings determines what voicemail features a person can configure and automatic message expiration.  Retrieving organization&#39;s voicemail settings requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoicemailSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        GetVoicemailSettings200Response response = api.getVoicemailSettings(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a workspace&#39;s phone number. By default, this API returns numbers from all locations that are unassigned. To select the suitable number for assignment, ensure the workspace&#39;s location ID is provided as the &#x60;locationId&#x60; request parameter.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceAvailablePhoneNumbersTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getWorkspaceAvailablePhoneNumbers(orgId, locationId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Call Forward Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a workspace&#39;s call forward number. These numbers are associated with the location of the workspace specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceCallForwardAvailablePhoneNumbersTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetWorkspaceCallForwardAvailablePhoneNumbers200Response response = api.getWorkspaceCallForwardAvailablePhoneNumbers(workspaceId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Call Intercept Available Phone Numbers
     *
     * List the service and standard PSTN numbers that are available to be assigned as a workspace&#39;s call intercept number. These numbers are associated with the location of the workspace specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceCallInterceptAvailablePhoneNumbersTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String extension = null;
        String authorization = null;
        GetWorkspaceCallForwardAvailablePhoneNumbers200Response response = api.getWorkspaceCallInterceptAvailablePhoneNumbers(workspaceId, orgId, max, start, phoneNumber, ownerName, extension, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Capabilities
     *
     * Shows the capabilities for a workspace by ID.  Returns a set of capabilities, including whether or not the capability is supported by any device in the workspace, and if the capability is configured (enabled). For example for a specific capability like &#x60;occupancyDetection&#x60;, the API will return if the capability is supported and/or configured such that occupancy detection data will flow from the workspace (device) to the cloud. Specify the workspace ID in the &#x60;workspaceId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceCapabilitiesTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        GetWorkspaceCapabilities200Response response = api.getWorkspaceCapabilities(workspaceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Details
     *
     * Shows details for a workspace, by ID.  The &#x60;locationId&#x60;, &#x60;workspaceLocationId&#x60;, &#x60;floorId&#x60;, &#x60;indoorNavigation&#x60;, &#x60;capacity&#x60;, &#x60;type&#x60; and &#x60;notes&#x60; fields will only be present if they have been set for the workspace. Specify the workspace ID in the &#x60;workspaceId&#x60; parameter in the URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceDetailsTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        CreateAWorkspace201Response response = api.getWorkspaceDetails(workspaceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace ECBN Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a workspace&#39;s emergency callback number. These numbers are associated with the location of the workspace specified in the request URL, can be active or inactive, and are assigned to an owning entity.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceECBNAvailablePhoneNumbersTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String ownerName = null;
        String authorization = null;
        GetWorkspaceECBNAvailablePhoneNumbers200Response response = api.getWorkspaceECBNAvailablePhoneNumbers(workspaceId, orgId, max, start, phoneNumber, ownerName, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Fax Message Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a workspace&#39;s FAX message number. These numbers are associated with the location of the workspace specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;info\&quot;&gt;Only available for workspaces with the professional license entitlement.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceFaxMessageAvailablePhoneNumbersTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getWorkspaceFaxMessageAvailablePhoneNumbers(workspaceId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Get Workspace Secondary Available Phone Numbers
     *
     * List standard numbers that are available to be assigned as a workspace&#39;s secondary number. These numbers are associated with the location of the workspace specified in the request URL, can be active or inactive, and are unassigned.  The available numbers APIs help identify candidate numbers and their owning entities to simplify the assignment or association of these numbers to members or features.  Retrieving this list requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;info\&quot;&gt;Only available for workspaces with the professional license entitlement.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceSecondaryAvailablePhoneNumbersTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String phoneNumber = null;
        String authorization = null;
        GetPersonSecondaryAvailablePhoneNumbers200Response response = api.getWorkspaceSecondaryAvailablePhoneNumbers(workspaceId, orgId, max, start, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Hangup
     *
     * Hangup a call. If used on an unanswered incoming call, the call is rejected and sent to busy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hangupTest() throws ApiException {
        String authorization = null;
        HangupRequest hangupRequest = null;
        api.hangup(authorization, hangupRequest);
        // TODO: test validations
    }

    /**
     * Hold
     *
     * Hold a connected call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void holdTest() throws ApiException {
        String authorization = null;
        HoldRequest holdRequest = null;
        api.hold(authorization, holdRequest);
        // TODO: test validations
    }

    /**
     * Initiate Number Jobs
     *
     * Starts the execution of an operation on a set of numbers. Supported operations are: &#x60;MOVE&#x60;, &#x60;NUMBER_USAGE_CHANGE&#x60;. &lt;br/&gt; This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;. &lt;br/&gt;  **Notes** &lt;br/&gt; Although the job can internally perform the &#x60;DELETE&#x60; &amp; &#x60;ACTIVATE&#x60; actions, only the &#x60;MOVE&#x60; and &#x60;NUMBER_USAGE_CHANGE&#x60; operations are publicly supported.  Although the &#x60;numbers&#x60; field is an array, we currently only support a single number with each request for &#x60;MOVE&#x60; operation type and change of usage type of up to 1000 numbers per request. Only one number can be moved at any given time. If a move of another number is initiated while a move job is in progress the API call will receive a &#x60;409&#x60; http status code.  &lt;br/&gt; In order to move a number, &lt;br/&gt;  * The number must be unassigned.  * Both locations must have the same PSTN Connection Type.  * Both locations must have the same PSTN Provider.  * Both locations have to be in the same country.  &lt;br/&gt;  For example, you can move from Cisco Calling Plan to Cisco Calling Plan, but you cannot move from Cisco Calling Plan to a location with Cloud Connected PSTN.  &lt;br/&gt;  In order to change the number usage,  &lt;br/&gt;  * The number must be unassigned.  * Number Usage Type can be set to &#x60;NONE&#x60; if carrier has the PSTN service &#x60;GEOGRAPHIC_NUMBERS&#x60;.  * Number Usage Type can be set to &#x60;SERVICE&#x60; if carrier has the PSTN service &#x60;SERVICE_NUMBERS&#x60;.  &lt;br/&gt;  For example, you can initiate a &#x60;NUMBER_USAGE_CHANGE&#x60; job to change the number type from Standard number to Service number, or the other way around.  &lt;br/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateNumberJobsTest() throws ApiException {
        String authorization = null;
        AdminBatchStartJobObject adminBatchStartJobObject = null;
        ListManageNumbersJobs200ResponseItemsInner response = api.initiateNumberJobs(authorization, adminBatchStartJobObject);
        // TODO: test validations
    }

    /**
     * List BroadWorks Billing Reports
     *
     * Search for reports. There are a number of filter options which can be combined in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBroadWorksBillingReportsTest() throws ApiException {
        String before = null;
        String after = null;
        String sortBy = null;
        String authorization = null;
        ListBroadWorksBillingReports200Response response = api.listBroadWorksBillingReports(before, after, sortBy, authorization);
        // TODO: test validations
    }

    /**
     * List BroadWorks Enterprises
     *
     * List the provisioned enterprises for a Service Provider. This API also lets a Service Provider search for their provisioned enterprises on Webex. A search on enterprises can be performed by either a full or partial enterprise identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBroadWorksEnterprisesTest() throws ApiException {
        String spEnterpriseId = null;
        String startsWith = null;
        BigDecimal max = null;
        String authorization = null;
        ListBroadWorksEnterprises200Response response = api.listBroadWorksEnterprises(spEnterpriseId, startsWith, max, authorization);
        // TODO: test validations
    }

    /**
     * List BroadWorks Subscribers
     *
     * This API lets a Service Provider search for their associated subscribers. There are a number of filter options that can be combined in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBroadWorksSubscribersTest() throws ApiException {
        String userId = null;
        String personId = null;
        String email = null;
        String provisioningId = null;
        String spEnterpriseId = null;
        String lastStatusChange = null;
        String status = null;
        String after = null;
        Boolean selfActivated = null;
        Integer max = null;
        String authorization = null;
        ListWholesaleSubscribers200Response response = api.listBroadWorksSubscribers(userId, personId, email, provisioningId, spEnterpriseId, lastStatusChange, status, after, selfActivated, max, authorization);
        // TODO: test validations
    }

    /**
     * List Call History
     *
     * Get the list of call history records for the user. A maximum of 20 call history records per type (&#x60;placed&#x60;, &#x60;missed&#x60;, &#x60;received&#x60;) are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallHistoryTest() throws ApiException {
        String type = null;
        String authorization = null;
        ListMessages200Response response = api.listCallHistory(type, authorization);
        // TODO: test validations
    }

    /**
     * List Calls
     *
     * Get the list of details for all active calls associated with the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallsTest() throws ApiException {
        String authorization = null;
        ListMessages200Response response = api.listCalls(authorization);
        // TODO: test validations
    }

    /**
     * List Devices
     *
     * Lists all active Webex devices associated with the authenticated user, such as devices activated in personal mode. This requires the &#x60;spark:devices_read&#x60; scope. Administrators can list all devices within their organization. This requires an administrator auth token with the &#x60;spark-admin:devices_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        BigDecimal max = null;
        BigDecimal start = null;
        String displayName = null;
        String personId = null;
        String workspaceId = null;
        String orgId = null;
        String connectionStatus = null;
        String product = null;
        String type = null;
        String serial = null;
        String tag = null;
        String software = null;
        String upgradeChannel = null;
        String errorCode = null;
        String capability = null;
        String permission = null;
        String locationId = null;
        String workspaceLocationId = null;
        String mac = null;
        String devicePlatform = null;
        String authorization = null;
        ListManageNumbersJobErrors200Response response = api.listDevices(max, start, displayName, personId, workspaceId, orgId, connectionStatus, product, type, serial, tag, software, upgradeChannel, errorCode, capability, permission, locationId, workspaceLocationId, mac, devicePlatform, authorization);
        // TODO: test validations
    }

    /**
     * List Location Floors
     *
     * List location floors. Requires an administrator auth token with the &#x60;spark-admin:locations_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLocationFloorsTest() throws ApiException {
        String locationId = null;
        String authorization = null;
        ListLocationFloors200Response response = api.listLocationFloors(locationId, authorization);
        // TODO: test validations
    }

    /**
     * List Locations
     *
     * List locations for an organization.  * Use query parameters to filter the result set by location name, ID, or organization.  * Long result sets will be split into [pages](/docs/basics#pagination).  * Searching and viewing locations in your organization requires an administrator or location administrator auth token with any of the following scopes: &#x60;spark-admin:locations_read&#x60;, &#x60;spark-admin:people_read&#x60; or &#x60;spark-admin:device_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLocationsTest() throws ApiException {
        String name = null;
        String id = null;
        String orgId = null;
        BigDecimal max = null;
        String authorization = null;
        ListLocations200Response response = api.listLocations(name, id, orgId, max, authorization);
        // TODO: test validations
    }

    /**
     * List Manage Numbers Job errors
     *
     * Lists all error details of Manage Numbers job. This will not list any errors if &#x60;exitCode&#x60; is &#x60;COMPLETED&#x60;. If the status is &#x60;COMPLETED_WITH_ERRORS&#x60; then this lists the cause of failures.  List of possible Errors:  + BATCH-1017021 - Failed to move because it is an inactive number.  + BATCH-1017022 - Failed to move because the source location and target location have different CCP providers.  + BATCH-1017023 - Failed because it is not an unassigned number.  + BATCH-1017024 - Failed because it is a main number.  + BATCH-1017027 - Manage Numbers Move Operation is not supported.  + BATCH-1017031 - Hydra request is supported only for single number move job.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listManageNumbersJobErrorsTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String authorization = null;
        ListManageNumbersJobErrors200Response response = api.listManageNumbersJobErrors(jobId, orgId, start, max, authorization);
        // TODO: test validations
    }

    /**
     * List Manage Numbers Jobs
     *
     * Lists all Manage Numbers jobs for the given organization in order of most recent one to oldest one irrespective of its status.  The public API only supports initiating jobs which move numbers between locations.  Via Control Hub they can initiate both the move and delete, so this listing can show both.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listManageNumbersJobsTest() throws ApiException {
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String authorization = null;
        ListManageNumbersJobs200Response response = api.listManageNumbersJobs(orgId, start, max, authorization);
        // TODO: test validations
    }

    /**
     * List Meeting Archive Summaries
     *
     * Lists of meeting archive summaries. You can specify a date range and the maximum number of meeting archive summaries to return.  Meeting archive summaries are only available to full administrators, not even the meeting host.  The list returned is sorted in descending order by the date and time that the archives were created.  Long result sets are split into [pages](/docs/basics#pagination).  * If &#x60;siteUrl&#x60; is specified, the meeting archive summaries of the specified site will be listed; otherwise, meeting archive summaries of the user&#39;s preferred site will be listed. All available Webex sites and the preferred site of the user can be retrieved by the &#x60;Get Site List&#x60; API.  #### Request Header  * &#x60;timezone&#x60;: [Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeetingArchiveSummariesTest() throws ApiException {
        BigDecimal max = null;
        String from = null;
        String to = null;
        String siteUrl = null;
        String authorization = null;
        String timezone = null;
        ListMeetingArchiveSummaries200Response response = api.listMeetingArchiveSummaries(max, from, to, siteUrl, authorization, timezone);
        // TODO: test validations
    }

    /**
     * List Messages
     *
     * Get the list of all voicemail messages for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessagesTest() throws ApiException {
        String authorization = null;
        ListMessages200Response response = api.listMessages(authorization);
        // TODO: test validations
    }

    /**
     * List Move Users Job errors
     *
     * Lists all error details of Move Users job. This will not list any errors if &#x60;exitCode&#x60; is &#x60;COMPLETED&#x60;. If the status is &#x60;COMPLETED_WITH_ERRORS&#x60; then this lists the cause of failures.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMoveUsersJobErrorsTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String authorization = null;
        ListManageNumbersJobErrors200Response response = api.listMoveUsersJobErrors(jobId, orgId, start, max, authorization);
        // TODO: test validations
    }

    /**
     * List Move Users Jobs
     *
     * Lists all the Move Users jobs for the given organization in order of most recent job to oldest job irrespective of its status.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMoveUsersJobsTest() throws ApiException {
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String authorization = null;
        ListMoveUsersJobs200Response response = api.listMoveUsersJobs(orgId, start, max, authorization);
        // TODO: test validations
    }

    /**
     * List numbers associated with a specific workspace
     *
     * List the PSTN phone numbers associated with a specific workspace, by ID, within the organization. Also shows the location and organization associated with the workspace.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNumbersAssociatedWithASpecificWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ListNumbersAssociatedWithASpecificWorkspace200Response response = api.listNumbersAssociatedWithASpecificWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * List of Recording Audit Report Summaries
     *
     * Lists of recording audit report summaries. You can specify a date range and the maximum number of recording audit report summaries to return.  Only recording audit report summaries of meetings hosted by or shared with the authenticated user will be listed.  The list returned is sorted in descending order by the date and time that the recordings were created.  Long result sets are split into [pages](/docs/basics#pagination).  * If &#x60;siteUrl&#x60; is specified, the recording audit report summaries of the specified site will be listed; otherwise, recording audit report summaries of the user&#39;s preferred site will be listed. All available Webex sites and the preferred site of the user can be retrieved by the &#x60;Get Site List&#x60; API.  #### Request Header  * &#x60;timezone&#x60;: [Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfRecordingAuditReportSummariesTest() throws ApiException {
        BigDecimal max = null;
        String from = null;
        String to = null;
        String hostEmail = null;
        String siteUrl = null;
        String authorization = null;
        String timezone = null;
        ListOfRecordingAuditReportSummaries200Response response = api.listOfRecordingAuditReportSummaries(max, from, to, hostEmail, siteUrl, authorization, timezone);
        // TODO: test validations
    }

    /**
     * List of Schedules for a Person
     *
     * List schedules for a person in an organization.  Schedules are used to support calling features and can be defined at the location or person level. &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfSchedulesForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String name = null;
        String type = null;
        String authorization = null;
        ListOfSchedulesForAPerson200Response response = api.listOfSchedulesForAPerson(personId, orgId, start, max, name, type, authorization);
        // TODO: test validations
    }

    /**
     * List People
     *
     * List people in your organization. For most users, either the &#x60;email&#x60; or &#x60;displayName&#x60; parameter is required. Admin users can omit these fields and list all users in their organization.  Response properties associated with a user&#39;s presence status, such as &#x60;status&#x60; or &#x60;lastActivity&#x60;, will only be returned for people within your organization or an organization you manage. Presence information will not be returned if the authenticated user has [disabled status sharing](https://help.webex.com/nkzs6wl/). Calling /people frequently to poll &#x60;status&#x60; information for a large set of users will quickly lead to &#x60;429&#x60; errros and throttling of such requests and is therefore discouraged.  Admin users can include &#x60;Webex Calling&#x60; (BroadCloud) user details in the response by specifying &#x60;callingData&#x60; parameter as &#x60;true&#x60;. Admin users can list all users in a location or with a specific phone number. Admin users will receive an enriched payload with additional administrative fields like &#x60;licenses&#x60;,&#x60;roles&#x60;, &#x60;locations&#x60; etc. These fields are shown when accessing a user via GET /people/{id}, not when doing a GET /people?id&#x3D;  Lookup by &#x60;email&#x60; is only supported for people within the same org or where a partner admin relationship is in place.  Lookup by &#x60;roles&#x60; is only supported for Admin users for the people within the same org.  Long result sets will be split into [pages](/docs/basics#pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPeopleTest() throws ApiException {
        String email = null;
        String displayName = null;
        String id = null;
        String orgId = null;
        String roles = null;
        Boolean callingData = null;
        String locationId = null;
        BigDecimal max = null;
        String authorization = null;
        ListPeople200Response response = api.listPeople(email, displayName, id, orgId, roles, callingData, locationId, max, authorization);
        // TODO: test validations
    }

    /**
     * List Recordings for Compliance officer
     *
     * List recordings for compliance officer. You can specify a date range, and the maximum number of recordings to return.  The list returned is sorted in descending order by the date and time that the recordings were created.  Long result sets are split into [pages](/docs/basics#pagination).  List recordings requires the spark-compliance:recordings_read scope.  #### Request Header  * &#x60;timezone&#x60;: *[Time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) in conformance with the [IANA time zone database](https://www.iana.org/time-zones). The default is UTC if &#x60;timezone&#x60; is not defined.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordingsForComplianceOfficerTest() throws ApiException {
        BigDecimal max = null;
        String from = null;
        String to = null;
        String status = null;
        String serviceType = null;
        String format = null;
        String ownerId = null;
        String ownerEmail = null;
        String ownerType = null;
        String storageRegion = null;
        String locationId = null;
        String authorization = null;
        String timezone = null;
        ListRecordingsForComplianceOfficer200Response response = api.listRecordingsForComplianceOfficer(max, from, to, status, serviceType, format, ownerId, ownerEmail, ownerType, storageRegion, locationId, authorization, timezone);
        // TODO: test validations
    }

    /**
     * List Reports
     *
     * Lists all reports. Use query parameters to filter the response. The parameters are optional. However, &#x60;from&#x60; and &#x60;to&#x60; parameters should be provided together.  **Notes**: CSV reports for Teams services are only supported for organizations based in the North American region. Organizations based in a different region will return blank CSV files for any Teams reports.  Reports are usually provided in zip format. A Content-header &#x60;application/zip&#x60; or &#x60;application/octet-stream&#x60; does indicate the zip format. There is usually no .zip file extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportsTest() throws ApiException {
        String reportId = null;
        String service = null;
        BigDecimal templateId = null;
        String from = null;
        String to = null;
        String authorization = null;
        ListReports200Response response = api.listReports(reportId, service, templateId, from, to, authorization);
        // TODO: test validations
    }

    /**
     * List VoicemailGroup
     *
     * List the voicemail group information for the organization.  You can create a shared voicemail box and inbound FAX box to assign to users or call routing features like an auto attendant, call queue, or hunt group.  Retrieving a voicemail group for the organization requires a full read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVoicemailGroupTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        String name = null;
        String phoneNumber = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String authorization = null;
        ListVoicemailGroup200Response response = api.listVoicemailGroup(orgId, locationId, name, phoneNumber, max, start, authorization);
        // TODO: test validations
    }

    /**
     * List Wholesale Billing Reports
     *
     * Search for associated wholesale billing reconciliation reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWholesaleBillingReportsTest() throws ApiException {
        String billingStartDate = null;
        String billingEndDate = null;
        String type = null;
        String sortBy = null;
        String status = null;
        Integer max = null;
        String subPartnerOrgId = null;
        String authorization = null;
        ListWholesaleBillingReports200Response response = api.listWholesaleBillingReports(billingStartDate, billingEndDate, type, sortBy, status, max, subPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * List Wholesale Customers
     *
     * This API allows a Service Provider to search for their customers. There are a number of filter options, which can be combined in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWholesaleCustomersTest() throws ApiException {
        String externalId = null;
        String orgId = null;
        String status = null;
        String offset = null;
        String max = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        ListWholesaleCustomers200Response response = api.listWholesaleCustomers(externalId, orgId, status, offset, max, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * List Wholesale Sub-partners
     *
     * This API allows a Service Provider to list all of their associated sub-partners. There are a number of filter and pagination options that can be combined in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWholesaleSubPartnersTest() throws ApiException {
        String provisioningState = null;
        String offset = null;
        String max = null;
        String authorization = null;
        ListWholesaleSubPartners200Response response = api.listWholesaleSubPartners(provisioningState, offset, max, authorization);
        // TODO: test validations
    }

    /**
     * List Wholesale Subscribers
     *
     * This API allows a Service Provider to search for their associated subscribers. There are a number of filter options, which can be combined in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWholesaleSubscribersTest() throws ApiException {
        Integer max = null;
        Integer offset = null;
        String customerId = null;
        String personId = null;
        String externalCustomerId = null;
        String email = null;
        String status = null;
        String after = null;
        String lastStatusChange = null;
        String sortBy = null;
        String sortOrder = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        ListWholesaleSubscribers200Response response = api.listWholesaleSubscribers(max, offset, customerId, personId, externalCustomerId, email, status, after, lastStatusChange, sortBy, sortOrder, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * List Workspaces
     *
     * List workspaces.  Use query parameters to filter the response. The &#x60;orgId&#x60; parameter can only be used by admin users of another organization (such as partners). The &#x60;locationId&#x60;, &#x60;workspaceLocationId&#x60;, &#x60;indoorNavigation&#x60;, &#x60;floorId&#x60;, &#x60;capacity&#x60; and &#x60;type&#x60; fields will only be present for workspaces that have a value set for them. The special values &#x60;notSet&#x60; (for filtering on category) and &#x60;-1&#x60; (for filtering on capacity) can be used to filter for workspaces without a type and/or capacity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspacesTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        String workspaceLocationId = null;
        String floorId = null;
        String displayName = null;
        BigDecimal capacity = null;
        String type = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String calling = null;
        String supportedDevices = null;
        String calendar = null;
        Boolean deviceHostedMeetingsEnabled = null;
        String devicePlatform = null;
        String authorization = null;
        ListWorkspaces200Response response = api.listWorkspaces(orgId, locationId, workspaceLocationId, floorId, displayName, capacity, type, start, max, calling, supportedDevices, calendar, deviceHostedMeetingsEnabled, devicePlatform, authorization);
        // TODO: test validations
    }

    /**
     * Login to a RedSky Admin Account
     *
     * Login to Redsky for an existing account admin user to retrieve the &#x60;companyId&#x60; and verify the status of &#x60;externalTenantEnabled&#x60;. The password provided will not be stored.  The enhanced emergency (E911) service for Webex Calling provides an emergency service designed for organizations with a hybrid or nomadic workforce. It provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada.  Logging in requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginToARedSkyAdminAccountTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        LoginRequest loginRequest = null;
        LoginToARedSkyAdminAccount200Response response = api.loginToARedSkyAdminAccount(orgId, authorization, loginRequest);
        // TODO: test validations
    }

    /**
     * Mark As Read
     *
     * Update the voicemail message(s) as read for the user.  If the &#x60;messageId&#x60; is provided, then only mark that message as read.  Otherwise, all messages for the user are marked as read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsReadTest() throws ApiException {
        String authorization = null;
        MarkAsReadRequest markAsReadRequest = null;
        api.markAsRead(authorization, markAsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark As Unread
     *
     * Update the voicemail message(s) as unread for the user.  If the &#x60;messageId&#x60; is provided, then only mark that message as unread.  Otherwise, all messages for the user are marked as unread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsUnreadTest() throws ApiException {
        String authorization = null;
        MarkAsUnreadRequest markAsUnreadRequest = null;
        api.markAsUnread(authorization, markAsUnreadRequest);
        // TODO: test validations
    }

    /**
     * Modify a binary announcement greeting at location level
     *
     * Modify an existing announcement greeting at a location level.  An admin can upload a file or modify an existing file at a location level. This file will be uploaded to the announcement repository.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyABinaryAnnouncementGreetingAtLocationLevelTest() throws ApiException {
        String locationId = null;
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        api.modifyABinaryAnnouncementGreetingAtLocationLevel(locationId, announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Modify a binary announcement greeting at organization level
     *
     * Modify an existing announcement greeting at an organization level.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyABinaryAnnouncementGreetingAtOrganizationLevelTest() throws ApiException {
        String announcementId = null;
        String orgId = null;
        String authorization = null;
        api.modifyABinaryAnnouncementGreetingAtOrganizationLevel(announcementId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Modify a Dial Plan
     *
     * Modify a Dial Plan for the organization.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Modifying a dial plan requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyADialPlanTest() throws ApiException {
        String dialPlanId = null;
        String orgId = null;
        String authorization = null;
        DialPlanPut dialPlanPut = null;
        api.modifyADialPlan(dialPlanId, orgId, authorization, dialPlanPut);
        // TODO: test validations
    }

    /**
     * Modify a person&#39;s Application Services Settings
     *
     * Application services let you determine the ringing behavior for calls made to users in certain scenarios. You can also specify which devices users can download the Webex Calling app on.  This API requires a full or user administrator or location administrator auth token with the spark-admin:people_write scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAPersonsApplicationServicesSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ApplicationsSettingPut applicationsSettingPut = null;
        api.modifyAPersonsApplicationServicesSettings(personId, orgId, authorization, applicationsSettingPut);
        // TODO: test validations
    }

    /**
     * Modify a person&#39;s Monitoring Settings
     *
     * Modifies the monitoring settings of the person. Monitors the line status of specified people, places, virtual lines or call park extension. The line status indicates if a person, place or virtual line is on a call and if a call has been parked on that extension.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAPersonsMonitoringSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ModifyAPersonSMonitoringSettingsRequest modifyAPersonSMonitoringSettingsRequest = null;
        api.modifyAPersonsMonitoringSettings(personId, orgId, authorization, modifyAPersonSMonitoringSettingsRequest);
        // TODO: test validations
    }

    /**
     * Modify a person&#39;s Outgoing Calling Permissions Settings
     *
     * Modify a person&#39;s Outgoing Calling Permissions settings.  Outgoing calling permissions regulate behavior for calls placed to various destinations and default to the local level settings. You can change the outgoing calling permissions for a person if you want them to be different from your organization&#39;s default.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAPersonsOutgoingCallingPermissionsSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        OutgoingCallingPermissionsSetting outgoingCallingPermissionsSetting = null;
        api.modifyAPersonsOutgoingCallingPermissionsSettings(personId, orgId, authorization, outgoingCallingPermissionsSetting);
        // TODO: test validations
    }

    /**
     * Modify a person&#39;s voicemail passcode
     *
     * Modify a person&#39;s voicemail passcode.  Modifying a person&#39;s voicemail passcode requires a full administrator, user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAPersonsVoicemailPasscodeTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ModifyAPersonSVoicemailPasscodeRequest modifyAPersonSVoicemailPasscodeRequest = null;
        api.modifyAPersonsVoicemailPasscode(personId, orgId, authorization, modifyAPersonSVoicemailPasscodeRequest);
        // TODO: test validations
    }

    /**
     * Modify a Route Group for a Organization
     *
     * Modifies an existing Route Group for an organization based on id.  A Route Group is a collection of trunks that allows further scale and redundancy with the connection to the premises. Route groups can include up to 10 trunks from different locations.  Modifying a Route Group requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyARouteGroupForAOrganizationTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String authorization = null;
        RouteGroupPatch routeGroupPatch = null;
        api.modifyARouteGroupForAOrganization(routeGroupId, orgId, authorization, routeGroupPatch);
        // TODO: test validations
    }

    /**
     * Modify a Route List
     *
     * Modify the details for a Route List.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving a Route List requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyARouteListTest() throws ApiException {
        String routeListId = null;
        String orgId = null;
        String authorization = null;
        RouteListPatch routeListPatch = null;
        api.modifyARouteList(routeListId, orgId, authorization, routeListPatch);
        // TODO: test validations
    }

    /**
     * Modify a Trunk
     *
     * Modify a Trunk for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group - a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Modifying a trunk requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyATrunkTest() throws ApiException {
        String trunkId = null;
        String orgId = null;
        String authorization = null;
        TrunkPut trunkPut = null;
        api.modifyATrunk(trunkId, orgId, authorization, trunkPut);
        // TODO: test validations
    }

    /**
     * Modify a virtual line&#39;s Outgoing Calling Permissions Settings
     *
     * Modify a virtual line&#39;s Outgoing Calling Permissions settings.  Outgoing calling permissions regulate behavior for calls placed to various destinations and default to the local level settings. You can change the outgoing calling permissions for a virtual line if you want them to be different from your organization&#39;s default.  Updating the outgoing permission settings for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAVirtualLinesOutgoingCallingPermissionsSettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        OutgoingCallingPermissionsSetting outgoingCallingPermissionsSetting = null;
        api.modifyAVirtualLinesOutgoingCallingPermissionsSettings(virtualLineId, orgId, authorization, outgoingCallingPermissionsSetting);
        // TODO: test validations
    }

    /**
     * Modify a virtual line&#39;s voicemail passcode
     *
     * Modify a virtual line&#39;s voicemail passcode.  Modifying a virtual line&#39;s voicemail passcode requires a full administrator, user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAVirtualLinesVoicemailPasscodeTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ModifyAPersonSVoicemailPasscodeRequest modifyAPersonSVoicemailPasscodeRequest = null;
        api.modifyAVirtualLinesVoicemailPasscode(virtualLineId, orgId, authorization, modifyAPersonSVoicemailPasscodeRequest);
        // TODO: test validations
    }

    /**
     * Modify Access Codes for a Workspace
     *
     * Modify Access codes for a workspace.  Access codes are used to bypass permissions.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAccessCodesForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserPlaceAuthorizationCodeListPatch userPlaceAuthorizationCodeListPatch = null;
        api.modifyAccessCodesForAWorkspace(workspaceId, orgId, authorization, userPlaceAuthorizationCodeListPatch);
        // TODO: test validations
    }

    /**
     * Modify Agent&#39;s Caller ID Information
     *
     * Modify Agent&#39;s Caller ID Information.  Each Agent will be able to set their outgoing Caller ID as either the designated Call Queue&#39;s Caller ID or Hunt Group&#39;s Caller ID or their own configured Caller ID  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:telephony_config_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAgentsCallerIDInformationTest() throws ApiException {
        String personId = null;
        String authorization = null;
        PutAgentCallCallerId putAgentCallCallerId = null;
        api.modifyAgentsCallerIDInformation(personId, authorization, putAgentCallCallerId);
        // TODO: test validations
    }

    /**
     * Modify Agent&#39;s Caller ID Information
     *
     * Modify Agent&#39;s Caller ID Information.  Each Agent is able to set their outgoing Caller ID as either the designated Call Queue&#39;s Caller ID or the Hunt Group&#39;s Caller ID or their own configured Caller ID. This API requires a full or user administrator auth token with the &#x60;spark-admin:telephony_config_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAgentsCallerIDInformation_0Test() throws ApiException {
        String virtualLineId = null;
        String authorization = null;
        PutAgentCallCallerId putAgentCallCallerId = null;
        api.modifyAgentsCallerIDInformation_0(virtualLineId, authorization, putAgentCallCallerId);
        // TODO: test validations
    }

    /**
     * Modify Anonymous Call Settings for a Workspace
     *
     * Modify Anonymous Call Settings for a Workspace.  Anonymous Call Rejection, when enabled, blocks all incoming calls from unidentified or blocked caller IDs.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAnonymousCallSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        AnonymousCallRejectionPatch anonymousCallRejectionPatch = null;
        api.modifyAnonymousCallSettingsForAWorkspace(workspaceId, orgId, authorization, anonymousCallRejectionPatch);
        // TODO: test validations
    }

    /**
     * Modify Barge In Call Settings for a Workspace
     *
     * Modify Barge In Call Settings for a Workspace.  Barge In, when enabled, allows you to use the Feature Access Code (FAC) on your desk phone to answer someone else’s phone call or barge in on a call they’ve already answered.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyBargeInCallSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserBargeInPatch userBargeInPatch = null;
        api.modifyBargeInCallSettingsForAWorkspace(workspaceId, orgId, authorization, userBargeInPatch);
        // TODO: test validations
    }

    /**
     * Modify Call Bridge Warning Tone Settings for a Workspace
     *
     * Modify Call Bridge Warning Tone Settings for a Workspace.  Call Bridge Warning Tone, when enabled, ensures that users hear a warning tone when other users bridge into an active call on the same shared line appearance.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope can be used to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyCallBridgeWarningToneSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        CallBridgePatch callBridgePatch = null;
        api.modifyCallBridgeWarningToneSettingsForAWorkspace(workspaceId, orgId, authorization, callBridgePatch);
        // TODO: test validations
    }

    /**
     * Modify Call Forwarding Settings for a Workspace
     *
     * Modify call forwarding settings for a Workspace.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy, forwards all incoming calls to the destination you chose while the phone is in use or the person is busy.  + When no answer, forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyCallForwardingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ModifyPlaceCallForwardSettings modifyPlaceCallForwardSettings = null;
        api.modifyCallForwardingSettingsForAWorkspace(workspaceId, orgId, authorization, modifyPlaceCallForwardSettings);
        // TODO: test validations
    }

    /**
     * Modify Call Waiting Settings for a Workspace
     *
     * Modify Call Waiting Settings for a Workspace.  Call Waiting allows workspaces to handle multiple simultaneous calls. Workspaces with Call Waiting enabled can place a call on hold to answer or initiate another call.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyCallWaitingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ModifyCallWaiting modifyCallWaiting = null;
        api.modifyCallWaitingSettingsForAWorkspace(workspaceId, orgId, authorization, modifyCallWaiting);
        // TODO: test validations
    }

    /**
     * Modify Device Tags
     *
     * Create, delete or update tags on a device. For your own device, this requires an auth token with the &#x60;spark:devices_write&#x60; scope. An auth token with the &#x60;spark-admin:devices_write&#x60; scope is required to operate on other devices within the organization.  Specify the device ID in the &#x60;deviceId&#x60; parameter in the URI.  Include only the tag array in the request body, no other device attributes can be changed. This action will overwrite any previous tags. A common approach is to first [GET the devices&#39;s details](/docs/api/v1/devices/get-device-details), make changes to the &#x60;tags&#x60; array, and then PATCH the new complete array with this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyDeviceTagsTest() throws ApiException {
        String deviceId = null;
        String orgId = null;
        String authorization = null;
        ModifyDeviceTagsRequest modifyDeviceTagsRequest = null;
        CreateADeviceByMACAddress200Response response = api.modifyDeviceTags(deviceId, orgId, authorization, modifyDeviceTagsRequest);
        // TODO: test validations
    }

    /**
     * Modify Dial Patterns
     *
     * Modify dial patterns for the Dial Plan.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Modifying a dial pattern requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyDialPatternsTest() throws ApiException {
        String dialPlanId = null;
        String orgId = null;
        String authorization = null;
        DialPatternPut dialPatternPut = null;
        api.modifyDialPatterns(dialPlanId, orgId, authorization, dialPatternPut);
        // TODO: test validations
    }

    /**
     * Modify DoNotDisturb Settings for a Workspace
     *
     * Modify DoNotDisturb Settings for a Workspace.  Silence incoming calls with the Do Not Disturb feature. When enabled, callers hear the busy signal.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyDoNotDisturbSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserDoNotDisturbPatch userDoNotDisturbPatch = null;
        api.modifyDoNotDisturbSettingsForAWorkspace(workspaceId, orgId, authorization, userDoNotDisturbPatch);
        // TODO: test validations
    }

    /**
     * Modify Executive Assistant Settings for a Person
     *
     * Modify the executive assistant settings for the specified personId.  People with the executive service enabled, can select from a pool of assistants who have been assigned the executive assistant service and who can answer or place calls on their behalf. Executive assistants can set the call forward destination and join or leave an executive&#39;s pool.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyExecutiveAssistantSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ModifyExecutiveAssistantSettingsForAPersonRequest modifyExecutiveAssistantSettingsForAPersonRequest = null;
        api.modifyExecutiveAssistantSettingsForAPerson(personId, orgId, authorization, modifyExecutiveAssistantSettingsForAPersonRequest);
        // TODO: test validations
    }

    /**
     * Modify Incoming Permission Settings for a Workspace
     *
     * Modify Incoming Permission settings for a Workspace.  Incoming permission settings allow modifying permissions for a workspace that can be different from the organization&#39;s default to manage different call types.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyIncomingPermissionSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserInboundPermissionPatch userInboundPermissionPatch = null;
        api.modifyIncomingPermissionSettingsForAWorkspace(workspaceId, orgId, authorization, userInboundPermissionPatch);
        // TODO: test validations
    }

    /**
     * Modify Location Voicemail Group
     *
     * Modifies the voicemail group location details for a particular location for a customer.  Manage your voicemail settings, like when you want your voicemail to be active, message storage settings, and how you would like to be notified of new voicemail messages.  Modifying the voicemail group location details requires a full, user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyLocationVoicemailGroupTest() throws ApiException {
        String locationId = null;
        String voicemailGroupId = null;
        String orgId = null;
        String authorization = null;
        PutLocationVoicemailGroupObject putLocationVoicemailGroupObject = null;
        api.modifyLocationVoicemailGroup(locationId, voicemailGroupId, orgId, authorization, putLocationVoicemailGroupObject);
        // TODO: test validations
    }

    /**
     * Modify Monitoring Settings for a Workspace
     *
     * Modify Monitoring settings for a Workspace.  Allow workspaces to monitor the line status of specified agents, workspaces, or call park extensions. The line status indicates if a monitored agent or a workspace is on a call, or if a call has been parked on the monitored call park extension.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyMonitoringSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserMonitoringPatch userMonitoringPatch = null;
        api.modifyMonitoringSettingsForAWorkspace(workspaceId, orgId, authorization, userMonitoringPatch);
        // TODO: test validations
    }

    /**
     * Modify Music On Hold Settings for a Workspace
     *
     * Modify music on hold settings for a Workspace.  Music on hold is played when a caller is put on hold, or the call is parked.  To configure music on hold setting for a workspace, music on hold setting must be enabled for this location.  This API requires a full or device administrator or location administrator auth token with the &#x60;spark-admin:telephony_config_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyMusicOnHoldSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PutMusicOnHoldObject putMusicOnHoldObject = null;
        api.modifyMusicOnHoldSettingsForAWorkspace(workspaceId, orgId, authorization, putMusicOnHoldObject);
        // TODO: test validations
    }

    /**
     * Modify Numbers for Route List
     *
     * Modify numbers for a specific Route List of a Customer.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving a Route List requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyNumbersForRouteListTest() throws ApiException {
        String routeListId = null;
        String orgId = null;
        String authorization = null;
        ModifyNumbersForRouteListRequest modifyNumbersForRouteListRequest = null;
        ModifyNumbersForRouteList200Response response = api.modifyNumbersForRouteList(routeListId, orgId, authorization, modifyNumbersForRouteListRequest);
        // TODO: test validations
    }

    /**
     * Modify Outgoing Permission Settings for a Workspace
     *
     * Modify Outgoing Permission settings for a Place.  Turn on outgoing call settings for this workspace to override the calling settings from the location that are used by default.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyOutgoingPermissionSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        UserOutgoingPermissionPatch userOutgoingPermissionPatch = null;
        api.modifyOutgoingPermissionSettingsForAWorkspace(workspaceId, orgId, authorization, userOutgoingPermissionPatch);
        // TODO: test validations
    }

    /**
     * Modify Preferred Answer Endpoint
     *
     * Sets or clears the person’s preferred answer endpoint. To clear the preferred answer endpoint the &#x60;preferredAnswerEndpointId&#x60; attribute must be set to null.&lt;br&gt; This API requires &#x60;spark:telephony_config_write&#x60; or &#x60;spark-admin:telephony_config_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyPreferredAnswerEndpointTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        EndpointIdType endpointIdType = null;
        api.modifyPreferredAnswerEndpoint(personId, orgId, authorization, endpointIdType);
        // TODO: test validations
    }

    /**
     * Modify Priority Alert Criteria for a Workspace
     *
     * Modify Priority Alert Criteria Settings for a Workspace.  The priority alert feature enables administrators to configure priority alert settings for a professional workspace. Priority Alert Criteria (Schedules) can also be set up to alert these phones during certain times of the day or days of the week.  This API requires a full, user, or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyPriorityAlertCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        PlacePriorityAlertCriteriaPatch placePriorityAlertCriteriaPatch = null;
        api.modifyPriorityAlertCriteriaForAWorkspace(workspaceId, id, orgId, authorization, placePriorityAlertCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Privacy Settings for a Workspace
     *
     * Modify Privacy Settings for a Workspace.  The privacy feature enables the Workspaces line to be monitored by others and determine if they can be reached by Auto Attendant services.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyPrivacySettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PrivacyPatch privacyPatch = null;
        api.modifyPrivacySettingsForAWorkspace(workspaceId, orgId, authorization, privacyPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Accept Criteria for a Workspace
     *
     * Modify Selective Accept Criteria Settings for a Workspace.  With the Selective Accept feature, you can accept calls at specific times from specific callers Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveAcceptCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveAcceptCallCriteriaPatch placeSelectiveAcceptCallCriteriaPatch = null;
        api.modifySelectiveAcceptCriteriaForAWorkspace(workspaceId, id, orgId, authorization, placeSelectiveAcceptCallCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Accept Settings for a Workspace
     *
     * Modify Selective Accept Settings for a Workspace.  With the Selective Accept feature, you can accept calls at specific times from specific callers. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveAcceptSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SelectiveAcceptCallSettingPatch selectiveAcceptCallSettingPatch = null;
        api.modifySelectiveAcceptSettingsForAWorkspace(workspaceId, orgId, authorization, selectiveAcceptCallSettingPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Forward Criteria for a Workspace
     *
     * Modify Selective Forward Call Criteria Settings for a Workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveForwardCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveForwardCallCriteriaPatch placeSelectiveForwardCallCriteriaPatch = null;
        api.modifySelectiveForwardCriteriaForAWorkspace(workspaceId, id, orgId, authorization, placeSelectiveForwardCallCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Forward Settings for a Workspace
     *
     * Modify Selective Forward Call Settings for a Workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveForwardSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SelectiveForwardCallSettingPatch selectiveForwardCallSettingPatch = null;
        api.modifySelectiveForwardSettingsForAWorkspace(workspaceId, orgId, authorization, selectiveForwardCallSettingPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Reject Criteria for a Workspace
     *
     * Modify Selective Reject Criteria Settings for a Workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveRejectCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        PlaceSelectiveRejectCallCriteriaPatch placeSelectiveRejectCallCriteriaPatch = null;
        api.modifySelectiveRejectCriteriaForAWorkspace(workspaceId, id, orgId, authorization, placeSelectiveRejectCallCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Selective Reject Settings for a Workspace
     *
     * Modify Selective Reject Settings for a Workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelectiveRejectSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SelectiveRejectCallSettingPatch selectiveRejectCallSettingPatch = null;
        api.modifySelectiveRejectSettingsForAWorkspace(workspaceId, orgId, authorization, selectiveRejectCallSettingPatch);
        // TODO: test validations
    }

    /**
     * Modify Sequential Ring Criteria for a Workspace
     *
     * Modify sequential ring criteria for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another. The sequential ring criteria specify settings such as schedule and incoming numbers for which to sequentially ring or not.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySequentialRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        SequentialRingCriteriaPatch sequentialRingCriteriaPatch = null;
        api.modifySequentialRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization, sequentialRingCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Sequential Ring Settings for a Workspace
     *
     * Modify sequential ring settings for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySequentialRingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SequentialRingPatch sequentialRingPatch = null;
        api.modifySequentialRingSettingsForAWorkspace(workspaceId, orgId, authorization, sequentialRingPatch);
        // TODO: test validations
    }

    /**
     * Modify Simultaneous Ring Criteria for a Workspace
     *
     * Modify Simultaneous Ring Criteria Settings for a Workspace.  The Simultaneous Ring feature allows you to configure your office phone and other phones of your choice to ring simultaneously. Simultaneous Ring Criteria (Schedules) can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySimultaneousRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        PlaceSimultaneousRingCriteriaPatch placeSimultaneousRingCriteriaPatch = null;
        api.modifySimultaneousRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization, placeSimultaneousRingCriteriaPatch);
        // TODO: test validations
    }

    /**
     * Modify Simultaneous Ring Settings for a Workspace
     *
     * Modify Simultaneous Ring Settings for a Workspace.  The Simultaneous Ring feature allows you to configure the workspace phones of your choice to ring simultaneously. Schedules can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, user or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with a scope of &#x60;spark:workspaces_write&#x60; to update workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySimultaneousRingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        SimultaneousRingPatch simultaneousRingPatch = null;
        api.modifySimultaneousRingSettingsForAWorkspace(workspaceId, orgId, authorization, simultaneousRingPatch);
        // TODO: test validations
    }

    /**
     * Modify the Internal Dialing configuration for a location
     *
     * Modify current configuration for routing unknown extensions to the premise as internal calls  If some users in a location are registered to a PBX, enable the setting to route unknown extensions (digits that match the extension length) to the PBX.  Editing the internal dialing configuration requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyTheInternalDialingConfigurationForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        InternalDialingPut internalDialingPut = null;
        api.modifyTheInternalDialingConfigurationForALocation(locationId, orgId, authorization, internalDialingPut);
        // TODO: test validations
    }

    /**
     * Modify Transfer Numbers Settings for a Workspace
     *
     * Modify Transfer Numbers Settings for a place.  When calling a specific call type, this workspace will be automatically transferred to another number. The person assigned the Auto Transfer Number can then approve the call and send it through or reject the call type. You can add up to 3 numbers.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:workspaces_write&#x60; scope or a user auth token with &#x60;spark:workspaces_write&#x60; scope can be used to update workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyTransferNumbersSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        TransferNumberPatch transferNumberPatch = null;
        api.modifyTransferNumbersSettingsForAWorkspace(workspaceId, orgId, authorization, transferNumberPatch);
        // TODO: test validations
    }

    /**
     * Modify Voicemail Passcode for a Workspace
     *
     * Modify voicemail passcode for a workspace.  Modifying the voicemail passcode for a workspace requires a full administrator, device administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyVoicemailPasscodeForAWorkspaceTest() throws ApiException {
        String placeId = null;
        String orgId = null;
        String authorization = null;
        ModifyAPersonSVoicemailPasscodeRequest modifyAPersonSVoicemailPasscodeRequest = null;
        api.modifyVoicemailPasscodeForAWorkspace(placeId, orgId, authorization, modifyAPersonSVoicemailPasscodeRequest);
        // TODO: test validations
    }

    /**
     * Park
     *
     * Park a connected call. The number field in the response can be used as the destination for the retrieve command to retrieve the parked call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void parkTest() throws ApiException {
        String authorization = null;
        ParkRequest parkRequest = null;
        Park200Response response = api.park(authorization, parkRequest);
        // TODO: test validations
    }

    /**
     * Pause Recording
     *
     * Pause recording on a call. Use of this API is only valid when a call is being recorded and the user&#39;s call recording mode is set to \&quot;On Demand\&quot; or \&quot;Always with Pause/Resume\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseRecordingTest() throws ApiException {
        String authorization = null;
        PauseRecordingRequest pauseRecordingRequest = null;
        api.pauseRecording(authorization, pauseRecordingRequest);
        // TODO: test validations
    }

    /**
     * Pause the Manage Numbers Job
     *
     * Pause the running Manage Numbers Job. A paused job can be resumed.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseTheManageNumbersJobTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String authorization = null;
        api.pauseTheManageNumbersJob(jobId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Pause the Move Users Job
     *
     * Pause the running Move Users Job. A paused job can be resumed.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseTheMoveUsersJobTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String authorization = null;
        api.pauseTheMoveUsersJob(jobId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Pickup
     *
     * Picks up an incoming call to another user. A new call is initiated to perform the pickup in a similar manner to the dial command. When target is not present, the API pickups up a call from the user&#39;s call pickup group. When target is present, the API pickups an incoming call from the specified target user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupTest() throws ApiException {
        String authorization = null;
        PickupRequest pickupRequest = null;
        Retrieve201Response response = api.pickup(authorization, pickupRequest);
        // TODO: test validations
    }

    /**
     * Precheck a Broadworks Subscriber Provisioning
     *
     * Verify the likely success of provisioning a broadworks subscriber.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; The Prerequisite for using this API is to have at least one Broadworks Cluster configured against partner using Partner Hub. The Provisioning Precheck APIs supports two variants of Broadworks Provisioning Precheck Requests. Please refer to [Using the Provisioning Precheck API](/docs/api/guides/webex-for-broadworks-developers-guide#using-the-precheck-provisioning-api) section in [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information. &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void precheckABroadworksSubscriberProvisioningTest() throws ApiException {
        String authorization = null;
        PrecheckABroadworksSubscriberProvisioningRequest precheckABroadworksSubscriberProvisioningRequest = null;
        PrecheckABroadworksSubscriberProvisioning200Response response = api.precheckABroadworksSubscriberProvisioning(authorization, precheckABroadworksSubscriberProvisioningRequest);
        // TODO: test validations
    }

    /**
     * Precheck a Wholesale Customer Provisioning
     *
     * This API will allow the Partner sales team to verify likely success of provisioning a Wholesale customer.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; The Prerequisite for using this API is to have &#x60;wxc-wholesale&#x60; entitlement or &#x60;webex-wholesale-partner-testing&#x60; setting enabled for the Partner Organization. The Provisioning Precheck APIs supports two variants of Wholesale Customer Provisioning Precheck Requests. Please refer to [Using the Provisioning Precheck APIs](/docs/api/guides/webex-for-wholesale#using-the-precheck-provisioning-api) section in [Webex for Wholesale](/docs/api/guides/webex-for-wholesale) guide for more information. &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void precheckAWholesaleCustomerProvisioningTest() throws ApiException {
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        PrecheckAWholesaleCustomerProvisioningRequest precheckAWholesaleCustomerProvisioningRequest = null;
        PrecheckAWholesaleCustomerProvisioning200Response response = api.precheckAWholesaleCustomerProvisioning(onBehalfOfSubPartnerOrgId, authorization, precheckAWholesaleCustomerProvisioningRequest);
        // TODO: test validations
    }

    /**
     * Precheck a Wholesale Subscriber Provisioning
     *
     * This API will allow the Partner sales team to verify likely success of provisioning a wholesale subscriber.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; The Prerequisite for using this API is to have &#x60;wxc-wholesale&#x60; entitlement or &#x60;webex-wholesale-partner-testing&#x60; setting enabled for the Partner Organization. The Provisioning Precheck APIs supports three variants of Wholesale Subscriber Provisioning Precheck Requests. Please refer to [Using the Provisioning Precheck API](/docs/api/guides/webex-for-wholesale#using-the-precheck-provisioning-api) section in [Webex for Wholesale](/docs/api/guides/webex-for-wholesale) guide for more information. &lt;/Callout&gt; &lt;/div&gt;  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; Either &#x60;packages&#x60; or &#x60;package&#x60; field is required but not both. &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void precheckAWholesaleSubscriberProvisioningTest() throws ApiException {
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        PrecheckAWholesaleSubscriberProvisioningRequest precheckAWholesaleSubscriberProvisioningRequest = null;
        PrecheckAWholesaleCustomerProvisioning200Response response = api.precheckAWholesaleSubscriberProvisioning(onBehalfOfSubPartnerOrgId, authorization, precheckAWholesaleSubscriberProvisioningRequest);
        // TODO: test validations
    }

    /**
     * Provision a BroadWorks Subscriber
     *
     * Provision a new BroadWorks subscriber for Webex services.  This API lets a Service Provider map a BroadWorks subscriber to a new or existing Webex user and assign the required licenses and entitlements for Webex and Meetings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionABroadWorksSubscriberTest() throws ApiException {
        String authorization = null;
        ProvisionABroadWorksSubscriberRequest provisionABroadWorksSubscriberRequest = null;
        ProvisionABroadWorksSubscriber200Response response = api.provisionABroadWorksSubscriber(authorization, provisionABroadWorksSubscriberRequest);
        // TODO: test validations
    }

    /**
     * Provision a BroadWorks Workspace
     *
     * Provision a new BroadWorks workspace for Cisco Webex services.  This API allows a Service Provider to provision a workspace for an existing customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionABroadWorksWorkspaceTest() throws ApiException {
        String authorization = null;
        ProvisionABroadWorksWorkspaceRequest provisionABroadWorksWorkspaceRequest = null;
        ProvisionABroadWorksWorkspace200Response response = api.provisionABroadWorksWorkspace(authorization, provisionABroadWorksWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Provision a Wholesale Customer
     *
     * Provision a Wholesale customer for Cisco Webex services.  This API will allow a Service Provider to map the Wholesale customer and assign the required licenses and entitlements for Webex, Calling and Meetings.  The Wholesale customer provisioning is asynchronous and thus a background task is created when this endpoint is invoked.  &lt;div&gt;         &lt;Callout type&#x3D;&#39;info&#39;&gt;After successful invocation of this endpoint a URL will be returned in the &#x60;Location&#x60; header, which will point to the [Get a Wholesale Customer](/docs/api/v1/wholesale-provisioning/get-a-wholesale-customer) endpoint for this customer.&lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionAWholesaleCustomerTest() throws ApiException {
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        ProvisionAWholesaleCustomerRequest provisionAWholesaleCustomerRequest = null;
        ProvisionAWholesaleCustomer202Response response = api.provisionAWholesaleCustomer(onBehalfOfSubPartnerOrgId, authorization, provisionAWholesaleCustomerRequest);
        // TODO: test validations
    }

    /**
     * Provision a Wholesale Subscriber
     *
     * Provision a new Wholesale subscriber for Cisco Webex services.  This API allows a Service Provider to map the Wholesale subscriber to a Cisco Webex Wholesale customer and assign the required licenses and entitlements for Webex, Calling and Meetings.  **Note:**  * If this subscriber is an existing Webex Calling entitled user, the &#x60;locationId&#x60;, &#x60;primaryPhoneNumber&#x60; and &#x60;extension&#x60; are optional and if provided are ignored.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; Either &#x60;packages&#x60; or &#x60;package&#x60; field is required but not both. &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionAWholesaleSubscriberTest() throws ApiException {
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        ProvisionAWholesaleSubscriberRequest provisionAWholesaleSubscriberRequest = null;
        ProvisionAWholesaleSubscriber200Response response = api.provisionAWholesaleSubscriber(onBehalfOfSubPartnerOrgId, authorization, provisionAWholesaleSubscriberRequest);
        // TODO: test validations
    }

    /**
     * Push
     *
     * Pushes a call from the assistant to the executive the call is associated with. Use of this API is only valid when the assistant&#39;s call is associated with an executive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushTest() throws ApiException {
        String authorization = null;
        PushRequest pushRequest = null;
        api.push(authorization, pushRequest);
        // TODO: test validations
    }

    /**
     * Put Location Intercept
     *
     * Modifies the intercept location details for a customer location.  Intercept incoming or outgoing calls for users in your organization. If this is enabled, calls are either routed to a designated number the user chooses, or to the user&#39;s voicemail.  Modifying the intercept location details requires a full, user administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLocationInterceptTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutLocationInterceptObject putLocationInterceptObject = null;
        api.putLocationIntercept(locationId, orgId, authorization, putLocationInterceptObject);
        // TODO: test validations
    }

    /**
     * Put Outgoing Permission Auto Transfer Number
     *
     * Modifies the transfer numbers for the outbound permission in a location.  Outbound permissions can specify which transfer number an outbound call should transfer to via the &#x60;action&#x60; field.  Updating auto transfer number requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOutgoingPermissionAutoTransferNumberTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutAutoTransferNumberObject putAutoTransferNumberObject = null;
        api.putOutgoingPermissionAutoTransferNumber(locationId, orgId, authorization, putAutoTransferNumberObject);
        // TODO: test validations
    }

    /**
     * Put Shared-Line Appearance Members
     *
     * Add or modify primary and secondary users assigned to shared-lines on a Webex Calling Apps Desktop device.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSharedLineAppearanceMembersTest() throws ApiException {
        String personId = null;
        String applicationId = null;
        String authorization = null;
        PutSharedLineMemberList putSharedLineMemberList = null;
        api.putSharedLineAppearanceMembers(personId, applicationId, authorization, putSharedLineMemberList);
        // TODO: test validations
    }

    /**
     * Read a Route Group for a Organization
     *
     * Reads a Route Group for the organization based on id.  A Route Group is a collection of trunks that allows further scale and redundancy with the connection to the premises. Route groups can include up to 10 trunks from different locations.  Reading a Route Group requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readARouteGroupForAOrganizationTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String authorization = null;
        RouteGroupGet response = api.readARouteGroupForAOrganization(routeGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Barge In Settings for a Person
     *
     * Retrieve a person&#39;s Barge In settings.  The Barge In feature enables you to use a Feature Access Code (FAC) to answer a call that was directed to another subscriber, or barge-in on the call if it was already answered. Barge In can be used across locations.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60; or a user auth token with &#x60;spark:people_read&#x60; scope can be used by a person to read their own settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readBargeInSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadBargeInSettingsForAPerson200Response response = api.readBargeInSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Barge In Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s barge in settings.  The Barge In feature enables you to use a Feature Access Code (FAC) to answer a call that was directed to another subscriber, or barge-in on the call if it was already answered. Barge In can be used across locations.  Retrieving the barge in settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readBargeInSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadBargeInSettingsForAVirtualLine200Response response = api.readBargeInSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Bridge Settings for a Person
     *
     * Retrieve a person&#39;s Call Bridge settings.  This API requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallBridgeSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallBridgeSettingsForAPerson200Response response = api.readCallBridgeSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Bridge Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s call bridge settings.  Retrieving the call bridge settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallBridgeSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallBridgeSettingsForAVirtualLine200Response response = api.readCallBridgeSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Forwarding Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s Call Forwarding settings.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy - forwards all incoming calls to the destination you chose while the phone is in use or the virtual line is busy.  + When no answer - forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  Retrieving the call forwarding settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallForwardingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallForwardingSettingsForAVirtualLine200Response response = api.readCallForwardingSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Intercept Settings for a Person
     *
     * Retrieves Person&#39;s Call Intercept settings.  The intercept feature gracefully takes a person&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified person are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallInterceptSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallInterceptSettingsForAPerson200Response response = api.readCallInterceptSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Intercept Settings for a Virtual Line
     *
     * Retrieves Virtual Line&#39;s Call Intercept settings.  The intercept feature gracefully takes a virtual line&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified virtual line are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  Retrieving the intercept settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallInterceptSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallInterceptSettingsForAVirtualLine200Response response = api.readCallInterceptSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Intercept Settings for a Workspace
     *
     * Retrieves Workspace&#39;s Call Intercept Settings  The intercept feature gracefully takes a workspace&#39;s phone out of service, while providing callers with informative announcements and alternative routing options. Depending on the service configuration, none, some, or all incoming calls to the specified workspace are intercepted. Also depending on the service configuration, outgoing calls are intercepted or rerouted to another location.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallInterceptSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadCallInterceptSettingsForAWorkspace200Response response = api.readCallInterceptSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Policy Settings for a Workspace
     *
     * Retrieve a workspace Call Policies settings.  The call policy feature enables administrator to configure call policy settings such as Connected Line Identification Privacy on Redirected Calls for a professional workspace.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; scope can be used to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallPolicySettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadCallPolicySettingsForAWorkspace200Response response = api.readCallPolicySettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Recording Settings for a Person
     *
     * Retrieve a person&#39;s Call Recording settings.  The Call Recording feature provides a hosted mechanism to record the calls placed and received on the Carrier platform for replay and archival. This feature is helpful for quality assurance, security, training, and more.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;A person with a Webex Calling Standard license is eligible for the Call Recording feature only when the Call Recording vendor is Webex.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallRecordingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallRecordingSettingsForAPerson200Response response = api.readCallRecordingSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Recording Settings for a Virtual Line
     *
     * Retrieve Virtual Line&#39;s Call Recording settings.  The Call Recording feature provides a hosted mechanism to record the calls placed and received on the Carrier platform for replay and archival. This feature is helpful for quality assurance, security, training, and more.  This API requires a full or user administrator auth token with the &#x60;spark-admin:telephony_config_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallRecordingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallRecordingSettingsForAVirtualLine200Response response = api.readCallRecordingSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Waiting Settings for a Person
     *
     * Retrieve a person&#39;s Call Waiting settings.  With this feature, a person can place an active call on hold and answer an incoming call.  When enabled, while you are on an active call, a tone alerts you of an incoming call and you can choose to answer or ignore the call.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallWaitingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallWaitingSettingsForAPerson200Response response = api.readCallWaitingSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Call Waiting Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s Call Waiting settings.  With this feature, a virtual line can place an active call on hold and answer an incoming call.  When enabled, while you are on an active call, a tone alerts you of an incoming call and you can choose to answer or ignore the call.  Retrieving the call waiting settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallWaitingSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallWaitingSettingsForAPerson200Response response = api.readCallWaitingSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Caller ID Settings for a Person
     *
     * Retrieve a person&#39;s Caller ID settings.  Caller ID settings control how a person&#39;s information is displayed when making outgoing calls.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallerIDSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadCallerIDSettingsForAPerson200Response response = api.readCallerIDSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Caller ID Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s Caller ID settings.  Caller ID settings control how a virtual line&#39;s information is displayed when making outgoing calls.  Retrieving the caller ID settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallerIDSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadCallerIDSettingsForAVirtualLine200Response response = api.readCallerIDSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Caller ID Settings for a Workspace
     *
     * Retrieve a workspace&#39;s Caller ID settings.  Caller ID settings control how a workspace&#39;s information is displayed when making outgoing calls.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readCallerIDSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadCallerIDSettingsForAWorkspace200Response response = api.readCallerIDSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Do Not Disturb Settings for a Person
     *
     * Retrieve a person&#39;s Do Not Disturb settings.  When enabled, this feature will give all incoming calls the busy treatment. Optionally, you can enable a Ring Reminder to play a brief tone on your desktop phone when you receive incoming calls.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60; or a user auth token with &#x60;spark:people_read&#x60; scope can be used by a person to read their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDoNotDisturbSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadDoNotDisturbSettingsForAPerson200Response response = api.readDoNotDisturbSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Forwarding Settings for a Person
     *
     * Retrieve a person&#39;s Call Forwarding settings.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy - forwards all incoming calls to the destination you chose while the phone is in use or the person is busy.  + When no answer - forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60; or a user auth token with &#x60;spark:people_read&#x60; scope can be used by a person to read their own settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readForwardingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadForwardingSettingsForAPerson200Response response = api.readForwardingSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Hoteling Settings for a Person
     *
     * Retrieve a person&#39;s hoteling settings.  As an administrator, you can enable hoteling for people so that their phone profile (phone number, features, and calling plan) is temporarily loaded onto a shared (host) phone.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readHotelingSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadHotelingSettingsForAPerson200Response response = api.readHotelingSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Incoming Permission Settings for a Person
     *
     * Retrieve a person&#39;s Incoming Permission settings.  You can change the incoming calling permissions for a person if you want them to be different from your organization&#39;s default.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readIncomingPermissionSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadIncomingPermissionSettingsForAPerson200Response response = api.readIncomingPermissionSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Incoming Permission Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s Incoming Permission settings.  You can change the incoming calling permissions for a virtual line if you want them to be different from your organization&#39;s default.  Retrieving the incoming permission settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readIncomingPermissionSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadIncomingPermissionSettingsForAVirtualLine200Response response = api.readIncomingPermissionSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Person&#39;s Calling Behavior
     *
     * Retrieves the calling behavior and UC Manager Profile settings for the person which includes overall calling behavior and calling UC Manager Profile ID.  Webex Calling Behavior controls which Webex telephony application and which UC Manager Profile is to be used for a person.  An organization has an organization-wide default Calling Behavior that may be overridden for individual persons.  UC Manager Profiles are applicable if your organization uses Jabber in Team Messaging mode or Calling in Webex (Unified CM).  The UC Manager Profile also has an organization-wide default and may be overridden for individual persons.  This API requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPersonsCallingBehaviorTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadPersonSCallingBehavior200Response response = api.readPersonsCallingBehavior(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Push-to-Talk Settings for a Person
     *
     * Retrieve a person&#39;s Push-to-Talk settings.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people in different parts of your organization.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPushToTalkSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadPushToTalkSettingsForAPerson200Response response = api.readPushToTalkSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Push-to-Talk Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s Push-to-Talk settings.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people in different parts of your organization.  Retrieving the Push-to-Talk settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPushToTalkSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadPushToTalkSettingsForAPerson200Response response = api.readPushToTalkSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Push-to-Talk Settings for a Workspace
     *
     * Retrieve Push-to-Talk settings for a workspace.  Push-to-Talk allows the use of desk phones as either a one-way or two-way intercom that connects people/workspaces in different parts of your organization.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; scope can be used to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPushToTalkSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadPushToTalkSettingsForAWorkspace200Response response = api.readPushToTalkSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Receptionist Client Settings for a Person
     *
     * Retrieve a person&#39;s Receptionist Client settings.  To help support the needs of your front-office personnel, you can set up people, workspaces or virtual lines as telephone attendants so that they can screen all incoming calls to certain numbers within your organization.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readReceptionistClientSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadReceptionistClientSettingsForAPerson200Response response = api.readReceptionistClientSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read the Call to Extension Locations of a Routing Group
     *
     * List \&quot;Call to\&quot; on-premises Extension Locations for a specific route group. Users within these locations are registered to a PBX which allows you to route unknown extensions (calling number length of 2-6 digits) to the PBX using an existing trunk or route group.  Retrieving this location list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheCallToExtensionLocationsOfARoutingGroupTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String locationName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        GetLocationsUsingTheLocalGatewayAsPSTNConnectionRouting200Response response = api.readTheCallToExtensionLocationsOfARoutingGroup(routeGroupId, orgId, locationName, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the Dial Plan Locations of a Routing Group
     *
     * List Dial Plan Locations for a specific route group.  Dial Plans allow you to route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A Dial Plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Retrieving this location list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheDialPlanLocationsOfARoutingGroupTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String locationName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        GetLocationsUsingTheLocalGatewayAsPSTNConnectionRouting200Response response = api.readTheDialPlanLocationsOfARoutingGroup(routeGroupId, orgId, locationName, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the Internal Dialing configuration for a location
     *
     * Get current configuration for routing unknown extensions to the Premises as internal calls  If some users in a location are registered to a PBX, retrieve the setting to route unknown extensions (digits that match the extension length) to the PBX.  Retrieving the internal dialing configuration requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheInternalDialingConfigurationForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        ReadTheInternalDialingConfigurationForALocation200Response response = api.readTheInternalDialingConfigurationForALocation(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Announcement Languages
     *
     * List all languages supported by Webex Calling for announcements and voice prompts.  Retrieving announcement languages requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfAnnouncementLanguagesTest() throws ApiException {
        String authorization = null;
        ReadTheListOfAnnouncementLanguages200Response response = api.readTheListOfAnnouncementLanguages(authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Auto Attendants
     *
     * List all Auto Attendants for the organization.  Auto attendants play customized prompts and provide callers with menu options for routing their calls through your system.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfAutoAttendantsTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String authorization = null;
        ReadTheListOfAutoAttendants200Response response = api.readTheListOfAutoAttendants(orgId, locationId, max, start, name, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Call Park Extensions
     *
     * List all Call Park Extensions for the organization.  The Call Park service, enabled for all users by default, allows a user to park a call against an available user&#39;s extension or to a Call Park Extension. Call Park Extensions are extensions defined within the Call Park service for holding parked calls.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfCallParkExtensionsTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String extension = null;
        String locationName = null;
        String name = null;
        String order = null;
        String authorization = null;
        ReadTheListOfCallParkExtensions200Response response = api.readTheListOfCallParkExtensions(orgId, locationId, max, start, extension, locationName, name, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Call Parks
     *
     * List all Call Parks for the organization.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Park ID will change upon modification of the Call Park name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfCallParksTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String name = null;
        String authorization = null;
        ReadTheListOfCallParks200Response response = api.readTheListOfCallParks(locationId, orgId, max, start, order, name, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Call Pickups
     *
     * List all Call Pickups for the organization.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  **NOTE**: The Call Pickup ID will change upon modification of the Call Pickup name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfCallPickupsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String name = null;
        String authorization = null;
        ReadTheListOfCallPickups200Response response = api.readTheListOfCallPickups(locationId, orgId, max, start, order, name, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Call Queue Announcement Files
     *
     * List file info for all Call Queue announcement files associated with this Call Queue.  Call Queue announcement files contain messages and music that callers hear while waiting in the queue. A call queue can be configured to play whatever subset of these announcement files is desired.  Retrieving this list of files requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.  Note that uploading of announcement files via API is not currently supported, but is available via Webex Control Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfCallQueueAnnouncementFilesTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        ReadTheListOfCallQueueAnnouncementFiles200Response response = api.readTheListOfCallQueueAnnouncementFiles(locationId, queueId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Call Queues
     *
     * List all Call Queues for the organization.  Call queues temporarily hold calls in the cloud when all agents, which can be users or agents, assigned to receive calls from the queue are unavailable. Queued calls are routed to an available agent when not on an active call. Each call queue is assigned a Lead Number, which is a telephone number outside callers can dial to reach users assigned to the call queue. Call queues are also assigned an internal extension, which can be dialed internally to reach users assigned to the call queue.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfCallQueuesTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String authorization = null;
        ReadTheListOfCallQueues200Response response = api.readTheListOfCallQueues(orgId, locationId, max, start, name, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Dial Plans
     *
     * List all Dial Plans for the organization.  Dial plans route calls to on-premises destinations by use of the trunks or route groups with which the dial plan is associated. Multiple dial patterns can be defined as part of your dial plan.  Dial plans are configured globally for an enterprise and apply to all users, regardless of location.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfDialPlansTest() throws ApiException {
        String orgId = null;
        String dialPlanName = null;
        String routeGroupName = null;
        String trunkName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        ReadTheListOfDialPlans200Response response = api.readTheListOfDialPlans(orgId, dialPlanName, routeGroupName, trunkName, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Hunt Groups
     *
     * List all calling Hunt Groups for the organization.  Hunt groups can route incoming calls to a group of people or workspaces. You can even configure a pattern to route to a whole group.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfHuntGroupsTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String phoneNumber = null;
        String authorization = null;
        ReadTheListOfHuntGroups200Response response = api.readTheListOfHuntGroups(orgId, locationId, max, start, name, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Paging Groups
     *
     * List all Paging Groups for the organization.  Group Paging allows a person to place a one-way call or group page to up to 75 people and/or workspaces by dialing a number or extension assigned to a specific paging group. The Group Paging service makes a simultaneous call to all the assigned targets.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfPagingGroupsTest() throws ApiException {
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String locationId = null;
        String name = null;
        String phoneNumber = null;
        String authorization = null;
        ReadTheListOfPagingGroups200Response response = api.readTheListOfPagingGroups(orgId, max, start, locationId, name, phoneNumber, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Route Lists
     *
     * List all Route Lists for the organization.  A Route List is a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving the Route List requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfRouteListsTest() throws ApiException {
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String order = null;
        String name = null;
        String locationId = null;
        String authorization = null;
        ReadTheListOfRouteLists200Response response = api.readTheListOfRouteLists(orgId, start, max, order, name, locationId, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Routing Groups
     *
     * List all Route Groups for an organization. A Route Group is a group of trunks that allows further scale and redundancy with the connection to the premises.  Retrieving this route group list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfRoutingGroupsTest() throws ApiException {
        String orgId = null;
        String name = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        ReadTheListOfRoutingGroups200Response response = api.readTheListOfRoutingGroups(orgId, name, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Schedules
     *
     * List all schedules for the given location of the organization.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Retrieving this list requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfSchedulesTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String name = null;
        String type = null;
        String authorization = null;
        ReadTheListOfSchedules200Response response = api.readTheListOfSchedules(locationId, orgId, max, start, name, type, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Trunk Types
     *
     * List all Trunk Types with Device Types for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group which is a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy. Trunk Types are Registering or Certificate Based and are configured in Call Manager.  Retrieving trunk types requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfTrunkTypesTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        ReadTheListOfTrunkTypes200Response response = api.readTheListOfTrunkTypes(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Trunks
     *
     * List all Trunks for the organization.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group - a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfTrunksTest() throws ApiException {
        String orgId = null;
        String name = null;
        String locationName = null;
        String trunkType = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        ReadTheListOfTrunks200Response response = api.readTheListOfTrunks(orgId, name, locationName, trunkType, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of UC Manager Profiles
     *
     * List all calling UC Manager Profiles for the organization.  UC Manager Profiles are applicable if your organization uses Jabber in Team Messaging mode or Calling in Webex (Unified CM).  The UC Manager Profile has an organization-wide default and may be overridden for individual persons, although currently only setting at a user level is supported by Webex APIs.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60; as this API is designed to be used in conjunction with calling behavior at the user level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfUCManagerProfilesTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        ReadTheListOfUCManagerProfiles200Response response = api.readTheListOfUCManagerProfiles(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read the List of Virtual Lines
     *
     * List all Virtual Lines for the organization.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheListOfVirtualLinesTest() throws ApiException {
        String orgId = null;
        String locationId = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String id = null;
        String ownerName = null;
        String phoneNumber = null;
        String locationName = null;
        String order = null;
        Boolean hasDeviceAssigned = null;
        Boolean hasExtensionAssigned = null;
        Boolean hasDnAssigned = null;
        String authorization = null;
        ReadTheListOfVirtualLines200Response response = api.readTheListOfVirtualLines(orgId, locationId, max, start, id, ownerName, phoneNumber, locationName, order, hasDeviceAssigned, hasExtensionAssigned, hasDnAssigned, authorization);
        // TODO: test validations
    }

    /**
     * Read the PSTN Connection Locations of a Routing Group
     *
     * List PSTN Connection Locations for a specific route group. This solution lets you configure users to use Cloud PSTN (CCP or Cisco PSTN) or Premises-based PSTN.  Retrieving this Location list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readThePSTNConnectionLocationsOfARoutingGroupTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String locationName = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        GetLocationsUsingTheLocalGatewayAsPSTNConnectionRouting200Response response = api.readThePSTNConnectionLocationsOfARoutingGroup(routeGroupId, orgId, locationName, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the Route Lists of a Routing Group
     *
     * List Route Lists for a specific route group. Route Lists are a list of numbers that can be reached via a Route Group. It can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving this list of Route Lists requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheRouteListsOfARoutingGroupTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String name = null;
        BigDecimal max = null;
        BigDecimal start = null;
        String order = null;
        String authorization = null;
        ReadTheRouteListsOfARoutingGroup200Response response = api.readTheRouteListsOfARoutingGroup(routeGroupId, orgId, name, max, start, order, authorization);
        // TODO: test validations
    }

    /**
     * Read the Usage of a Routing Group
     *
     * List the number of \&quot;Call to\&quot; on-premises Extensions, Dial Plans, PSTN Connections, and Route Lists used by a specific Route Group. Users within Call to Extension locations are registered to a PBX which allows you to route unknown extensions (calling number length of 2-6 digits) to the PBX using an existing Trunk or Route Group. PSTN Connections may be a Cisco PSTN, a cloud-connected PSTN, or a premises-based PSTN (local gateway). Dial Plans allow you to route calls to on-premises extensions via your trunk or route group. Route Lists are a list of numbers that can be reached via a route group and can be used to provide cloud PSTN connectivity to Webex Calling Dedicated Instance.  Retrieving usage information requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readTheUsageOfARoutingGroupTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String authorization = null;
        ReadTheUsageOfARoutingGroup200Response response = api.readTheUsageOfARoutingGroup(routeGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Voicemail Settings for a Person
     *
     * Retrieve a person&#39;s Voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail. Voicemail audio is sent in Waveform Audio File Format, &#x60;.wav&#x60;, format.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60; or a user auth token with &#x60;spark:people_read&#x60; scope can be used by a person to read their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readVoicemailSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        ReadVoicemailSettingsForAPerson200Response response = api.readVoicemailSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Voicemail Settings for a Virtual Line
     *
     * Retrieve a virtual line&#39;s voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via voicemail.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  Retrieving the voicemail settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readVoicemailSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        ReadVoicemailSettingsForAVirtualLine200Response response = api.readVoicemailSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Read Voicemail Settings for a Workspace
     *
     * Retrieve a workspace Voicemail settings.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail. Voicemail audio is sent in Waveform Audio File Format, &#x60;.wav&#x60;, format.  Optionally, notifications can be sent to a mobile phone via text or email. These notifications will not include the voicemail files.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; scope can be used to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readVoicemailSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        ReadVoicemailSettingsForAWorkspace200Response response = api.readVoicemailSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Reassign Recordings
     *
     * Reassigns recordings to a new user. As an administrator, you can reassign a list of recordings or all recordings of a particular user to a new user. The recordings can belong to an org user, a virtual line, or a workspace, but the destination user should only be a valid org user.  * Either &#x60;ownerEmail&#x60; or &#x60;recordingIds&#x60; or both must be provided.  * If &#x60;recordingIds&#x60; is empty but &#x60;ownerEmail&#x60; is provided, all recordings owned by the &#x60;ownerEmail&#x60; are reassigned to &#x60;reassignOwnerEmail&#x60;.  * If &#x60;recordingIds&#x60; is provided and &#x60;ownerEmail&#x60; is also provided, only the recordings specified by &#x60;recordingIds&#x60; that are owned by &#x60;ownerEmail&#x60; are reassigned to &#x60;reassignOwnerEmail&#x60;.  * If &#x60;ownerEmail&#x60; is empty but &#x60;recordingIds&#x60; is provided, the recordings specified by &#x60;recordingIds&#x60; are reassigned to &#x60;reassignOwnerEmail&#x60; regardless of the current owner.  The &#x60;spark-admin:recordings_write&#x60; scope is required to reassign recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reassignRecordingsTest() throws ApiException {
        String authorization = null;
        ReassignRecordingsRequest reassignRecordingsRequest = null;
        api.reassignRecordings(authorization, reassignRecordingsRequest);
        // TODO: test validations
    }

    /**
     * Reject
     *
     * Reject an unanswered incoming call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectTest() throws ApiException {
        String authorization = null;
        RejectRequest rejectRequest = null;
        api.reject(authorization, rejectRequest);
        // TODO: test validations
    }

    /**
     * Remove a BroadWorks Subscriber
     *
     * This API will allow a Service Provider to remove the mapping between a BroadWorks Subscriber and Webex user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeABroadWorksSubscriberTest() throws ApiException {
        String subscriberId = null;
        String authorization = null;
        api.removeABroadWorksSubscriber(subscriberId, authorization);
        // TODO: test validations
    }

    /**
     * Remove a BroadWorks Workspace
     *
     * Remove the mapping between a BroadWorks workspace and Cisco Webex device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeABroadWorksWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        api.removeABroadWorksWorkspace(workspaceId, authorization);
        // TODO: test validations
    }

    /**
     * Remove a Route Group from an Organization
     *
     * Remove a Route Group from an Organization based on id.  A Route Group is a collection of trunks that allows further scale and redundancy with the connection to the premises. Route groups can include up to 10 trunks from different locations.  Removing a Route Group requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeARouteGroupFromAnOrganizationTest() throws ApiException {
        String routeGroupId = null;
        String orgId = null;
        String authorization = null;
        api.removeARouteGroupFromAnOrganization(routeGroupId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Remove a Wholesale Customer
     *
     * Allows a Service Provider to remove the mapping between a Wholesale Customer and a Cisco Webex organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAWholesaleCustomerTest() throws ApiException {
        String customerId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        api.removeAWholesaleCustomer(customerId, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * Remove a Wholesale Subscriber
     *
     * This API allows a Service Provider to remove the mapping between Wholesale Subscriber and a Webex user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAWholesaleSubscriberTest() throws ApiException {
        String subscriberId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        api.removeAWholesaleSubscriber(subscriberId, onBehalfOfSubPartnerOrgId, authorization);
        // TODO: test validations
    }

    /**
     * Remove phone numbers from a location
     *
     * Remove the specified set of phone numbers from a location for an organization.  Phone numbers must follow the E.164 format.  Removing a mobile number may require more time depending on mobile carrier capabilities.  Removing a phone number from a location requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  A location&#39;s main number cannot be removed.  &lt;br/&gt;  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;This API is only supported for non-integrated PSTN connection types of Local Gateway (LGW) and Non-integrated CPP. It should never be used for locations with integrated PSTN connection types like Cisco Calling Plans or Integrated CCP because backend data issues may occur.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePhoneNumbersFromALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        NumbersDelete numbersDelete = null;
        api.removePhoneNumbersFromALocation(locationId, orgId, authorization, numbersDelete);
        // TODO: test validations
    }

    /**
     * Reset Voicemail PIN
     *
     * Reset a voicemail PIN for a person.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail.  A voicemail PIN is used to retrieve your voicemail messages.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.  **NOTE**: This API is expected to have an empty request body and Content-Type header should be set to &#x60;application/json&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetVoicemailPINTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        Object body = null;
        api.resetVoicemailPIN(personId, orgId, authorization, body);
        // TODO: test validations
    }

    /**
     * Reset Voicemail PIN for a Virtual Line
     *
     * Reset a voicemail PIN for a virtual line.  The voicemail feature transfers callers to voicemail based on your settings. You can then retrieve voice messages via Voicemail.  A voicemail PIN is used to retrieve your voicemail messages.  Updating the voicemail pin for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: This API is expected to have an empty request body and Content-Type header should be set to &#x60;application/json&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetVoicemailPINForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        Object body = null;
        api.resetVoicemailPINForAVirtualLine(virtualLineId, orgId, authorization, body);
        // TODO: test validations
    }

    /**
     * Resume
     *
     * Resume a held call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeTest() throws ApiException {
        String authorization = null;
        ResumeRequest resumeRequest = null;
        api.resume(authorization, resumeRequest);
        // TODO: test validations
    }

    /**
     * Resume Recording
     *
     * Resume recording a call. Use of this API is only valid when a call&#39;s recording is paused and the user&#39;s call recording mode is set to \&quot;On Demand\&quot; or \&quot;Always with Pause/Resume\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeRecordingTest() throws ApiException {
        String authorization = null;
        ResumeRecordingRequest resumeRecordingRequest = null;
        api.resumeRecording(authorization, resumeRecordingRequest);
        // TODO: test validations
    }

    /**
     * Resume the Manage Numbers Job
     *
     * Resume the paused Manage Numbers Job. A paused job can be resumed.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeTheManageNumbersJobTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String authorization = null;
        api.resumeTheManageNumbersJob(jobId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Resume the Move Users Job
     *
     * Resume the paused Move Users Job that is in paused status.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeTheMoveUsersJobTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String authorization = null;
        api.resumeTheMoveUsersJob(jobId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieve a parked call. A new call is initiated to perform the retrieval in a similar manner to the dial command. The number field from the park command response can be used as the destination for the retrieve command.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTest() throws ApiException {
        String authorization = null;
        RetrieveRequest retrieveRequest = null;
        Retrieve201Response response = api.retrieve(authorization, retrieveRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a person&#39;s Application Services Settings
     *
     * Application services let you determine the ringing behavior for calls made to people in certain scenarios. You can also specify which devices can download the Webex Calling app.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of spark-admin:people_read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPersonsApplicationServicesSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAPersonSApplicationServicesSettings200Response response = api.retrieveAPersonsApplicationServicesSettings(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve A Person&#39;s Emergency Callback Number Dependencies
     *
     * Retrieve Emergency Callback Number dependencies for a person.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Call Back Numbers (ECBN) to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  Retrieving the dependencies requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPersonsEmergencyCallbackNumberDependenciesTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAPersonSEmergencyCallbackNumberDependencies200Response response = api.retrieveAPersonsEmergencyCallbackNumberDependencies(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve a Person&#39;s MS Teams Settings
     *
     * &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Not supported for Webex for Government (FedRAMP)&lt;/Callout&gt;&lt;/div&gt;  Retrieve a person&#39;s MS Teams settings.  At a person level, MS Teams settings allow access to retrieving the &#x60;HIDE WEBEX APP&#x60; and &#x60;PRESENCE SYNC&#x60; settings.  To retrieve a person&#39;s MS Teams settings requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPersonsMSTeamsSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAPersonSMSTeamsSettings200Response response = api.retrieveAPersonsMSTeamsSettings(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve a person&#39;s Monitoring Settings
     *
     * Retrieves the monitoring settings of the person, which shows specified people, places, virtual lines or call park extenions that are being monitored. Monitors the line status which indicates if a person, place or virtual line is on a call and if a call has been parked on that extension.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPersonsMonitoringSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAPersonSMonitoringSettings200Response response = api.retrieveAPersonsMonitoringSettings(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve a person&#39;s Outgoing Calling Permissions Settings
     *
     * Retrieve a person&#39;s Outgoing Calling Permissions settings.  Outgoing calling permissions regulate behavior for calls placed to various destinations and default to the local level settings. You can change the outgoing calling permissions for a person if you want them to be different from your organization&#39;s default.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPersonsOutgoingCallingPermissionsSettingsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAPersonSOutgoingCallingPermissionsSettings200Response response = api.retrieveAPersonsOutgoingCallingPermissionsSettings(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve a virtual line&#39;s Outgoing Calling Permissions Settings
     *
     * Retrieve a virtual line&#39;s Outgoing Calling Permissions settings.  Outgoing calling permissions regulate behavior for calls placed to various destinations and default to the local level settings. You can change the outgoing calling permissions for a virtual line if you want them to be different from your organization&#39;s default.  Retrieving the outgoing permission settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAVirtualLinesOutgoingCallingPermissionsSettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAVirtualLineSOutgoingCallingPermissionsSettings200Response response = api.retrieveAVirtualLinesOutgoingCallingPermissionsSettings(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Access Codes for a Workspace
     *
     * Retrieve Access codes for a Workspace.  Access codes are used to bypass permissions.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAccessCodesForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAccessCodesForAWorkspace200Response response = api.retrieveAccessCodesForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Agent&#39;s Caller ID Information
     *
     * Retrieve the Agent&#39;s Caller ID Information.  Each agent will be able to set their outgoing Caller ID as either the Call Queue&#39;s Caller ID, Hunt Group&#39;s Caller ID or their own configured Caller ID.  This API requires a full admin or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgentsCallerIDInformationTest() throws ApiException {
        String personId = null;
        String authorization = null;
        RetrieveAgentSCallerIDInformation200Response response = api.retrieveAgentsCallerIDInformation(personId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Agent&#39;s Caller ID Information
     *
     * Retrieve the Agent&#39;s Caller ID Information.  Each agent will be able to set their outgoing Caller ID as either the Call Queue&#39;s Caller ID, Hunt Group&#39;s Caller ID or their own configured Caller ID.  This API requires a full admin or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgentsCallerIDInformation_0Test() throws ApiException {
        String virtualLineId = null;
        String authorization = null;
        RetrieveAgentSCallerIDInformation200Response response = api.retrieveAgentsCallerIDInformation_0(virtualLineId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Agent&#39;s List of Available Caller IDs
     *
     * Get the list of call queues and hunt groups available for caller ID use by this person as an agent.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgentsListOfAvailableCallerIDsTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAgentSListOfAvailableCallerIDs200Response response = api.retrieveAgentsListOfAvailableCallerIDs(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Agent&#39;s List of Available Caller IDs
     *
     * Get the list of call queues and hunt groups available for caller ID use by this virtual line as an agent.  This API requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAgentsListOfAvailableCallerIDs_0Test() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAgentSListOfAvailableCallerIDs200Response1 response = api.retrieveAgentsListOfAvailableCallerIDs_0(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Anonymous Call Settings for a Workspace
     *
     * Retrieve Anonymous Call Settings for a Workspace.  Anonymous Call Rejection, when enabled, blocks all incoming calls from unidentified or blocked caller IDs.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnonymousCallSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveAnonymousCallSettingsForAWorkspace200Response response = api.retrieveAnonymousCallSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Barge In Call Settings for a Workspace
     *
     * Retrieve Barge In Call Settings for a Workspace.  Barge In, when enabled, allows you to use the Feature Access Code (FAC) on your desk phone to answer someone else’s phone call or barge in on a call they’ve already answered.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveBargeInCallSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveBargeInCallSettingsForAWorkspace200Response response = api.retrieveBargeInCallSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Call Bridge Warning Tone Settings for a Workspace
     *
     * Retrieve Call Bridge Warning Tone Settings for a Workspace.  Call Bridge Warning Tone, when enabled, ensures that users hear a warning tone when other users bridge into an active call on the same shared line appearance.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCallBridgeWarningToneSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveCallBridgeWarningToneSettingsForAWorkspace200Response response = api.retrieveCallBridgeWarningToneSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Call Forwarding Settings for a Workspace
     *
     * Retrieve Call Forwarding Settings for a Workspace.  Three types of call forwarding are supported:  + Always - forwards all incoming calls to the destination you choose.  + When busy, forwards all incoming calls to the destination you chose while the phone is in use or the person is busy.  + When no answer, forwarding only occurs when you are away or not answering your phone.  In addition, the Business Continuity feature will send calls to a destination of your choice if your phone is not connected to the network for any reason, such as a power outage, failed Internet connection, or wiring problem.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCallForwardingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveCallForwardingSettingsForAWorkspace200Response response = api.retrieveCallForwardingSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Call Waiting Settings for a Workspace
     *
     * Retrieve Call Waiting Settings for a Workspace.  Call Waiting allows workspaces to handle multiple simultaneous calls. Workspaces with Call Waiting enabled can place a call on hold to answer or initiate another call.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCallWaitingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveCallWaitingSettingsForAWorkspace200Response response = api.retrieveCallWaitingSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve DoNotDisturb Settings for a Workspace
     *
     * Retrieve DoNotDisturb Settings for a Workspace.  Silence incoming calls with the Do Not Disturb feature. When enabled, callers hear the busy signal.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveDoNotDisturbSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveDoNotDisturbSettingsForAWorkspace200Response response = api.retrieveDoNotDisturbSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Executive Assistant Settings for a Person
     *
     * Retrieve the executive assistant settings for the specified &#x60;personId&#x60;.  People with the executive service enabled, can select from a pool of assistants who have been assigned the executive assistant service and who can answer or place calls on their behalf. Executive assistants can set the call forward destination and join or leave an executive&#39;s pool.  This API requires a full, user, or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:people_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveExecutiveAssistantSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveExecutiveAssistantSettingsForAPerson200Response response = api.retrieveExecutiveAssistantSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Incoming Permission Settings for a Workspace
     *
     * Retrieve Incoming Permission settings for a Workspace.  Incoming permission settings allow modifying permissions for a workspace that can be different from the organization&#39;s default to manage different call types.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveIncomingPermissionSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveIncomingPermissionSettingsForAWorkspace200Response response = api.retrieveIncomingPermissionSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Monitoring Settings for a Workspace
     *
     * Retrieves Monitoring settings for a Workspace.  Allow workspaces to monitor the line status of specified agents, workspaces, or call park extensions. The line status indicates if a monitored agent or a workspace is on a call, or if a call has been parked on the monitored call park extension.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveMonitoringSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveMonitoringSettingsForAWorkspace200Response response = api.retrieveMonitoringSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Music On Hold Settings for a Person
     *
     * Retrieve the person&#39;s music on hold settings.  Music on hold is played when a caller is put on hold, or the call is parked.  Retrieving a person&#39;s music on hold settings requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveMusicOnHoldSettingsForAPersonTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        RetrieveMusicOnHoldSettingsForAPerson200Response response = api.retrieveMusicOnHoldSettingsForAPerson(personId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Music On Hold Settings for a Virtual Line
     *
     * Retrieve the virtual line&#39;s music on hold settings.  Music on hold is played when a caller is put on hold, or the call is parked.  Retrieving the music on hold settings for a virtual line requires a full, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveMusicOnHoldSettingsForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        RetrieveMusicOnHoldSettingsForAVirtualLine200Response response = api.retrieveMusicOnHoldSettingsForAVirtualLine(virtualLineId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Music On Hold Settings for a Workspace
     *
     * Retrieve Music On Hold Settings for a Workspace.  Music on hold is played when a caller is put on hold, or the call is parked.  Retrieving a workspace&#39;s music on hold settings requires a full, device or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveMusicOnHoldSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveMusicOnHoldSettingsForAWorkspace200Response response = api.retrieveMusicOnHoldSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Outgoing Permission Settings for a Workspace
     *
     * Retrieve Outgoing Permission settings for a Workspace.  Turn on outgoing call settings for this workspace to override the calling settings from the location that are used by default.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveOutgoingPermissionSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveOutgoingPermissionSettingsForAWorkspace200Response response = api.retrieveOutgoingPermissionSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve PSTN Connection for a Location
     *
     * Retrieves the current configured PSTN connection details for a location.  PSTN location connection settings enables the admin to configure or change the PSTN provider for a location.  Retrieving the PSTN connection details for a location requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_pstn_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePSTNConnectionForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        RetrievePSTNConnectionForALocation200Response response = api.retrievePSTNConnectionForALocation(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve PSTN Connection Options for a Location
     *
     * Retrieve the list of PSTN connection options available for a location.  PSTN location connection settings enables the admin to configure or change the PSTN provider for a location.  Retrieving this list requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_pstn_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePSTNConnectionOptionsForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        RetrievePSTNConnectionOptionsForALocation200Response response = api.retrievePSTNConnectionOptionsForALocation(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Priority Alert Criteria for a Workspace
     *
     * Retrieve Priority Alert Criteria Settings for a Workspace.  The priority alert feature enables administrators to configure priority alert settings for a professional workspace. Priority Alert Criteria (Schedules) can also be set up to alert these phones during certain times of the day or days of the week.  This API requires a full, user, or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePriorityAlertCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrievePriorityAlertCriteriaForAWorkspace200Response response = api.retrievePriorityAlertCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Priority Alert Settings for a Workspace
     *
     * Retrieve Priority Alert Settings for a Workspace.  The priority alert feature enables administrators to configure priority alert settings for a professional workspace.  This API requires a full, user, or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePriorityAlertSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrievePriorityAlertSettingsForAWorkspace200Response response = api.retrievePriorityAlertSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Privacy Settings for a Workspace
     *
     * Retrieve Privacy Settings for a Workspace.  The privacy feature enables the Workspaces line to be monitored by others and determine if they can be reached by Auto Attendant services.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; scope to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePrivacySettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrievePrivacySettingsForAWorkspace200Response response = api.retrievePrivacySettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve RedSky Account Details for an Organization
     *
     * Retrieve RedSky account details for an organization.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  To retrieve the RedSky account details requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveRedSkyAccountDetailsForAnOrganizationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RetrieveRedSkyAccountDetailsForAnOrganization200Response response = api.retrieveRedSkyAccountDetailsForAnOrganization(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Accept Criteria for a Workspace
     *
     * Retrieve Selective Accept Criteria Settings for a Workspace.  With the Selective Accept feature, you can accept calls at specific times from specific callers. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveAcceptCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveAcceptCriteriaForAWorkspace200Response response = api.retrieveSelectiveAcceptCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Accept Settings for a Workspace
     *
     * Retrieve Selective Accept Settings for a Workspace.  With the Selective Accept feature, you can accept calls at specific times from specific callers. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveAcceptSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveAcceptSettingsForAWorkspace200Response response = api.retrieveSelectiveAcceptSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Forward Criteria for a Workspace
     *
     * Retrieve Selective Forward Criteria Settings for a Workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveForwardCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveForwardCriteriaForAWorkspace200Response response = api.retrieveSelectiveForwardCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Forward Settings for a Workspace
     *
     * Retrieve Selective Forward Call Settings for a Workspace.  With the Selective Forward feature, you can forward calls at specific times from specific callers. This setting takes precedence over call forwarding. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveForwardSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveForwardSettingsForAWorkspace200Response response = api.retrieveSelectiveForwardSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Reject Criteria for a Workspace
     *
     * Retrieve Selective Reject Criteria Settings for a Workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveRejectCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveRejectCriteriaForAWorkspace200Response response = api.retrieveSelectiveRejectCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Selective Reject Settings for a Workspace
     *
     * Retrieve Selective Reject Settings for a Workspace.  With the Selective Reject feature, you can reject calls at specific times from specific callers. This setting takes precedence over Selectively Accept Calls. Schedules can also be set up for this feature during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSelectiveRejectSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveSelectiveRejectSettingsForAWorkspace200Response response = api.retrieveSelectiveRejectSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Sequential Ring Criteria for a Workspace
     *
     * Retrieve sequential ring criteria for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another. The sequential ring criteria specify settings such as schedule and incoming numbers for which to sequentially ring or not.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSequentialRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrieveSequentialRingCriteriaForAWorkspace200Response response = api.retrieveSequentialRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Sequential Ring Settings for a Workspace
     *
     * Retrieve sequential ring settings for a workspace.  The sequential ring feature enables you to create a list of up to five phone numbers. When the workspace receives incoming calls, these numbers will ring one after another.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSequentialRingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveSequentialRingSettingsForAWorkspace200Response response = api.retrieveSequentialRingSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Simultaneous Ring Criteria for a Workspace
     *
     * Retrieve Simultaneous Ring Criteria Settings for a Workspace.  The Simultaneous Ring feature allows you to configure your office phone and other phones of your choice to ring simultaneously. Simultaneous Ring Criteria (Schedules) can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSimultaneousRingCriteriaForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String id = null;
        String orgId = null;
        String authorization = null;
        RetrieveSimultaneousRingCriteriaForAWorkspace200Response response = api.retrieveSimultaneousRingCriteriaForAWorkspace(workspaceId, id, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Simultaneous Ring Settings for a Workspace
     *
     * Retrieve Simultaneous Ring Settings for a Workspace.  The Simultaneous Ring feature allows you to configure your office phone and other phones of your choice to ring simultaneously. Schedules can also be set up to ring these phones during certain times of the day or days of the week.  This API requires a full, read-only or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with a scope of &#x60;spark:workspaces_read&#x60; to read workspace settings.  **NOTE**: This API is only available for professional licensed workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSimultaneousRingSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveSimultaneousRingSettingsForAWorkspace200Response response = api.retrieveSimultaneousRingSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Transfer Numbers Settings for a Workspace
     *
     * Retrieve Transfer Numbers Settings for a Workspace.  When calling a specific call type, this workspace will be automatically transferred to another number. The person assigned the Auto Transfer Number can then approve the call and send it through or reject the call type. You can add up to 3 numbers.  This API requires a full or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:workspaces_read&#x60; or a user auth token with &#x60;spark:workspaces_read&#x60; scope can be used to read workspace settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTransferNumbersSettingsForAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveTransferNumbersSettingsForAWorkspace200Response response = api.retrieveTransferNumbersSettingsForAWorkspace(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Retrieve Workspace Emergency Callback Number Dependencies
     *
     * Retrieve Emergency Callback Number dependencies for a workspace.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Call Back Numbers (ECBN) to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  Retrieving the dependencies requires a full, user or read-only administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveWorkspaceEmergencyCallbackNumberDependenciesTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        RetrieveWorkspaceEmergencyCallbackNumberDependencies200Response response = api.retrieveWorkspaceEmergencyCallbackNumberDependencies(workspaceId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Search Available Members
     *
     * List the members that are available to be assigned to DECT handset lines.  This requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_read&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAvailableMembersTest() throws ApiException {
        String orgId = null;
        BigDecimal start = null;
        BigDecimal max = null;
        String memberName = null;
        String phoneNumber = null;
        String extension = null;
        String order = null;
        String locationId = null;
        Boolean excludeVirtualLine = null;
        String usageType = null;
        String authorization = null;
        SearchSharedLineAppearanceMembers200Response response = api.searchAvailableMembers(orgId, start, max, memberName, phoneNumber, extension, order, locationId, excludeVirtualLine, usageType, authorization);
        // TODO: test validations
    }

    /**
     * Search Shared-Line Appearance Members
     *
     * Get members available for shared-line assignment to a Webex Calling Apps Desktop device.  This API requires a full or user administrator or location administrator auth token with the &#x60;spark-admin:people_read&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSharedLineAppearanceMembersTest() throws ApiException {
        String personId = null;
        String applicationId = null;
        String authorization = null;
        SearchSharedLineAppearanceMembersRequest searchSharedLineAppearanceMembersRequest = null;
        SearchSharedLineAppearanceMembers200Response response = api.searchSharedLineAppearanceMembers(personId, applicationId, authorization, searchSharedLineAppearanceMembersRequest);
        // TODO: test validations
    }

    /**
     * Setup PSTN Connection for a Location
     *
     * Set up or update the PSTN connection details for a location.  PSTN location connection settings enables the admin to configure or change the PSTN provider for a location.  Setting up PSTN connection on a location requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_pstn_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupPSTNConnectionForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        SetupPSTNConnectionForALocationRequest setupPSTNConnectionForALocationRequest = null;
        api.setupPSTNConnectionForALocation(locationId, orgId, authorization, setupPSTNConnectionForALocationRequest);
        // TODO: test validations
    }

    /**
     * Start Recording
     *
     * Start recording a call. Use of this API is only valid when the user&#39;s call recording mode is set to \&quot;On Demand\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRecordingTest() throws ApiException {
        String authorization = null;
        StartRecordingRequest startRecordingRequest = null;
        api.startRecording(authorization, startRecordingRequest);
        // TODO: test validations
    }

    /**
     * Stop Recording
     *
     * Stop recording a call. Use of this API is only valid when a call is being recorded and the user&#39;s call recording mode is set to \&quot;On Demand\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRecordingTest() throws ApiException {
        String authorization = null;
        StopRecordingRequest stopRecordingRequest = null;
        api.stopRecording(authorization, stopRecordingRequest);
        // TODO: test validations
    }

    /**
     * Test Call Routing
     *
     * Validates that an incoming call can be routed.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Test call routing requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCallRoutingTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        TestCallRoutingRequest testCallRoutingRequest = null;
        TestCallRouting200Response response = api.testCallRouting(orgId, authorization, testCallRoutingRequest);
        // TODO: test validations
    }

    /**
     * Transfer
     *
     * Transfer two calls together.  Unanswered incoming calls cannot be transferred but can be diverted using the divert API.  If the user has only two calls and wants to transfer them together, the &#x60;callId1&#x60; and &#x60;callId2&#x60; parameters are optional and when not provided the calls are automatically selected and transferred.  If the user has more than two calls and wants to transfer two of them together, the &#x60;callId1&#x60; and &#x60;callId2&#x60; parameters are mandatory to specify which calls are being transferred. Those are also commonly referred to as Attended Transfer, Consultative Transfer, or Supervised Transfer and will return a &#x60;204&#x60; response.  If the user wants to transfer one call to a new destination but only when the destination responds, the &#x60;callId1&#x60; and destination parameters are mandatory to specify the call being transferred and the destination.  This is referred to as a Mute Transfer and is similar to the divert API with the difference of waiting for the destination to respond prior to transferring the call. If the destination does not respond, the call is not transferred. This will return a &#x60;201&#x60; response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferTest() throws ApiException {
        String authorization = null;
        TransferRequest transferRequest = null;
        Transfer201Response response = api.transfer(authorization, transferRequest);
        // TODO: test validations
    }

    /**
     * Transmit DTMF
     *
     * Transmit DTMF digits to a call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transmitDTMFTest() throws ApiException {
        String authorization = null;
        TransmitDTMFRequest transmitDTMFRequest = null;
        api.transmitDTMF(authorization, transmitDTMFRequest);
        // TODO: test validations
    }

    /**
     * Trigger Directory Sync for a User
     *
     * This API lets a Partner Admin trigger a directory sync for an external user (real or virtual user) on Broadworks enterprise with Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggerDirectorySyncForAUserTest() throws ApiException {
        String id = null;
        String authorization = null;
        TriggerDirectorySyncForAUserRequest triggerDirectorySyncForAUserRequest = null;
        TriggerDirectorySyncForAUser200Response response = api.triggerDirectorySyncForAUser(id, authorization, triggerDirectorySyncForAUserRequest);
        // TODO: test validations
    }

    /**
     * Trigger Directory Sync for an Enterprise
     *
     * This API lets a Partner Admin trigger a directory sync for the customer&#39;s Broadworks enterprise on Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggerDirectorySyncForAnEnterpriseTest() throws ApiException {
        String id = null;
        String authorization = null;
        TriggerDirectorySyncForAnEnterpriseRequest triggerDirectorySyncForAnEnterpriseRequest = null;
        TriggerDirectorySyncForAnEnterprise200Response response = api.triggerDirectorySyncForAnEnterprise(id, authorization, triggerDirectorySyncForAnEnterpriseRequest);
        // TODO: test validations
    }

    /**
     * Update a BroadWorks Subscriber
     *
     * This API lets a Service Provider update certain details of a provisioned BroadWorks subscriber on Webex.  &lt;div&gt;         &lt;Callout type&#x3D;&#39;info&#39;&gt;The updated items will not be immediately reflected in the response body, but can be subsequently obtained via the [Get a BroadWorks Subscriber](/docs/api/v1/broadworks-subscribers/get-a-broadworks-subscriber) API once the status has transitioned from the updating state to the provisioned state.&lt;/Callout&gt; &lt;/div&gt;  o
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateABroadWorksSubscriberTest() throws ApiException {
        String subscriberId = null;
        String authorization = null;
        UpdateABroadWorksSubscriberRequest updateABroadWorksSubscriberRequest = null;
        ProvisionABroadWorksSubscriber200Response response = api.updateABroadWorksSubscriber(subscriberId, authorization, updateABroadWorksSubscriberRequest);
        // TODO: test validations
    }

    /**
     * Update a Broadworks Workspace
     *
     * Update certain details of a provisioned BroadWorks workspace on Cisco Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateABroadworksWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        UpdateABroadworksWorkspaceRequest updateABroadworksWorkspaceRequest = null;
        ProvisionABroadWorksWorkspace200Response response = api.updateABroadworksWorkspace(workspaceId, authorization, updateABroadworksWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Update a Call Park
     *
     * Update the designated Call Park.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Updating a call park requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Park ID will change upon modification of the Call Park name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallParkTest() throws ApiException {
        String locationId = null;
        String callParkId = null;
        String orgId = null;
        String authorization = null;
        UpdateACallParkRequest updateACallParkRequest = null;
        UpdateACallPark200Response response = api.updateACallPark(locationId, callParkId, orgId, authorization, updateACallParkRequest);
        // TODO: test validations
    }

    /**
     * Update a Call Park Extension
     *
     * Update the designated Call Park Extension.  Call Park Extension enables a call recipient to park a call to an extension, so someone else within the same Organization can retrieve the parked call by dialing that extension. Call Park Extensions can be added as monitored lines by users&#39; Cisco phones, so users can park and retrieve calls by pressing the associated phone line key.  Updating a call park extension requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallParkExtensionTest() throws ApiException {
        String locationId = null;
        String callParkExtensionId = null;
        String orgId = null;
        String authorization = null;
        UpdateACallParkExtensionRequest updateACallParkExtensionRequest = null;
        api.updateACallParkExtension(locationId, callParkExtensionId, orgId, authorization, updateACallParkExtensionRequest);
        // TODO: test validations
    }

    /**
     * Update a Call Pickup
     *
     * Update the designated Call Pickup.  Call Pickup enables a user (agent) to answer any ringing line within their pickup group.  Updating a call pickup requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Pickup ID will change upon modification of the Call Pickup name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallPickupTest() throws ApiException {
        String locationId = null;
        String callPickupId = null;
        String orgId = null;
        String authorization = null;
        UpdateACallPickupRequest updateACallPickupRequest = null;
        UpdateACallPickup200Response response = api.updateACallPickup(locationId, callPickupId, orgId, authorization, updateACallPickupRequest);
        // TODO: test validations
    }

    /**
     * Update a Call Queue
     *
     * Update the designated Call Queue.  Call queues temporarily hold calls in the cloud when all agents, which can be users or agents, assigned to receive calls from the queue are unavailable. Queued calls are routed to an available agent when not on an active call. Each call queue is assigned a Lead Number, which is a telephone number outside callers can dial to reach users assigned to the call queue. Call queues are also assigned an internal extension, which can be dialed internally to reach users assigned to the call queue.  Updating a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        ModifyCallQueueObject modifyCallQueueObject = null;
        api.updateACallQueue(locationId, queueId, orgId, authorization, modifyCallQueueObject);
        // TODO: test validations
    }

    /**
     * Update a Call Queue Forced Forward service
     *
     * Update the designated Forced Forward Service.  If the option is enabled, then incoming calls to the queue are forwarded to the configured destination. Calls that are already in the queue remain queued. The policy can be configured to play an announcement prior to proceeding with the forward.  Updating a call queue Forced Forward service requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallQueueForcedForwardServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        ModifyCallQueueForcedForwardObject modifyCallQueueForcedForwardObject = null;
        api.updateACallQueueForcedForwardService(locationId, queueId, orgId, authorization, modifyCallQueueForcedForwardObject);
        // TODO: test validations
    }

    /**
     * Update a Call Queue Holiday Service
     *
     * Update the designated Call Queue Holiday Service.  Configure the call queue to route calls differently during the holidays.  Updating a call queue holiday service requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallQueueHolidayServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        ModifyCallQueueHolidayObject modifyCallQueueHolidayObject = null;
        api.updateACallQueueHolidayService(locationId, queueId, orgId, authorization, modifyCallQueueHolidayObject);
        // TODO: test validations
    }

    /**
     * Update a Call Queue Night Service
     *
     * Update Call Queue Night Service details.  Configure the call queue to route calls differently during the hours when the queue is not in service. This is determined by a schedule that defines the business hours of the queue.  Updating call queue night service details requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallQueueNightServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        PatchCallQueueNightServiceObject patchCallQueueNightServiceObject = null;
        api.updateACallQueueNightService(locationId, queueId, orgId, authorization, patchCallQueueNightServiceObject);
        // TODO: test validations
    }

    /**
     * Update a Call Queue Stranded Calls service
     *
     * Update the designated Call Stranded Calls Service.  Allow admin to modify configured Stranded Calls settings.  Updating a call queue stranded calls requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACallQueueStrandedCallsServiceTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        ModifyCallQueueStrandedCallsObject modifyCallQueueStrandedCallsObject = null;
        api.updateACallQueueStrandedCallsService(locationId, queueId, orgId, authorization, modifyCallQueueStrandedCallsObject);
        // TODO: test validations
    }

    /**
     * Update a Hunt Group
     *
     * Update the designated Hunt Group.  Hunt groups can route incoming calls to a group of people, workspaces or virtual lines. You can even configure a pattern to route to a whole group.  Updating a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        UpdateAHuntGroupRequest updateAHuntGroupRequest = null;
        api.updateAHuntGroup(locationId, huntGroupId, orgId, authorization, updateAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Update a Location
     *
     * Update details for a location, by ID.  * Updating a location in your organization requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:locations_write&#x60;.  * Specify the location ID in the &#x60;locationId&#x60; parameter in the URI.  * Partners may specify &#x60;orgId&#x60; query parameter to update location in managed organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutCommonLocationObject putCommonLocationObject = null;
        api.updateALocation(locationId, orgId, authorization, putCommonLocationObject);
        // TODO: test validations
    }

    /**
     * Update a Location Emergency Call Notification
     *
     * Update a location emergency call notification.  Once settings enabled at the organization level, the configured email address will receive emergency call notifications for all locations; for specific location customization, users can navigate to Management &gt; Locations, select the Calling tab, and update the Emergency Call Notification settings.  Emergency Call Notifications can be enabled at the organization level, allowing specified email addresses to receive email notifications when an emergency call is made. Once activated at the organization level, individual locations can configure this setting to direct notifications to specific email addresses. To comply with U.S. Public Law 115-127, also known as Kari’s Law, any call that&#39;s made from within your organization to emergency services must generate an email notification.  To update location call notification requires a full, user or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALocationEmergencyCallNotificationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutLocationCallNotificationObject putLocationCallNotificationObject = null;
        api.updateALocationEmergencyCallNotification(locationId, orgId, authorization, putLocationCallNotificationObject);
        // TODO: test validations
    }

    /**
     * Update a Location Floor
     *
     * Updates details for a floor, by ID. Specify the floor ID in the &#x60;floorId&#x60; parameter in the URI. Include all details for the floor returned by a previous call to [Get Location Floor Details](/docs/api/v1/locations/get-location-floor-details). Omitting the optional &#x60;displayName&#x60; field will result in that field no longer being defined for the floor. Requires an administrator auth token with the &#x60;spark-admin:locations_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALocationFloorTest() throws ApiException {
        String locationId = null;
        String floorId = null;
        String authorization = null;
        CreateALocationFloorRequest createALocationFloorRequest = null;
        CreateALocationFloor201Response response = api.updateALocationFloor(locationId, floorId, authorization, createALocationFloorRequest);
        // TODO: test validations
    }

    /**
     * Update a Location&#39;s RedSky Compliance Status
     *
     * Update the compliance status for a specific location.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Updating the RedSky account&#39;s compliance status requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALocationsRedSkyComplianceStatusTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        RedSkyComplianceStatusRequestObject redSkyComplianceStatusRequestObject = null;
        UpdateALocationSRedSkyComplianceStatus200Response response = api.updateALocationsRedSkyComplianceStatus(locationId, orgId, authorization, redSkyComplianceStatusRequestObject);
        // TODO: test validations
    }

    /**
     * Update a Paging Group
     *
     * Update the designated Paging Group.  Group Paging allows a person to place a one-way call or group page to up to 75 people, workspaces and virtual lines by dialing a number or extension assigned to a specific paging group. The Group Paging service makes a simultaneous call to all the assigned targets.  Updating a paging group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAPagingGroupTest() throws ApiException {
        String locationId = null;
        String pagingId = null;
        String orgId = null;
        String authorization = null;
        UpdateAPagingGroupRequest updateAPagingGroupRequest = null;
        api.updateAPagingGroup(locationId, pagingId, orgId, authorization, updateAPagingGroupRequest);
        // TODO: test validations
    }

    /**
     * Update a Person
     *
     * Update details for a person, by ID.  Specify the person ID in the &#x60;personId&#x60; parameter in the URI. Only an admin can update a person details.  Include all details for the person. This action expects all user details to be present in the request. A common approach is to first [GET the person&#39;s details](/docs/api/v1/people/get-person-details), make changes, then PUT both the changed and unchanged values.  Admin users can include &#x60;Webex Calling&#x60; (BroadCloud) user details in the response by specifying &#x60;callingData&#x60; parameter as true.  When doing attendee management, to update a user from host role to an attendee for a site append &#x60;#attendee&#x60; to the respective &#x60;siteUrl&#x60; and remove the meeting host license for this site from the license array. To update a person from an attendee role to a host for a site, add the meeting license for this site in the meeting array, and remove that site from the &#x60;siteurl&#x60; parameter.  To remove the attendee privilege for a user on a meeting site, remove the &#x60;sitename#attendee&#x60; from the &#x60;siteUrl&#x60;s array. The &#x60;showAllTypes&#x60; parameter must be set to &#x60;true&#x60;.  **NOTE**:  * The &#x60;locationId&#x60; can only be set when assigning a calling license to a user. It cannot be changed if a user is already an existing calling user.  * The &#x60;extension&#x60; field should be used to update the Webex Calling extension for a person. The extension value should not include the location routing prefix. The &#x60;work_extension&#x60; type in the &#x60;phoneNumbers&#x60; object as seen in the response payload of [List People](/docs/api/v1/people/list-people) or [Get Person Details](/docs/api/v1/people/get-person-details), cannot be used to set the Webex Calling extension for a person.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAPersonTest() throws ApiException {
        String personId = null;
        Boolean callingData = null;
        Boolean showAllTypes = null;
        Boolean minResponse = null;
        String authorization = null;
        UpdateAPersonRequest updateAPersonRequest = null;
        CreateAPerson200Response response = api.updateAPerson(personId, callingData, showAllTypes, minResponse, authorization, updateAPersonRequest);
        // TODO: test validations
    }

    /**
     * Update a Person&#39;s Emergency Callback Number
     *
     * Update a person&#39;s emergency callback number settings.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Callback Numbers (ECBN) to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  To update an emergency callback number requires a full, location, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAPersonsEmergencyCallbackNumberTest() throws ApiException {
        String personId = null;
        String orgId = null;
        String authorization = null;
        PutECBNObject putECBNObject = null;
        api.updateAPersonsEmergencyCallbackNumber(personId, orgId, authorization, putECBNObject);
        // TODO: test validations
    }

    /**
     * Update a RedSky Building Address for a Location
     *
     * Update a RedSky building address for a specified location.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Updating a building address requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateARedSkyBuildingAddressForALocationTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        UpdateBuildingRequest updateBuildingRequest = null;
        api.updateARedSkyBuildingAddressForALocation(locationId, orgId, authorization, updateBuildingRequest);
        // TODO: test validations
    }

    /**
     * Update a Schedule
     *
     * Modify a schedule by its schedule ID.  Schedules are used to support calling features and can be defined at the location or person level. &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        ScheduleUpdateRequest scheduleUpdateRequest = null;
        CreateScheduleForAPerson201Response response = api.updateASchedule(personId, scheduleType, scheduleId, orgId, authorization, scheduleUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update a Schedule Event
     *
     * Update the designated Schedule Event.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Updating a schedule event requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The schedule event ID will change upon modification of the schedule event name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAScheduleEventTest() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        UpdateAScheduleEventRequest updateAScheduleEventRequest = null;
        UpdateAScheduleEvent200Response response = api.updateAScheduleEvent(locationId, type, scheduleId, eventId, orgId, authorization, updateAScheduleEventRequest);
        // TODO: test validations
    }

    /**
     * Update a Schedule
     *
     * Update the designated schedule.  A time schedule establishes a set of times during the day or holidays in the year in which a feature, for example auto attendants, can perform a specific action.  Updating a schedule requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Schedule ID will change upon modification of the Schedule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateASchedule_0Test() throws ApiException {
        String locationId = null;
        String type = null;
        String scheduleId = null;
        String orgId = null;
        String authorization = null;
        UpdateAScheduleRequest updateAScheduleRequest = null;
        UpdateASchedule200Response response = api.updateASchedule_0(locationId, type, scheduleId, orgId, authorization, updateAScheduleRequest);
        // TODO: test validations
    }

    /**
     * Update a Selective Call Forwarding Rule for a Call Queue
     *
     * Update a Selective Call Forwarding Rule&#39;s settings for the designated Call Queue.  A selective call forwarding rule for a call queue allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the call queue&#39;s call forwarding settings.  Updating a selective call forwarding rule&#39;s settings for a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateASelectiveCallForwardingRuleForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        ModifyForwardingRuleObject modifyForwardingRuleObject = null;
        UpdateASelectiveCallForwardingRuleForAHuntGroup201Response response = api.updateASelectiveCallForwardingRuleForACallQueue(locationId, queueId, ruleId, orgId, authorization, modifyForwardingRuleObject);
        // TODO: test validations
    }

    /**
     * Update a Selective Call Forwarding Rule for a Hunt Group
     *
     * Update a Selective Call Forwarding Rule&#39;s settings for the designated Hunt Group.  A selective call forwarding rule for a hunt group allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the hunt group&#39;s call forwarding settings.  Updating a selective call forwarding rule&#39;s settings for a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateASelectiveCallForwardingRuleForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        ModifyForwardingRuleObject modifyForwardingRuleObject = null;
        UpdateASelectiveCallForwardingRuleForAHuntGroup201Response response = api.updateASelectiveCallForwardingRuleForAHuntGroup(locationId, huntGroupId, ruleId, orgId, authorization, modifyForwardingRuleObject);
        // TODO: test validations
    }

    /**
     * Update a Virtual Line
     *
     * Update the designated Virtual Line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Updating a virtual line requires a full or user or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        UpdateAVirtualLineRequest updateAVirtualLineRequest = null;
        api.updateAVirtualLine(virtualLineId, orgId, authorization, updateAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Update a Virtual Line&#39;s Emergency Callback settings
     *
     * Update the emergency callback number settings for a specific virtual line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines for Webex Calling users.  To update virtual line callback number requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAVirtualLinesEmergencyCallbackSettingsTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        PutECBNObject putECBNObject = null;
        api.updateAVirtualLinesEmergencyCallbackSettings(virtualLineId, orgId, authorization, putECBNObject);
        // TODO: test validations
    }

    /**
     * Update a Wholesale Customer
     *
     * This API allows a Service Provider to update certain details of a provisioned Wholesale customer.  The Wholesale customer provisioning is asynchronous and thus a background task is created when this endpoint is invoked.  &lt;div&gt;         &lt;Callout type&#x3D;&#39;info&#39;&gt;After successful invocation of this endpoint a URL will be returned in the &#x60;Location&#x60; header, which will point to the [Get a Wholesale Customer](/docs/api/v1/wholesale-provisioning/get-a-wholesale-customer) endpoint for this customer.&lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWholesaleCustomerTest() throws ApiException {
        String customerId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        UpdateAWholesaleCustomerRequest updateAWholesaleCustomerRequest = null;
        ProvisionAWholesaleCustomer202Response response = api.updateAWholesaleCustomer(customerId, onBehalfOfSubPartnerOrgId, authorization, updateAWholesaleCustomerRequest);
        // TODO: test validations
    }

    /**
     * Update a Wholesale Subscriber
     *
     * This API allows a Service Provider to update certain details of a provisioned Wholesale subscriber.  **Note:**  * The &#x60;provisioningParameters&#x60; attributes should only be supplied when changing from the webex_meetings package to any calling-enabled package.  * Even in that scenario, if this subscriber is an existing Webex Calling entitled user, these attributes are optional and if provided are ignored.  &lt;div&gt; &lt;Callout type&#x3D;&#39;info&#39;&gt; Either &#x60;packages&#x60; or &#x60;package&#x60; field is required but not both. &lt;/Callout&gt; &lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWholesaleSubscriberTest() throws ApiException {
        String subscriberId = null;
        String onBehalfOfSubPartnerOrgId = null;
        String authorization = null;
        UpdateAWholesaleSubscriberRequest updateAWholesaleSubscriberRequest = null;
        ProvisionAWholesaleSubscriber200Response response = api.updateAWholesaleSubscriber(subscriberId, onBehalfOfSubPartnerOrgId, authorization, updateAWholesaleSubscriberRequest);
        // TODO: test validations
    }

    /**
     * Update a Workspace
     *
     * Updates details for a workspace by ID.  Specify the workspace ID in the &#x60;workspaceId&#x60; parameter in the URI. Include all details for the workspace that are present in a [GET request for the workspace details](/docs/api/v1/workspaces/get-workspace-details). Not including the optional &#x60;capacity&#x60;, &#x60;type&#x60; or &#x60;notes&#x60; fields will result in the fields no longer being defined for the workspace. A &#x60;locationId&#x60; must be provided when the &#x60;floorId&#x60; is set. The &#x60;locationId&#x60;, &#x60;workspaceLocationId&#x60;, &#x60;floorId&#x60;, &#x60;supportedDevices&#x60;, &#x60;calendar&#x60; and &#x60;calling&#x60; fields do not change when omitted from the update request.  * Information for Webex Calling fields may be found here: [locations](/docs/api/v1/locations/list-locations) and [available numbers](/docs/api/v1/numbers/get-phone-numbers-for-an-organization-with-given-criterias).  * Updating the &#x60;calling&#x60; parameter is only supported if the existing &#x60;calling&#x60; type is &#x60;freeCalling&#x60;, &#x60;none&#x60;, &#x60;thirdPartySipCalling&#x60; or &#x60;webexCalling&#x60;.  * Updating the &#x60;calling&#x60; parameter to &#x60;none&#x60;, &#x60;thirdPartySipCalling&#x60; or &#x60;webexCalling&#x60; is not supported if the workspace contains any devices.  * The &#x60;locationId&#x60; and &#x60;supportedDevices&#x60; fields cannot be changed once configured.  * When updating &#x60;webexCalling&#x60; information, a &#x60;locationId&#x60; and either a &#x60;phoneNumber&#x60; or &#x60;extension&#x60; or both is required. Furthermore, the &#x60;licenses&#x60; field can be set with a list of Webex Calling license IDs, if desired. If multiple license IDs are provided, the oldest suitable one will be applied. If a previously applied license ID is omitted, it will be replaced with one from the list provided. If the &#x60;licenses&#x60; field is omitted, the current calling license will be retained.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String authorization = null;
        UpdateAWorkspaceRequest updateAWorkspaceRequest = null;
        CreateAWorkspace201Response response = api.updateAWorkspace(workspaceId, authorization, updateAWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Update a Workspace Emergency Callback Number
     *
     * Update the emergency callback number settings for a workspace.  Emergency Callback Configurations can be enabled at the organization level, Users without individual telephone numbers, such as extension-only users, must be set up with accurate Emergency Call Back Numbers (ECBN) to enable them to make emergency calls. These users can either utilize the default ECBN for their location or be assigned another specific telephone number from that location for emergency purposes.  To update an emergency callback number requires a full, location, user, or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWorkspaceEmergencyCallbackNumberTest() throws ApiException {
        String workspaceId = null;
        String orgId = null;
        String authorization = null;
        PutECBNObject putECBNObject = null;
        api.updateAWorkspaceEmergencyCallbackNumber(workspaceId, orgId, authorization, putECBNObject);
        // TODO: test validations
    }

    /**
     * Update an Auto Attendant
     *
     * Update the designated Auto Attendant.  Auto attendants play customized prompts and provide callers with menu options for routing their calls through your system.  Updating an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        UpdateAnAutoAttendantRequest updateAnAutoAttendantRequest = null;
        api.updateAnAutoAttendant(locationId, autoAttendantId, orgId, authorization, updateAnAutoAttendantRequest);
        // TODO: test validations
    }

    /**
     * Update an Event for a person&#39;s Schedule
     *
     * People can use shared location schedules or define personal schedules containing events.  &#x60;businessHours&#x60; schedules allow you to apply specific call settings at different times of the day or week by defining one or more events. &#x60;holidays&#x60; schedules define exceptions to normal business hours by defining one or more events.  This API requires a full or user administrator auth token with the &#x60;spark-admin:people_write&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnEventForAPersonsScheduleTest() throws ApiException {
        String personId = null;
        String scheduleType = null;
        String scheduleId = null;
        String eventId = null;
        String orgId = null;
        String authorization = null;
        UpdateAnEventForAPersonSScheduleRequest updateAnEventForAPersonSScheduleRequest = null;
        UpdateAnEventForAPersonSSchedule200Response response = api.updateAnEventForAPersonsSchedule(personId, scheduleType, scheduleId, eventId, orgId, authorization, updateAnEventForAPersonSScheduleRequest);
        // TODO: test validations
    }

    /**
     * Update an Organization Emergency Call Notification
     *
     * Update an organization emergency call notification.  Once settings are enabled at the organization level, the configured email address will receive emergency call notifications for all locations.  Emergency Call Notifications can be enabled at the organization level, allowing specified email addresses to receive email notifications when an emergency call is made. To comply with U.S. Public Law 115-127, also known as Kari’s Law, any call that&#39;s made from within your organization to emergency services must generate an email notification.  To update organization call notification requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnOrganizationEmergencyCallNotificationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        OrgCallNotificationObject orgCallNotificationObject = null;
        api.updateAnOrganizationEmergencyCallNotification(orgId, authorization, orgCallNotificationObject);
        // TODO: test validations
    }

    /**
     * Update an Organization&#39;s MS Teams Setting
     *
     * &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Not supported for Webex for Government (FedRAMP)&lt;/Callout&gt;&lt;/div&gt;  Update an MS Teams setting.  MS Teams setting can be updated at the organization level.  Requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnOrganizationsMSTeamsSettingTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        ModifyCustomerMSTeamsSettingsObject modifyCustomerMSTeamsSettingsObject = null;
        api.updateAnOrganizationsMSTeamsSetting(orgId, authorization, modifyCustomerMSTeamsSettingsObject);
        // TODO: test validations
    }

    /**
     * Update Call Forwarding Settings for a Call Queue
     *
     * Update Call Forwarding settings for the designated Call Queue.  Updating call forwarding settings for a call queue requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallForwardingSettingsForACallQueueTest() throws ApiException {
        String locationId = null;
        String queueId = null;
        String orgId = null;
        String authorization = null;
        UpdateCallForwardingSettingsForAHuntGroupRequest updateCallForwardingSettingsForAHuntGroupRequest = null;
        api.updateCallForwardingSettingsForACallQueue(locationId, queueId, orgId, authorization, updateCallForwardingSettingsForAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Update Call Forwarding Settings for a Hunt Group
     *
     * Update Call Forwarding settings for the designated Hunt Group.  Updating call forwarding settings for a hunt group requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallForwardingSettingsForAHuntGroupTest() throws ApiException {
        String locationId = null;
        String huntGroupId = null;
        String orgId = null;
        String authorization = null;
        UpdateCallForwardingSettingsForAHuntGroupRequest updateCallForwardingSettingsForAHuntGroupRequest = null;
        api.updateCallForwardingSettingsForAHuntGroup(locationId, huntGroupId, orgId, authorization, updateCallForwardingSettingsForAHuntGroupRequest);
        // TODO: test validations
    }

    /**
     * Update Call Forwarding Settings for an Auto Attendant
     *
     * Update Call Forwarding settings for the designated Auto Attendant.  Updating call forwarding settings for an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallForwardingSettingsForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String orgId = null;
        String authorization = null;
        UpdateCallForwardingSettingsForAnAutoAttendantRequest updateCallForwardingSettingsForAnAutoAttendantRequest = null;
        api.updateCallForwardingSettingsForAnAutoAttendant(locationId, autoAttendantId, orgId, authorization, updateCallForwardingSettingsForAnAutoAttendantRequest);
        // TODO: test validations
    }

    /**
     * Update Call Park settings
     *
     * Update Call Park settings for the designated location.  Call Park allows call recipients to place a call on hold so that it can be retrieved from another device.  Updating call park settings requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallParkSettingsTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        UpdateCallParkSettingsRequest updateCallParkSettingsRequest = null;
        api.updateCallParkSettings(locationId, orgId, authorization, updateCallParkSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update Call Recording Settings
     *
     * Update Call Recording settings for the organization.  Call Recording feature enables authorized agents to record any active call that Webex Contact Center manages.  Updating call recording settings requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: This API is for Cisco partners only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallRecordingSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        UpdateCallRecordingSettingsRequest updateCallRecordingSettingsRequest = null;
        api.updateCallRecordingSettings(orgId, authorization, updateCallRecordingSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update Call Recording Terms Of Service Settings
     *
     * Update Call Recording Terms Of Service settings for the given vendor.  Call Recording feature enables authorized agents to record any active call that Webex Contact Center manages.  Updating call recording terms of service settings requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallRecordingTermsOfServiceSettingsTest() throws ApiException {
        String vendorId = null;
        String orgId = null;
        String authorization = null;
        UpdateCallRecordingTermsOfServiceSettingsRequest updateCallRecordingTermsOfServiceSettingsRequest = null;
        api.updateCallRecordingTermsOfServiceSettings(vendorId, orgId, authorization, updateCallRecordingTermsOfServiceSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update DECT Network
     *
     * Update the details of a DECT network.  DECT Networks provide roaming voice services via base stations and wireless handsets. A DECT network can be provisioned up to 1000 lines across up to 254 base stations.  This API requires a full or read-only administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDECTNetworkTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String orgId = null;
        String authorization = null;
        UpdateDECTNetworkRequest updateDECTNetworkRequest = null;
        api.updateDECTNetwork(locationId, dectNetworkId, orgId, authorization, updateDECTNetworkRequest);
        // TODO: test validations
    }

    /**
     * Update DECT Network Handset
     *
     * Update the line assignment on a handset.  A handset can have up to two lines, and a DECT network supports a total of 120 lines across all handsets. A member on line1 of a DECT handset can be of type PEOPLE or PLACE while a member on line2 of a DECT handset can be of type PEOPLE, PLACE, or VIRTUAL_LINE.  Updating a DECT Network handset requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  &lt;div&gt;&lt;Callout type&#x3D;\&quot;warning\&quot;&gt;Adding a person with a Webex Calling Standard license to the DECT handset line1 will disable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.  Removing a person with a Webex Calling Standard license from the DECT handset line1 will enable Webex Calling across their Webex mobile, tablet, desktop, and browser applications.&lt;/Callout&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDECTNetworkHandsetTest() throws ApiException {
        String locationId = null;
        String dectNetworkId = null;
        String handsetId = null;
        String orgId = null;
        String authorization = null;
        UpdateDECTNetworkHandsetRequest updateDECTNetworkHandsetRequest = null;
        api.updateDECTNetworkHandset(locationId, dectNetworkId, handsetId, orgId, authorization, updateDECTNetworkHandsetRequest);
        // TODO: test validations
    }

    /**
     * Update Directory search for a Virtual Line
     *
     * Update the directory search for a designated Virtual Line.  Virtual line is a capability in Webex Calling that allows administrators to configure multiple lines to Webex Calling users.  Updating Directory search for a virtual line requires a full or user administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDirectorySearchForAVirtualLineTest() throws ApiException {
        String virtualLineId = null;
        String orgId = null;
        String authorization = null;
        UpdateDirectorySearchForAVirtualLineRequest updateDirectorySearchForAVirtualLineRequest = null;
        api.updateDirectorySearchForAVirtualLine(virtualLineId, orgId, authorization, updateDirectorySearchForAVirtualLineRequest);
        // TODO: test validations
    }

    /**
     * Update Directory Sync for a BroadWorks Enterprise
     *
     * This API lets a Partner Admin enable or disable directory sync for the customer&#39;s Broadworks enterprise on Webex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDirectorySyncForABroadWorksEnterpriseTest() throws ApiException {
        String id = null;
        String authorization = null;
        UpdateDirectorySyncForABroadWorksEnterpriseRequest updateDirectorySyncForABroadWorksEnterpriseRequest = null;
        UpdateDirectorySyncForABroadWorksEnterprise200Response response = api.updateDirectorySyncForABroadWorksEnterprise(id, authorization, updateDirectorySyncForABroadWorksEnterpriseRequest);
        // TODO: test validations
    }

    /**
     * Update Location Outgoing Permission
     *
     * Update the location&#39;s outgoing call settings.  Location&#39;s outgoing call settings allows you to determine the types of calls the people/workspaces at this location are allowed to make and configure the default calling permission for each call type at a location.  Updating a location&#39;s outgoing call settings requires a full administrator or location administrator auth token with a scope of spark-admin:telephony_config_write.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocationOutgoingPermissionTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        UpdateLocationOutgoingPermissionRequest updateLocationOutgoingPermissionRequest = null;
        api.updateLocationOutgoingPermission(locationId, orgId, authorization, updateLocationOutgoingPermissionRequest);
        // TODO: test validations
    }

    /**
     * Update Location Voicemail
     *
     * Update the voicemail settings for a specific location.  Location voicemail settings allows you to enable voicemail transcription for a specific location.  Updating a location&#39;s voicemail settings requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocationVoicemailTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutLocationVoicemailObject putLocationVoicemailObject = null;
        api.updateLocationVoicemail(locationId, orgId, authorization, putLocationVoicemailObject);
        // TODO: test validations
    }

    /**
     * Update RedSky Service Settings
     *
     * Update the RedSky service settings.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Updating the RedSky service settings requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRedSkyServiceSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RedSkyServiceSettingsObject redSkyServiceSettingsObject = null;
        api.updateRedSkyServiceSettings(orgId, authorization, redSkyServiceSettingsObject);
        // TODO: test validations
    }

    /**
     * Update Selective Call Forwarding Rule for an Auto Attendant
     *
     * Update a Selective Call Forwarding Rule&#39;s settings for the designated Auto Attendant.  A selective call forwarding rule for an auto attendant allows calls to be forwarded or not forwarded to the designated number, based on the defined criteria.  Note that the list of existing call forward rules is available in the auto attendant&#39;s call forwarding settings.  Updating a selective call forwarding rule&#39;s settings for an auto attendant requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.  **NOTE**: The Call Forwarding Rule ID will change upon modification of the Call Forwarding Rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSelectiveCallForwardingRuleForAnAutoAttendantTest() throws ApiException {
        String locationId = null;
        String autoAttendantId = null;
        String ruleId = null;
        String orgId = null;
        String authorization = null;
        UpdateSelectiveCallForwardingRuleForAnAutoAttendantRequest updateSelectiveCallForwardingRuleForAnAutoAttendantRequest = null;
        UpdateASelectiveCallForwardingRuleForAHuntGroup201Response response = api.updateSelectiveCallForwardingRuleForAnAutoAttendant(locationId, autoAttendantId, ruleId, orgId, authorization, updateSelectiveCallForwardingRuleForAnAutoAttendantRequest);
        // TODO: test validations
    }

    /**
     * Update the location compliance announcement
     *
     * Update the location compliance announcement.  The Compliance Announcement feature interacts with the Call Recording feature, specifically with the playback of the start/stop announcement. When the compliance announcement is played to the PSTN party, and the PSTN party is connected to a party with call recording enabled, then the start/stop announcement is inhibited.  Updating the location compliance announcement requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTheLocationComplianceAnnouncementTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        UpdateTheLocationComplianceAnnouncementRequest updateTheLocationComplianceAnnouncementRequest = null;
        api.updateTheLocationComplianceAnnouncement(locationId, orgId, authorization, updateTheLocationComplianceAnnouncementRequest);
        // TODO: test validations
    }

    /**
     * Update the organization compliance announcement
     *
     * Update the organization compliance announcement.  The Compliance Announcement feature interacts with the Call Recording feature, specifically with the playback of the start/stop announcement. When the compliance announcement is played to the PSTN party, and the PSTN party is connected to a party with call recording enabled, then the start/stop announcement is inhibited.  Updating the organization compliance announcement requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTheOrganizationComplianceAnnouncementTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        UpdateTheOrganizationComplianceAnnouncementRequest updateTheOrganizationComplianceAnnouncementRequest = null;
        api.updateTheOrganizationComplianceAnnouncement(orgId, authorization, updateTheOrganizationComplianceAnnouncementRequest);
        // TODO: test validations
    }

    /**
     * Update the organization Music on Hold configuration
     *
     * Update the organization&#39;s Music on Hold settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTheOrganizationMusicOnHoldConfigurationTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        UpdateMusicOnHoldObject updateMusicOnHoldObject = null;
        api.updateTheOrganizationMusicOnHoldConfiguration(orgId, authorization, updateMusicOnHoldObject);
        // TODO: test validations
    }

    /**
     * Update the Organization RedSky Account&#39;s Compliance Status
     *
     * Update the compliance status for the customer&#39;s RedSky account.  The Enhanced Emergency (E911) Service for Webex Calling provides dynamic location support and a network that routes emergency calls to Public Safety Answering Points (PSAP) around the US, its territories, and Canada. E911 services are provided in conjunction with a RedSky account.  Updating the RedSky account&#39;s compliance status requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTheOrganizationRedSkyAccountsComplianceStatusTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        RedSkyComplianceStatusRequestObject redSkyComplianceStatusRequestObject = null;
        GetTheOrganizationComplianceStatusForARedSkyAccount200Response response = api.updateTheOrganizationRedSkyAccountsComplianceStatus(orgId, authorization, redSkyComplianceStatusRequestObject);
        // TODO: test validations
    }

    /**
     * Update VoicePortal
     *
     * Update Voice portal information for the location.  Voice portals provide an interactive voice response (IVR) system so administrators can manage auto attendant anouncements.  Updating voice portal information for an organization and/or rules requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVoicePortalTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        PutVoicePortalObject putVoicePortalObject = null;
        api.updateVoicePortal(locationId, orgId, authorization, putVoicePortalObject);
        // TODO: test validations
    }

    /**
     * Update Voicemail Rules
     *
     * Update the organization&#39;s default voicemail passcode and/or rules.  Organizational voicemail rules specify the default passcode requirements.  If you choose to set a default passcode for new people added to your organization, communicate to your people what that passcode is, and that it must be reset before they can access their voicemail. If this feature is not turned on, each new person must initially set their own passcode.  Updating an organization&#39;s voicemail passcode and/or rules requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVoicemailRulesTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        PutVoicemailRulesObject putVoicemailRulesObject = null;
        api.updateVoicemailRules(orgId, authorization, putVoicemailRulesObject);
        // TODO: test validations
    }

    /**
     * Update Voicemail Settings
     *
     * Update the organization&#39;s voicemail settings.  Organizational voicemail settings determines what voicemail features a person can configure and automatic message expiration.  Updating an organization&#39;s voicemail settings requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVoicemailSettingsTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        PutVoicemailSettingsObject putVoicemailSettingsObject = null;
        api.updateVoicemailSettings(orgId, authorization, putVoicemailSettingsObject);
        // TODO: test validations
    }

    /**
     * Upload a binary announcement greeting at organization level
     *
     * Upload a binary file to the announcement repository at an organization level.  An admin can upload a file at an organization level. This file will be uploaded to the announcement repository.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60; .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadABinaryAnnouncementGreetingAtOrganizationLevelTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        UploadABinaryAnnouncementGreetingAtOrganizationLevel201Response response = api.uploadABinaryAnnouncementGreetingAtOrganizationLevel(orgId, authorization);
        // TODO: test validations
    }

    /**
     * Upload a binary announcement greeting at the location level
     *
     * Upload a binary file to the announcement repository at a location level.  An admin can upload a file at a location level. This file will be uploaded to the announcement repository.  Your request will need to be a &#x60;multipart/form-data&#x60; request rather than JSON, using the &#x60;audio/wav&#x60; Content-Type.  This API requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60; .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadABinaryAnnouncementGreetingAtTheLocationLevelTest() throws ApiException {
        String locationId = null;
        String orgId = null;
        String authorization = null;
        UploadABinaryAnnouncementGreetingAtOrganizationLevel201Response response = api.uploadABinaryAnnouncementGreetingAtTheLocationLevel(locationId, orgId, authorization);
        // TODO: test validations
    }

    /**
     * Validate a Dial Pattern
     *
     * Validate a Dial Pattern.  Dial plans route calls to on-premises destinations by use of trunks or route groups. They are configured globally for an enterprise and apply to all users, regardless of location. A dial plan also specifies the routing choice (trunk or route group) for calls that match any of its dial patterns. Specific dial patterns can be defined as part of your dial plan.  Validating a dial pattern requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateADialPatternTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        ValidateADialPatternRequest validateADialPatternRequest = null;
        ValidateADialPattern200Response response = api.validateADialPattern(orgId, authorization, validateADialPatternRequest);
        // TODO: test validations
    }

    /**
     * Validate Local Gateway FQDN and Domain for a Trunk
     *
     * Validate Local Gateway FQDN and Domain for the organization trunks.  A Trunk is a connection between Webex Calling and the premises, which terminates on the premises with a local gateway or other supported device. The trunk can be assigned to a Route Group - a group of trunks that allow Webex Calling to distribute calls over multiple trunks or to provide redundancy.  Validating Local Gateway FQDN and Domain requires a full administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateLocalGatewayFQDNAndDomainForATrunkTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        TrunkFQDNValidatePost trunkFQDNValidatePost = null;
        api.validateLocalGatewayFQDNAndDomainForATrunk(orgId, authorization, trunkFQDNValidatePost);
        // TODO: test validations
    }

    /**
     * Validate or Initiate Move Users Job
     *
     * This API allows the user to perform one of the following operations:  * Setting the &#x60;validate&#x60; attribute to &#x60;true&#x60; validates the user move.  * Setting the &#x60;validate&#x60; attribute to &#x60;false&#x60; performs the user move.  &lt;br/&gt;  In order to validate or move a user,  &lt;br/&gt;  * The user being moved must be a calling user.  * A maximum of &#x60;100&#x60; calling users can be moved at a time.  * The target location must be a calling location.  &lt;br/&gt;  Errors occurring during the initial API request validation are captured directly in the error response, along with the appropriate HTTP status code.  &lt;br/&gt;  Below is a list of possible error &#x60;code&#x60; values and their associated &#x60;message&#x60;, which can be found in the &#x60;errors&#x60; array during initial API request validation, regardless of the &#x60;validate&#x60; attribute value:  * BATCH-400 - Attribute &#39;Location ID&#39; is required.  * BATCH-400 - Attribute &#39;User ID&#39; is required.  * BATCH-400 - Users list should not be empty.  * BATCH-400 - Users should not be empty.  * 1026006 - Attribute &#39;Validate&#39; is required.  * 1026010 - User is not a valid Calling User.  * 1026011 - Users list should not be empty.  * 1026012 - Users should not be empty.  * 1026013 - The source and the target location cannot be the same.  * 1026014 - Error occurred while processing the move users request.  * 1026015 - Error occurred while moving user number to target location.  * 1026016 - User should have either phone number or extension.  * 1026017 - Phone number is not in e164 format.  * 1026018 - Selected Users list exceeds the maximum limit.  * 1026019 - Duplicate entry for user is not allowed.  * 1026020 - Validate &#39;true&#39; is supported only for single user.  &lt;br/&gt;  When the &#x60;validate&#x60; attribute is set to true, the API identifies and returns the &#x60;errors&#x60; and &#x60;impacts&#x60; associated with the user move in the response.  &lt;br/&gt;  Below is a list of possible error &#x60;code&#x60; values and their associated &#x60;message&#x60;, which can be found in the &#x60;errors&#x60; array, when &#x60;validate&#x60; attribute is set to be true:  * 4003 - &#x60;User Not Found&#x60;  * 4007 - &#x60;User Not Found&#x60;  * 4152 - &#x60;Location Not Found&#x60;  * 5620 - &#x60;Location Not Found&#x60;  * 4202 - &#x60;The extension is not available. It is already assigned to a user : {0}&#x60;  * 8264 - &#x60;Routing profile is different with new group: {0}&#x60;  * 19600 - &#x60;User has to be within an enterprise to be moved.&#x60;  * 19601 - &#x60;User can only be moved to a different group within the same enterprise.&#x60;  * 19602 - &#x60;Only regular end user can be moved. Service instance virtual user cannot be moved.&#x60;  * 19603 - &#x60;New group already reaches maximum number of user limits.&#x60;  * 19604 - &#x60;The {0} number of the user is the same as the calling line ID of the group.&#x60;  * 19605 - &#x60;User is assigned services not authorized to the new group: {0}.&#x60;  * 19606 - &#x60;User is in an active hoteling/flexible seating association.&#x60;  * 19607 - &#x60;User is pilot user of a trunk group.&#x60;  * 19608 - &#x60;User is using group level device profiles which is used by other users in current group. Following are the device profiles shared with other users: {0}.&#x60;  * 19609 - &#x60;Following device profiles cannot be moved to the new group because there are already devices with the same name defined in the new group: {0}.&#x60;  * 19610 - &#x60;The extension of the user is used as transfer to operator number for following Auto Attendent : {0}.&#x60;  * 19611 - &#x60;Fail to move announcement file from {0} to {1}.&#x60;  * 19612 - &#x60;Fail to move device management file from {0} to {1}.&#x60;  * 19613 - &#x60;User is assigned service packs not authorized to the new group: {0}.&#x60;  * 25008 - &#x60;Missing Mandatory field name: {0}&#x60;  * 25110 - &#x60;{fieldName} cannot be less than {0} or greater than {1} characters.&#x60;  * 25378 - &#x60;Target location is same as user&#39;s current location.&#x60;  * 25379 - &#x60;Error Occurred while Fetching User&#39;s Current Location Id.&#x60;  * 25381 - &#x60;Error Occurred while rolling back to Old Location Call recording Settings&#x60;  * 25382 - &#x60;Error Occurred while Disabling Call Recording for user which is required Before User can be Moved&#x60;  * 25383 - &#x60;OCI Error while moving user&#x60;  * 25384 - &#x60;Error Occurred while checking for Possible Call Recording Impact.&#x60;  * 25385 - &#x60;Error Occurred while getting Call Recording Settings&#x60;  * 27559 - &#x60;The groupExternalId search criteria contains groups with different calling zone.&#x60;  * 27960 - &#x60;Parameter isWebexCalling, newPhoneNumber, or newExtension can only be set in Webex Calling deployment mode.&#x60;  * 27961 - &#x60;Parameter isWebexCalling shall be set if newPhoneNumber or newExtension is set.&#x60;  * 27962 - &#x60;Work space cannot be moved.&#x60;  * 27963 - &#x60;Virtual profile user cannot be moved.&#x60;  * 27965 - &#x60;The user&#39;s phone number: {0}, is same as the current group charge number.&#x60;  * 27966 - &#x60;The phone number, {0}, is not available in the new group.&#x60;  * 27967 - &#x60;User is configured as the ECBN user for another user in the current group.&#x60;  * 27968 - &#x60;User is configured as the ECBN user for the current group.&#x60;  * 27969 - &#x60;User is associated with DECT handset(s): {0}&#x60;  * 27970 - &#x60;User is using a customer managed device: {0}&#x60;  * 27971 - &#x60;User is using an ATA device: {0}&#x60;  * 27972 - &#x60;User is in an active hotdesking association.&#x60;  * 27975 - &#x60;Need to unassign CLID number from group before moving the number to the new group. Phone number: {0}&#x60;  * 27976 - &#x60;Local Gateway configuration is different with new group. Phone number: {0}&#x60;  * 1026015 - &#x60;Error occurred while moving user number to target location&#x60;  * 10010000 - &#x60;Total numbers exceeded maximum limit allowed&#x60;  * 10010001 - &#x60;to-location and from-location cannot be same&#x60;  * 10010002 - &#x60;to-location and from-location should belong to same customer&#x60;  * 10010003 - &#x60;to-location must have a carrier&#x60;  * 10010004 - &#x60;from-location must have a carrier&#x60;  * 10010005 - &#x60;Different Carrier move is not supported for non-Cisco PSTN carriers.&#x60;  * 10010006 - &#x60;Number move not supported for WEBEX_DIRECT carriers.&#x60;  * 10010007 - &#x60;Numbers out of sync, missing on CPAPI&#x60;  * 10010008 - &#x60;from-location not found or pstn connection missing in CPAPI&#x60;  * 10010010 - &#x60;from-location is in transition&#x60;  * 10010009 - &#x60;to-location not found or pstn connection missing in CPAPI&#x60;  * 10010011 - &#x60;to-location is in transition&#x60;  * 10010012 - &#x60;Numbers don&#39;t have a carrier Id&#x60;  * 10010013 - &#x60;Location less numbers don&#39;t have a carrier Id&#x60;  * 10010014 - &#x60;Different Carrier move is not supported for numbers with different country or region.&#x60;  * 10010015 - &#x60;Numbers contain mobile and non-mobile types.&#x60;  * 10010016 - &#x60;To/From location carriers must be same for mobile numbers.&#x60;  * 10010017 - &#x60;Move request for location less number not supported&#x60;  * 10010200 - &#x60;Move request for more than one block number is not supported&#x60;  * 10010201 - &#x60;Cannot move block number as few numbers not from the block starting %s to %s&#x60;  * 10010202 - &#x60;Cannot move block number as few numbers failed VERIFICATION from the block %s to %s&#x60;  * 10010203 - &#x60;Cannot move block number as few numbers missing from the block %s to %s&#x60;  * 10010204 - &#x60;Cannot move number as it is NOT a part of the block %s to %s&#x60;  * 10010205 - &#x60;Move request for Cisco PSTN block order not supported.&#x60;  * 10010299 - &#x60;Move order couldn&#39;t be created as no valid number to move&#x60;  * 10030000 - &#x60;Number not found&#x60;  * 10030001 - &#x60;Number does not belong to from-location&#x60;  * 10030002 - &#x60;Number is not present in CPAPI&#x60;  * 10030003 - &#x60;Number assigned to an user or device&#x60;  * 10030004 - &#x60;Number not in Active status&#x60;  * 10030005 - &#x60;Number is set as main number of the location&#x60;  * 10030006 - &#x60;Number has pending order associated with it&#x60;  * 10030007 - &#x60;Number belongs to a location but a from-location was not set&#x60;  * 10030008 - &#x60;Numbers from multiple carrier ids are not supported&#x60;  * 10030009 - &#x60;Location less number belongs to a location. from-location value is set to null or no location id&#x60;  * 10030010 - &#x60;One or more numbers are not portable.&#x60;  * 10030011 - &#x60;Mobile number carrier was not set&#x60;  * 10030012 - &#x60;Number must be assigned for assigned move&#x60;  * 10050000 - &#x60;Failed to update customer reference for phone numbers on carrier&#x60;  * 10050001 - &#x60;Failed to update customer reference&#x60;  * 10050002 - &#x60;Order is not of operation type MOVE&#x60;  * 10050003 - &#x60;CPAPI delete call failed&#x60;  * 10050004 - &#x60;Not found in database&#x60;  * 10050005 - &#x60;Error sending notification to WxcBillingService&#x60;  * 10050006 - &#x60;CPAPI provision number as active call failed with status %s ,reason %s&#x60;  * 10050007 - &#x60;Failed to update E911 Service&#x60;  * 10050008 - &#x60;Target location does not have Inbound Toll Free license&#x60;  * 10050009 - &#x60;Source location or Target location subscription found cancelled or suspended&#x60;  * 10050010 - &#x60;Moving On Premises or Non Integrated CCP numbers from one location to another is not supported.&#x60;  * 10099999 - &#x60;{Error Code} - {Error Message}&#x60;  &lt;br/&gt;  Below is a list of possible impact &#x60;code&#x60; values and their associated &#x60;message&#x60;, which can be found in the &#x60;impacts&#x60; array, when &#x60;validate&#x60; attribute is set to be true:  * 19701 - &#x60;The identity/device profile the user is using is moved to the new group: {0}.&#x60;  * 19702 - &#x60;The user level customized incoming digit string setting is removed from the user. User is set to use the new group setting.&#x60;  * 19703 - &#x60;The user level customized outgoing digit plan setting is removed from the user. User is set to use the new group setting.&#x60;  * 19704 - &#x60;The user level customized enhanced outgoing calling plan setting is removed from the user. User is set to use the new group setting.&#x60;  * 19705 - &#x60;User is removed from following group services: {0}.&#x60;  * 19706 - &#x60;The current group schedule used in any criteria is removed from the service settings.&#x60;  * 19707 - &#x60;User is removed from the department of the old group.&#x60;  * 19708 - &#x60;User is changed to use the default communication barring profile of the new group.&#x60;  * 19709 - &#x60;The communication barring profile of the user is assigned to the new group: {0}.&#x60;  * 19710 - &#x60;The charge number for the user is removed.&#x60;  * 19711 - &#x60;The disabled FACs for the user are removed because they are not available in the new group.&#x60;  * 19712 - &#x60;User is removed from trunk group.&#x60;  * 19713 - &#x60;The extension of the user is reset to empty due to either the length is out of bounds of the new group, or the extension is already taken in new group.&#x60;  * 19714 - &#x60;The extension of the following alternate number is reset to empty due to either the length out of bounds of the new group or the extension is already taken in new group: {0}.&#x60;  * 19715 - &#x60;The collaborate room using current group default collaborate bridge is moved to the default collaborate bridge of the new group.&#x60;  * 19716 - &#x60;Previously stored voice messages of the user are no longer available. The new voice message will be stored on the mail server of the new group.&#x60;  * 19717 - &#x60;The primary number, alternate numbers or fax messaging number of the user are assigned to the new group: {0}.&#x60;  * 19718 - &#x60;Following domains are assigned to the new group: {0}.&#x60;  * 19719 - &#x60;The NCOS of the user is assigned to the new group: {0}.&#x60;  * 19720 - &#x60;The office zone of the user is assigned to the new group: {0}.&#x60;  * 19721 - &#x60;The announcement media files are relocated to the new group directory.&#x60;  * 19722 - &#x60;User CLID number is set to use the new group CLID number: {0}.&#x60;  * 19723 - &#x60;New group CLID number is not configured.&#x60;  * 19724 - &#x60;The group level announcement file(s) are removed from the user&#39;s music on hold settings.&#x60;  * 25388 - &#x60;Target Location Does not Have Vendor Configured. Call Recording for user will be disabled&#x60;  * 25389 - &#x60;Call Recording Vendor for user will be changed from:{0} to:{1}&#x60;  * 25390 - &#x60;Dub point of user is moved to new external group&#x60;  * 25391 - &#x60;Error Occurred while moving Call recording Settings to new location&#x60;  * 25392 - &#x60;Error Occurred while checking for Possible Call Recording Impact.&#x60;  * 25393 - &#x60;Sending Billing Notification Failed&#x60;  This API requires a full administrator auth token with the scopes &#x60;spark-admin:telephony_config_write&#x60;, &#x60;spark-admin:people_write&#x60;, and &#x60;identity:groups_rw&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateOrInitiateMoveUsersJobTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        MoveUsersStartJobObject moveUsersStartJobObject = null;
        ValidateOrInitiateMoveUsersJob200Response response = api.validateOrInitiateMoveUsersJob(orgId, authorization, moveUsersStartJobObject);
        // TODO: test validations
    }

    /**
     * Validate phone numbers.
     *
     * Validate the list of phone numbers in an organization. Each phone number&#39;s availability is indicated in the response.  Each location has a set of phone numbers that can be assigned to people, workspaces, or features. Phone numbers must follow the E.164 format for all countries, except for the United States, which can also follow the National format. Active phone numbers are in service.  Validating a phone number in an organization requires a full administrator or location administrator auth token with a scope of &#x60;spark-admin:telephony_config_write&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validatePhoneNumbersTest() throws ApiException {
        String orgId = null;
        String authorization = null;
        ValidateNumbersPostRequest validateNumbersPostRequest = null;
        ValidatePhoneNumbers200Response response = api.validatePhoneNumbers(orgId, authorization, validateNumbersPostRequest);
        // TODO: test validations
    }

}
