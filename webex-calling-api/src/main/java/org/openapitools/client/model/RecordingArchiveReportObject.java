// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordingArchiveReportObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class RecordingArchiveReportObject {
  public static final String SERIALIZED_NAME_ARCHIVE_ID = "archiveId";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_ID)
  private String archiveId;

  /**
   * Recording achrive report&#39;s service-type.
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    MEETING_CENTER("MeetingCenter"),
    
    EVENT_CENTER("EventCenter"),
    
    TRAINING_CENTER("TrainingCenter"),
    
    SUPPORT_CENTER("SupportCenter");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private ServiceTypeEnum serviceType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_HOST_DISPLAY_NAME = "hostDisplayName";
  @SerializedName(SERIALIZED_NAME_HOST_DISPLAY_NAME)
  private String hostDisplayName;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<Object> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHATS = "chats";
  @SerializedName(SERIALIZED_NAME_CHATS)
  private List<Object> chats = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLLS = "polls";
  @SerializedName(SERIALIZED_NAME_POLLS)
  private List<Object> polls = new ArrayList<>();

  public static final String SERIALIZED_NAME_QAS = "qas";
  @SerializedName(SERIALIZED_NAME_QAS)
  private List<Object> qas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEM_INFOS = "systemInfos";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INFOS)
  private List<Object> systemInfos = new ArrayList<>();

  public RecordingArchiveReportObject() {
  }

  public RecordingArchiveReportObject archiveId(String archiveId) {
    this.archiveId = archiveId;
    return this;
  }

  /**
   * A unique identifier for the meeting archive summary.
   * @return archiveId
   */
  @javax.annotation.Nullable
  public String getArchiveId() {
    return archiveId;
  }

  public void setArchiveId(String archiveId) {
    this.archiveId = archiveId;
  }


  public RecordingArchiveReportObject serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Recording achrive report&#39;s service-type.
   * @return serviceType
   */
  @javax.annotation.Nullable
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  public RecordingArchiveReportObject title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Meeting title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public RecordingArchiveReportObject start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Start time for meeting in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant format.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public RecordingArchiveReportObject end(String end) {
    this.end = end;
    return this;
  }

  /**
   * End time for a meeting in ISO 8601 compliant format.
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public RecordingArchiveReportObject hostDisplayName(String hostDisplayName) {
    this.hostDisplayName = hostDisplayName;
    return this;
  }

  /**
   * Display name for the meeting host.
   * @return hostDisplayName
   */
  @javax.annotation.Nullable
  public String getHostDisplayName() {
    return hostDisplayName;
  }

  public void setHostDisplayName(String hostDisplayName) {
    this.hostDisplayName = hostDisplayName;
  }


  public RecordingArchiveReportObject hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Email address for the meeting host.
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public RecordingArchiveReportObject participants(List<Object> participants) {
    this.participants = participants;
    return this;
  }

  public RecordingArchiveReportObject addParticipantsItem(Object participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * The participants of the meeting archive.
   * @return participants
   */
  @javax.annotation.Nullable
  public List<Object> getParticipants() {
    return participants;
  }

  public void setParticipants(List<Object> participants) {
    this.participants = participants;
  }


  public RecordingArchiveReportObject chats(List<Object> chats) {
    this.chats = chats;
    return this;
  }

  public RecordingArchiveReportObject addChatsItem(Object chatsItem) {
    if (this.chats == null) {
      this.chats = new ArrayList<>();
    }
    this.chats.add(chatsItem);
    return this;
  }

  /**
   * The chats of the meeting archive.
   * @return chats
   */
  @javax.annotation.Nullable
  public List<Object> getChats() {
    return chats;
  }

  public void setChats(List<Object> chats) {
    this.chats = chats;
  }


  public RecordingArchiveReportObject polls(List<Object> polls) {
    this.polls = polls;
    return this;
  }

  public RecordingArchiveReportObject addPollsItem(Object pollsItem) {
    if (this.polls == null) {
      this.polls = new ArrayList<>();
    }
    this.polls.add(pollsItem);
    return this;
  }

  /**
   * The polls of the meeting archive.
   * @return polls
   */
  @javax.annotation.Nullable
  public List<Object> getPolls() {
    return polls;
  }

  public void setPolls(List<Object> polls) {
    this.polls = polls;
  }


  public RecordingArchiveReportObject qas(List<Object> qas) {
    this.qas = qas;
    return this;
  }

  public RecordingArchiveReportObject addQasItem(Object qasItem) {
    if (this.qas == null) {
      this.qas = new ArrayList<>();
    }
    this.qas.add(qasItem);
    return this;
  }

  /**
   * Meeting meeting archive&#39;s Q and A.
   * @return qas
   */
  @javax.annotation.Nullable
  public List<Object> getQas() {
    return qas;
  }

  public void setQas(List<Object> qas) {
    this.qas = qas;
  }


  public RecordingArchiveReportObject systemInfos(List<Object> systemInfos) {
    this.systemInfos = systemInfos;
    return this;
  }

  public RecordingArchiveReportObject addSystemInfosItem(Object systemInfosItem) {
    if (this.systemInfos == null) {
      this.systemInfos = new ArrayList<>();
    }
    this.systemInfos.add(systemInfosItem);
    return this;
  }

  /**
   * The system Information of the meeting archive, which can be only supported when serviceType is &#x60;SupportCenter&#x60;.
   * @return systemInfos
   */
  @javax.annotation.Nullable
  public List<Object> getSystemInfos() {
    return systemInfos;
  }

  public void setSystemInfos(List<Object> systemInfos) {
    this.systemInfos = systemInfos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordingArchiveReportObject recordingArchiveReportObject = (RecordingArchiveReportObject) o;
    return Objects.equals(this.archiveId, recordingArchiveReportObject.archiveId) &&
        Objects.equals(this.serviceType, recordingArchiveReportObject.serviceType) &&
        Objects.equals(this.title, recordingArchiveReportObject.title) &&
        Objects.equals(this.start, recordingArchiveReportObject.start) &&
        Objects.equals(this.end, recordingArchiveReportObject.end) &&
        Objects.equals(this.hostDisplayName, recordingArchiveReportObject.hostDisplayName) &&
        Objects.equals(this.hostEmail, recordingArchiveReportObject.hostEmail) &&
        Objects.equals(this.participants, recordingArchiveReportObject.participants) &&
        Objects.equals(this.chats, recordingArchiveReportObject.chats) &&
        Objects.equals(this.polls, recordingArchiveReportObject.polls) &&
        Objects.equals(this.qas, recordingArchiveReportObject.qas) &&
        Objects.equals(this.systemInfos, recordingArchiveReportObject.systemInfos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveId, serviceType, title, start, end, hostDisplayName, hostEmail, participants, chats, polls, qas, systemInfos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordingArchiveReportObject {\n");
    sb.append("    archiveId: ").append(toIndentedString(archiveId)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    hostDisplayName: ").append(toIndentedString(hostDisplayName)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    chats: ").append(toIndentedString(chats)).append("\n");
    sb.append("    polls: ").append(toIndentedString(polls)).append("\n");
    sb.append("    qas: ").append(toIndentedString(qas)).append("\n");
    sb.append("    systemInfos: ").append(toIndentedString(systemInfos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveId");
    openapiFields.add("serviceType");
    openapiFields.add("title");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("hostDisplayName");
    openapiFields.add("hostEmail");
    openapiFields.add("participants");
    openapiFields.add("chats");
    openapiFields.add("polls");
    openapiFields.add("qas");
    openapiFields.add("systemInfos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordingArchiveReportObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordingArchiveReportObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordingArchiveReportObject is not found in the empty JSON string", RecordingArchiveReportObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordingArchiveReportObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordingArchiveReportObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archiveId") != null && !jsonObj.get("archiveId").isJsonNull()) && !jsonObj.get("archiveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveId").toString()));
      }
      if ((jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) && !jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
      // validate the optional field `serviceType`
      if (jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) {
        ServiceTypeEnum.validateJsonElement(jsonObj.get("serviceType"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("hostDisplayName") != null && !jsonObj.get("hostDisplayName").isJsonNull()) && !jsonObj.get("hostDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostDisplayName").toString()));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull() && !jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("chats") != null && !jsonObj.get("chats").isJsonNull() && !jsonObj.get("chats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chats` to be an array in the JSON string but got `%s`", jsonObj.get("chats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("polls") != null && !jsonObj.get("polls").isJsonNull() && !jsonObj.get("polls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `polls` to be an array in the JSON string but got `%s`", jsonObj.get("polls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qas") != null && !jsonObj.get("qas").isJsonNull() && !jsonObj.get("qas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qas` to be an array in the JSON string but got `%s`", jsonObj.get("qas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("systemInfos") != null && !jsonObj.get("systemInfos").isJsonNull() && !jsonObj.get("systemInfos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemInfos` to be an array in the JSON string but got `%s`", jsonObj.get("systemInfos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordingArchiveReportObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordingArchiveReportObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordingArchiveReportObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordingArchiveReportObject.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordingArchiveReportObject>() {
           @Override
           public void write(JsonWriter out, RecordingArchiveReportObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordingArchiveReportObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordingArchiveReportObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordingArchiveReportObject
   * @throws IOException if the JSON string is invalid with respect to RecordingArchiveReportObject
   */
  public static RecordingArchiveReportObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordingArchiveReportObject.class);
  }

  /**
   * Convert an instance of RecordingArchiveReportObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

