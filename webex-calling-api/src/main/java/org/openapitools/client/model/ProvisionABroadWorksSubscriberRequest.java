// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProvisionABroadWorksSubscriberRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ProvisionABroadWorksSubscriberRequest {
  public static final String SERIALIZED_NAME_PROVISIONING_ID = "provisioningId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ID)
  private String provisioningId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_SP_ENTERPRISE_ID = "spEnterpriseId";
  @SerializedName(SERIALIZED_NAME_SP_ENTERPRISE_ID)
  private String spEnterpriseId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * The Webex for BroadWorks package to be assigned to the subscriber.
   */
  @JsonAdapter(PackageEnum.Adapter.class)
  public enum PackageEnum {
    SOFTPHONE("softphone"),
    
    BASIC("basic"),
    
    STANDARD("standard"),
    
    PREMIUM("premium");

    private String value;

    PackageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageEnum fromValue(String value) {
      for (PackageEnum b : PackageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private PackageEnum _package;

  public static final String SERIALIZED_NAME_PRIMARY_PHONE_NUMBER = "primaryPhoneNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PHONE_NUMBER)
  private String primaryPhoneNumber;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_NUMBER = "mobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_NUMBER)
  private String mobilePhoneNumber;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public ProvisionABroadWorksSubscriberRequest() {
  }

  public ProvisionABroadWorksSubscriberRequest provisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
    return this;
  }

  /**
   * This Provisioning ID defines how this subscriber is to be provisioned for Webex Services.  Each Customer Template will have their own unique Provisioning ID. This ID will be displayed under the chosen Customer Template on Webex Partner Hub.
   * @return provisioningId
   */
  @javax.annotation.Nonnull
  public String getProvisioningId() {
    return provisioningId;
  }

  public void setProvisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
  }


  public ProvisionABroadWorksSubscriberRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The user ID of the subscriber on BroadWorks.
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public ProvisionABroadWorksSubscriberRequest spEnterpriseId(String spEnterpriseId) {
    this.spEnterpriseId = spEnterpriseId;
    return this;
  }

  /**
   * The Service Provider supplied unique identifier for the subscriber&#39;s enterprise.
   * @return spEnterpriseId
   */
  @javax.annotation.Nonnull
  public String getSpEnterpriseId() {
    return spEnterpriseId;
  }

  public void setSpEnterpriseId(String spEnterpriseId) {
    this.spEnterpriseId = spEnterpriseId;
  }


  public ProvisionABroadWorksSubscriberRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the subscriber.
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ProvisionABroadWorksSubscriberRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the subscriber.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ProvisionABroadWorksSubscriberRequest _package(PackageEnum _package) {
    this._package = _package;
    return this;
  }

  /**
   * The Webex for BroadWorks package to be assigned to the subscriber.
   * @return _package
   */
  @javax.annotation.Nonnull
  public PackageEnum getPackage() {
    return _package;
  }

  public void setPackage(PackageEnum _package) {
    this._package = _package;
  }


  public ProvisionABroadWorksSubscriberRequest primaryPhoneNumber(String primaryPhoneNumber) {
    this.primaryPhoneNumber = primaryPhoneNumber;
    return this;
  }

  /**
   * The primary phone number configured against the subscriber on BroadWorks.
   * @return primaryPhoneNumber
   */
  @javax.annotation.Nullable
  public String getPrimaryPhoneNumber() {
    return primaryPhoneNumber;
  }

  public void setPrimaryPhoneNumber(String primaryPhoneNumber) {
    this.primaryPhoneNumber = primaryPhoneNumber;
  }


  public ProvisionABroadWorksSubscriberRequest mobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  /**
   * The mobile phone number configured against the subscriber on BroadWorks. Any empty value on update will remove the already configured mobile phone number.
   * @return mobilePhoneNumber
   */
  @javax.annotation.Nullable
  public String getMobilePhoneNumber() {
    return mobilePhoneNumber;
  }

  public void setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
  }


  public ProvisionABroadWorksSubscriberRequest extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * The extension number configured against the subscriber on BroadWorks.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public ProvisionABroadWorksSubscriberRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the subscriber (mandatory for the trusted email provisioning flow).
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ProvisionABroadWorksSubscriberRequest language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The {ISO-639-1}_{ISO-3166} or {ISO-639-1} locale or language code used as preferred language for organization and Webex Meeting Sites. Refer to the [help page](https://www.cisco.com/content/en/us/td/docs/voice_ip_comm/cloudCollaboration/wx4bwks/Solution_Guide/wbxbw_b_solution-guide/wbxbw_b_SolutionGuide-PDF_chapter_01.html#Cisco_Reference.dita_f10351e1-f775-418d-a700-ec8487e0a33b) for more information.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public ProvisionABroadWorksSubscriberRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The time zone associated with the subscriber. Refer to the [Webex Meetings Site Timezone](/docs/api/guides/webex-for-broadworks-developers-guide#webex-meetings-site-timezone) section of the [Webex for BroadWorks](/docs/api/guides/webex-for-broadworks-developers-guide) guide for more information.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionABroadWorksSubscriberRequest provisionABroadWorksSubscriberRequest = (ProvisionABroadWorksSubscriberRequest) o;
    return Objects.equals(this.provisioningId, provisionABroadWorksSubscriberRequest.provisioningId) &&
        Objects.equals(this.userId, provisionABroadWorksSubscriberRequest.userId) &&
        Objects.equals(this.spEnterpriseId, provisionABroadWorksSubscriberRequest.spEnterpriseId) &&
        Objects.equals(this.firstName, provisionABroadWorksSubscriberRequest.firstName) &&
        Objects.equals(this.lastName, provisionABroadWorksSubscriberRequest.lastName) &&
        Objects.equals(this._package, provisionABroadWorksSubscriberRequest._package) &&
        Objects.equals(this.primaryPhoneNumber, provisionABroadWorksSubscriberRequest.primaryPhoneNumber) &&
        Objects.equals(this.mobilePhoneNumber, provisionABroadWorksSubscriberRequest.mobilePhoneNumber) &&
        Objects.equals(this.extension, provisionABroadWorksSubscriberRequest.extension) &&
        Objects.equals(this.email, provisionABroadWorksSubscriberRequest.email) &&
        Objects.equals(this.language, provisionABroadWorksSubscriberRequest.language) &&
        Objects.equals(this.timezone, provisionABroadWorksSubscriberRequest.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningId, userId, spEnterpriseId, firstName, lastName, _package, primaryPhoneNumber, mobilePhoneNumber, extension, email, language, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionABroadWorksSubscriberRequest {\n");
    sb.append("    provisioningId: ").append(toIndentedString(provisioningId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    spEnterpriseId: ").append(toIndentedString(spEnterpriseId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    primaryPhoneNumber: ").append(toIndentedString(primaryPhoneNumber)).append("\n");
    sb.append("    mobilePhoneNumber: ").append(toIndentedString(mobilePhoneNumber)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningId");
    openapiFields.add("userId");
    openapiFields.add("spEnterpriseId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("package");
    openapiFields.add("primaryPhoneNumber");
    openapiFields.add("mobilePhoneNumber");
    openapiFields.add("extension");
    openapiFields.add("email");
    openapiFields.add("language");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provisioningId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("spEnterpriseId");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("package");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionABroadWorksSubscriberRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionABroadWorksSubscriberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionABroadWorksSubscriberRequest is not found in the empty JSON string", ProvisionABroadWorksSubscriberRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionABroadWorksSubscriberRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionABroadWorksSubscriberRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisionABroadWorksSubscriberRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("provisioningId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("spEnterpriseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spEnterpriseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spEnterpriseId").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      // validate the required field `package`
      PackageEnum.validateJsonElement(jsonObj.get("package"));
      if ((jsonObj.get("primaryPhoneNumber") != null && !jsonObj.get("primaryPhoneNumber").isJsonNull()) && !jsonObj.get("primaryPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPhoneNumber").toString()));
      }
      if ((jsonObj.get("mobilePhoneNumber") != null && !jsonObj.get("mobilePhoneNumber").isJsonNull()) && !jsonObj.get("mobilePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneNumber").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionABroadWorksSubscriberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionABroadWorksSubscriberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionABroadWorksSubscriberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionABroadWorksSubscriberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionABroadWorksSubscriberRequest>() {
           @Override
           public void write(JsonWriter out, ProvisionABroadWorksSubscriberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionABroadWorksSubscriberRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionABroadWorksSubscriberRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionABroadWorksSubscriberRequest
   * @throws IOException if the JSON string is invalid with respect to ProvisionABroadWorksSubscriberRequest
   */
  public static ProvisionABroadWorksSubscriberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionABroadWorksSubscriberRequest.class);
  }

  /**
   * Convert an instance of ProvisionABroadWorksSubscriberRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

