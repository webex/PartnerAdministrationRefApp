// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListOfRecordingAuditReportSummaries200ResponseItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ListOfRecordingAuditReportSummaries200ResponseItemsInner {
  public static final String SERIALIZED_NAME_RECORDING_ID = "recordingId";
  @SerializedName(SERIALIZED_NAME_RECORDING_ID)
  private String recordingId;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TIME_RECORDED = "timeRecorded";
  @SerializedName(SERIALIZED_NAME_TIME_RECORDED)
  private String timeRecorded;

  public static final String SERIALIZED_NAME_SITE_URL = "siteUrl";
  @SerializedName(SERIALIZED_NAME_SITE_URL)
  private String siteUrl;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private BigDecimal viewCount;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "downloadCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private BigDecimal downloadCount;

  public ListOfRecordingAuditReportSummaries200ResponseItemsInner() {
  }

  public ListOfRecordingAuditReportSummaries200ResponseItemsInner recordingId(String recordingId) {
    this.recordingId = recordingId;
    return this;
  }

  /**
   * A unique identifier for the recording.
   * @return recordingId
   */
  @javax.annotation.Nullable
  public String getRecordingId() {
    return recordingId;
  }

  public void setRecordingId(String recordingId) {
    this.recordingId = recordingId;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * The recording&#39;s topic.
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner timeRecorded(String timeRecorded) {
    this.timeRecorded = timeRecorded;
    return this;
  }

  /**
   * The date and time the recording started in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant format. the time is the record button was clicked in the meeting.
   * @return timeRecorded
   */
  @javax.annotation.Nullable
  public String getTimeRecorded() {
    return timeRecorded;
  }

  public void setTimeRecorded(String timeRecorded) {
    this.timeRecorded = timeRecorded;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner siteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
    return this;
  }

  /**
   * Site URL for the recording.
   * @return siteUrl
   */
  @javax.annotation.Nullable
  public String getSiteUrl() {
    return siteUrl;
  }

  public void setSiteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Email address for the meeting host.
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner viewCount(BigDecimal viewCount) {
    this.viewCount = viewCount;
    return this;
  }

  /**
   * The number of times the recording was viewed.
   * @return viewCount
   */
  @javax.annotation.Nullable
  public BigDecimal getViewCount() {
    return viewCount;
  }

  public void setViewCount(BigDecimal viewCount) {
    this.viewCount = viewCount;
  }


  public ListOfRecordingAuditReportSummaries200ResponseItemsInner downloadCount(BigDecimal downloadCount) {
    this.downloadCount = downloadCount;
    return this;
  }

  /**
   * The number of times the recording was downloaded.
   * @return downloadCount
   */
  @javax.annotation.Nullable
  public BigDecimal getDownloadCount() {
    return downloadCount;
  }

  public void setDownloadCount(BigDecimal downloadCount) {
    this.downloadCount = downloadCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListOfRecordingAuditReportSummaries200ResponseItemsInner listOfRecordingAuditReportSummaries200ResponseItemsInner = (ListOfRecordingAuditReportSummaries200ResponseItemsInner) o;
    return Objects.equals(this.recordingId, listOfRecordingAuditReportSummaries200ResponseItemsInner.recordingId) &&
        Objects.equals(this.topic, listOfRecordingAuditReportSummaries200ResponseItemsInner.topic) &&
        Objects.equals(this.timeRecorded, listOfRecordingAuditReportSummaries200ResponseItemsInner.timeRecorded) &&
        Objects.equals(this.siteUrl, listOfRecordingAuditReportSummaries200ResponseItemsInner.siteUrl) &&
        Objects.equals(this.hostEmail, listOfRecordingAuditReportSummaries200ResponseItemsInner.hostEmail) &&
        Objects.equals(this.viewCount, listOfRecordingAuditReportSummaries200ResponseItemsInner.viewCount) &&
        Objects.equals(this.downloadCount, listOfRecordingAuditReportSummaries200ResponseItemsInner.downloadCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordingId, topic, timeRecorded, siteUrl, hostEmail, viewCount, downloadCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListOfRecordingAuditReportSummaries200ResponseItemsInner {\n");
    sb.append("    recordingId: ").append(toIndentedString(recordingId)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    timeRecorded: ").append(toIndentedString(timeRecorded)).append("\n");
    sb.append("    siteUrl: ").append(toIndentedString(siteUrl)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recordingId");
    openapiFields.add("topic");
    openapiFields.add("timeRecorded");
    openapiFields.add("siteUrl");
    openapiFields.add("hostEmail");
    openapiFields.add("viewCount");
    openapiFields.add("downloadCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListOfRecordingAuditReportSummaries200ResponseItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListOfRecordingAuditReportSummaries200ResponseItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListOfRecordingAuditReportSummaries200ResponseItemsInner is not found in the empty JSON string", ListOfRecordingAuditReportSummaries200ResponseItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListOfRecordingAuditReportSummaries200ResponseItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListOfRecordingAuditReportSummaries200ResponseItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recordingId") != null && !jsonObj.get("recordingId").isJsonNull()) && !jsonObj.get("recordingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordingId").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("timeRecorded") != null && !jsonObj.get("timeRecorded").isJsonNull()) && !jsonObj.get("timeRecorded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeRecorded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeRecorded").toString()));
      }
      if ((jsonObj.get("siteUrl") != null && !jsonObj.get("siteUrl").isJsonNull()) && !jsonObj.get("siteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteUrl").toString()));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListOfRecordingAuditReportSummaries200ResponseItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListOfRecordingAuditReportSummaries200ResponseItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListOfRecordingAuditReportSummaries200ResponseItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListOfRecordingAuditReportSummaries200ResponseItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListOfRecordingAuditReportSummaries200ResponseItemsInner>() {
           @Override
           public void write(JsonWriter out, ListOfRecordingAuditReportSummaries200ResponseItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListOfRecordingAuditReportSummaries200ResponseItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListOfRecordingAuditReportSummaries200ResponseItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListOfRecordingAuditReportSummaries200ResponseItemsInner
   * @throws IOException if the JSON string is invalid with respect to ListOfRecordingAuditReportSummaries200ResponseItemsInner
   */
  public static ListOfRecordingAuditReportSummaries200ResponseItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListOfRecordingAuditReportSummaries200ResponseItemsInner.class);
  }

  /**
   * Convert an instance of ListOfRecordingAuditReportSummaries200ResponseItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

