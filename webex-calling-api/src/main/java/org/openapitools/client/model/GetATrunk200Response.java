// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetATrunk200ResponseCustomer;
import org.openapitools.client.model.GetATrunk200ResponseResponseStatus;
import org.openapitools.client.model.ReadTheListOfTrunks200ResponseTrunksInnerLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetATrunk200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetATrunk200Response {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private GetATrunk200ResponseCustomer customer;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ReadTheListOfTrunks200ResponseTrunksInnerLocation location;

  public static final String SERIALIZED_NAME_OTG_DTG_ID = "otgDtgId";
  @SerializedName(SERIALIZED_NAME_OTG_DTG_ID)
  private String otgDtgId;

  public static final String SERIALIZED_NAME_LINE_PORT = "linePort";
  @SerializedName(SERIALIZED_NAME_LINE_PORT)
  private String linePort;

  public static final String SERIALIZED_NAME_LOCATIONS_USING_TRUNK = "locationsUsingTrunk";
  @SerializedName(SERIALIZED_NAME_LOCATIONS_USING_TRUNK)
  private List<Object> locationsUsingTrunk = new ArrayList<>();

  public static final String SERIALIZED_NAME_PILOT_USER_ID = "pilotUserId";
  @SerializedName(SERIALIZED_NAME_PILOT_USER_ID)
  private String pilotUserId;

  public static final String SERIALIZED_NAME_OUTBOUND_PROXY = "outboundProxy";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_PROXY)
  private Object outboundProxy;

  public static final String SERIALIZED_NAME_SIP_AUTHENTICATION_USER_NAME = "sipAuthenticationUserName";
  @SerializedName(SERIALIZED_NAME_SIP_AUTHENTICATION_USER_NAME)
  private String sipAuthenticationUserName;

  /**
   * Device status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONLINE("ONLINE"),
    
    OFFLINE("OFFLINE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERROR_CODES = "errorCodes";
  @SerializedName(SERIALIZED_NAME_ERROR_CODES)
  private List<Object> errorCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private GetATrunk200ResponseResponseStatus responseStatus;

  public static final String SERIALIZED_NAME_DUAL_IDENTITY_SUPPORT_ENABLED = "dualIdentitySupportEnabled";
  @SerializedName(SERIALIZED_NAME_DUAL_IDENTITY_SUPPORT_ENABLED)
  private Boolean dualIdentitySupportEnabled;

  /**
   * Trunk Type associated with the trunk.
   */
  @JsonAdapter(TrunkTypeEnum.Adapter.class)
  public enum TrunkTypeEnum {
    REGISTERING("REGISTERING"),
    
    CERTIFICATE_BASED("CERTIFICATE_BASED");

    private String value;

    TrunkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrunkTypeEnum fromValue(String value) {
      for (TrunkTypeEnum b : TrunkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrunkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrunkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrunkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrunkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrunkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUNK_TYPE = "trunkType";
  @SerializedName(SERIALIZED_NAME_TRUNK_TYPE)
  private TrunkTypeEnum trunkType;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private BigDecimal port;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_CALLS = "maxConcurrentCalls";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_CALLS)
  private BigDecimal maxConcurrentCalls;

  public static final String SERIALIZED_NAME_IS_RESTRICTED_TO_DEDICATED_INSTANCE = "isRestrictedToDedicatedInstance";
  @SerializedName(SERIALIZED_NAME_IS_RESTRICTED_TO_DEDICATED_INSTANCE)
  private Boolean isRestrictedToDedicatedInstance;

  public GetATrunk200Response() {
  }

  public GetATrunk200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique name for the trunk.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetATrunk200Response customer(GetATrunk200ResponseCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nonnull
  public GetATrunk200ResponseCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(GetATrunk200ResponseCustomer customer) {
    this.customer = customer;
  }


  public GetATrunk200Response location(ReadTheListOfTrunks200ResponseTrunksInnerLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public ReadTheListOfTrunks200ResponseTrunksInnerLocation getLocation() {
    return location;
  }

  public void setLocation(ReadTheListOfTrunks200ResponseTrunksInnerLocation location) {
    this.location = location;
  }


  public GetATrunk200Response otgDtgId(String otgDtgId) {
    this.otgDtgId = otgDtgId;
    return this;
  }

  /**
   * Unique Outgoing and Destination trunk group associated with the dial plan.
   * @return otgDtgId
   */
  @javax.annotation.Nullable
  public String getOtgDtgId() {
    return otgDtgId;
  }

  public void setOtgDtgId(String otgDtgId) {
    this.otgDtgId = otgDtgId;
  }


  public GetATrunk200Response linePort(String linePort) {
    this.linePort = linePort;
    return this;
  }

  /**
   * The Line/Port identifies a device endpoint in standalone mode or a SIP URI public identity in IMS mode.
   * @return linePort
   */
  @javax.annotation.Nullable
  public String getLinePort() {
    return linePort;
  }

  public void setLinePort(String linePort) {
    this.linePort = linePort;
  }


  public GetATrunk200Response locationsUsingTrunk(List<Object> locationsUsingTrunk) {
    this.locationsUsingTrunk = locationsUsingTrunk;
    return this;
  }

  public GetATrunk200Response addLocationsUsingTrunkItem(Object locationsUsingTrunkItem) {
    if (this.locationsUsingTrunk == null) {
      this.locationsUsingTrunk = new ArrayList<>();
    }
    this.locationsUsingTrunk.add(locationsUsingTrunkItem);
    return this;
  }

  /**
   * Locations using trunk.
   * @return locationsUsingTrunk
   */
  @javax.annotation.Nullable
  public List<Object> getLocationsUsingTrunk() {
    return locationsUsingTrunk;
  }

  public void setLocationsUsingTrunk(List<Object> locationsUsingTrunk) {
    this.locationsUsingTrunk = locationsUsingTrunk;
  }


  public GetATrunk200Response pilotUserId(String pilotUserId) {
    this.pilotUserId = pilotUserId;
    return this;
  }

  /**
   * User ID.
   * @return pilotUserId
   */
  @javax.annotation.Nullable
  public String getPilotUserId() {
    return pilotUserId;
  }

  public void setPilotUserId(String pilotUserId) {
    this.pilotUserId = pilotUserId;
  }


  public GetATrunk200Response outboundProxy(Object outboundProxy) {
    this.outboundProxy = outboundProxy;
    return this;
  }

  /**
   * Contains the body of the HTTP response received following the request to Console API and will not be set if the response has no body.
   * @return outboundProxy
   */
  @javax.annotation.Nullable
  public Object getOutboundProxy() {
    return outboundProxy;
  }

  public void setOutboundProxy(Object outboundProxy) {
    this.outboundProxy = outboundProxy;
  }


  public GetATrunk200Response sipAuthenticationUserName(String sipAuthenticationUserName) {
    this.sipAuthenticationUserName = sipAuthenticationUserName;
    return this;
  }

  /**
   * User&#39;s authentication service information.
   * @return sipAuthenticationUserName
   */
  @javax.annotation.Nullable
  public String getSipAuthenticationUserName() {
    return sipAuthenticationUserName;
  }

  public void setSipAuthenticationUserName(String sipAuthenticationUserName) {
    this.sipAuthenticationUserName = sipAuthenticationUserName;
  }


  public GetATrunk200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Device status.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetATrunk200Response errorCodes(List<Object> errorCodes) {
    this.errorCodes = errorCodes;
    return this;
  }

  public GetATrunk200Response addErrorCodesItem(Object errorCodesItem) {
    if (this.errorCodes == null) {
      this.errorCodes = new ArrayList<>();
    }
    this.errorCodes.add(errorCodesItem);
    return this;
  }

  /**
   * Error codes.
   * @return errorCodes
   */
  @javax.annotation.Nullable
  public List<Object> getErrorCodes() {
    return errorCodes;
  }

  public void setErrorCodes(List<Object> errorCodes) {
    this.errorCodes = errorCodes;
  }


  public GetATrunk200Response responseStatus(GetATrunk200ResponseResponseStatus responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * Get responseStatus
   * @return responseStatus
   */
  @javax.annotation.Nullable
  public GetATrunk200ResponseResponseStatus getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(GetATrunk200ResponseResponseStatus responseStatus) {
    this.responseStatus = responseStatus;
  }


  public GetATrunk200Response dualIdentitySupportEnabled(Boolean dualIdentitySupportEnabled) {
    this.dualIdentitySupportEnabled = dualIdentitySupportEnabled;
    return this;
  }

  /**
   * Determines the behavior of the From and PAI headers on outbound calls.
   * @return dualIdentitySupportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDualIdentitySupportEnabled() {
    return dualIdentitySupportEnabled;
  }

  public void setDualIdentitySupportEnabled(Boolean dualIdentitySupportEnabled) {
    this.dualIdentitySupportEnabled = dualIdentitySupportEnabled;
  }


  public GetATrunk200Response trunkType(TrunkTypeEnum trunkType) {
    this.trunkType = trunkType;
    return this;
  }

  /**
   * Trunk Type associated with the trunk.
   * @return trunkType
   */
  @javax.annotation.Nonnull
  public TrunkTypeEnum getTrunkType() {
    return trunkType;
  }

  public void setTrunkType(TrunkTypeEnum trunkType) {
    this.trunkType = trunkType;
  }


  public GetATrunk200Response deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Device type assosiated with trunk.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public GetATrunk200Response address(String address) {
    this.address = address;
    return this;
  }

  /**
   * FQDN or SRV address. Required to create a static certificate-based trunk.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public GetATrunk200Response domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name. Required to create a static certificate based trunk.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public GetATrunk200Response port(BigDecimal port) {
    this.port = port;
    return this;
  }

  /**
   * FQDN port. Required to create a static certificate-based trunk.
   * @return port
   */
  @javax.annotation.Nonnull
  public BigDecimal getPort() {
    return port;
  }

  public void setPort(BigDecimal port) {
    this.port = port;
  }


  public GetATrunk200Response maxConcurrentCalls(BigDecimal maxConcurrentCalls) {
    this.maxConcurrentCalls = maxConcurrentCalls;
    return this;
  }

  /**
   * Max Concurrent call. Required to create a static certificate based trunk.
   * @return maxConcurrentCalls
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxConcurrentCalls() {
    return maxConcurrentCalls;
  }

  public void setMaxConcurrentCalls(BigDecimal maxConcurrentCalls) {
    this.maxConcurrentCalls = maxConcurrentCalls;
  }


  public GetATrunk200Response isRestrictedToDedicatedInstance(Boolean isRestrictedToDedicatedInstance) {
    this.isRestrictedToDedicatedInstance = isRestrictedToDedicatedInstance;
    return this;
  }

  /**
   * Flag to indicate if the trunk is restricted to a dedicated instance.
   * @return isRestrictedToDedicatedInstance
   */
  @javax.annotation.Nullable
  public Boolean getIsRestrictedToDedicatedInstance() {
    return isRestrictedToDedicatedInstance;
  }

  public void setIsRestrictedToDedicatedInstance(Boolean isRestrictedToDedicatedInstance) {
    this.isRestrictedToDedicatedInstance = isRestrictedToDedicatedInstance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetATrunk200Response getATrunk200Response = (GetATrunk200Response) o;
    return Objects.equals(this.name, getATrunk200Response.name) &&
        Objects.equals(this.customer, getATrunk200Response.customer) &&
        Objects.equals(this.location, getATrunk200Response.location) &&
        Objects.equals(this.otgDtgId, getATrunk200Response.otgDtgId) &&
        Objects.equals(this.linePort, getATrunk200Response.linePort) &&
        Objects.equals(this.locationsUsingTrunk, getATrunk200Response.locationsUsingTrunk) &&
        Objects.equals(this.pilotUserId, getATrunk200Response.pilotUserId) &&
        Objects.equals(this.outboundProxy, getATrunk200Response.outboundProxy) &&
        Objects.equals(this.sipAuthenticationUserName, getATrunk200Response.sipAuthenticationUserName) &&
        Objects.equals(this.status, getATrunk200Response.status) &&
        Objects.equals(this.errorCodes, getATrunk200Response.errorCodes) &&
        Objects.equals(this.responseStatus, getATrunk200Response.responseStatus) &&
        Objects.equals(this.dualIdentitySupportEnabled, getATrunk200Response.dualIdentitySupportEnabled) &&
        Objects.equals(this.trunkType, getATrunk200Response.trunkType) &&
        Objects.equals(this.deviceType, getATrunk200Response.deviceType) &&
        Objects.equals(this.address, getATrunk200Response.address) &&
        Objects.equals(this.domain, getATrunk200Response.domain) &&
        Objects.equals(this.port, getATrunk200Response.port) &&
        Objects.equals(this.maxConcurrentCalls, getATrunk200Response.maxConcurrentCalls) &&
        Objects.equals(this.isRestrictedToDedicatedInstance, getATrunk200Response.isRestrictedToDedicatedInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, customer, location, otgDtgId, linePort, locationsUsingTrunk, pilotUserId, outboundProxy, sipAuthenticationUserName, status, errorCodes, responseStatus, dualIdentitySupportEnabled, trunkType, deviceType, address, domain, port, maxConcurrentCalls, isRestrictedToDedicatedInstance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetATrunk200Response {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    otgDtgId: ").append(toIndentedString(otgDtgId)).append("\n");
    sb.append("    linePort: ").append(toIndentedString(linePort)).append("\n");
    sb.append("    locationsUsingTrunk: ").append(toIndentedString(locationsUsingTrunk)).append("\n");
    sb.append("    pilotUserId: ").append(toIndentedString(pilotUserId)).append("\n");
    sb.append("    outboundProxy: ").append(toIndentedString(outboundProxy)).append("\n");
    sb.append("    sipAuthenticationUserName: ").append(toIndentedString(sipAuthenticationUserName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorCodes: ").append(toIndentedString(errorCodes)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    dualIdentitySupportEnabled: ").append(toIndentedString(dualIdentitySupportEnabled)).append("\n");
    sb.append("    trunkType: ").append(toIndentedString(trunkType)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    maxConcurrentCalls: ").append(toIndentedString(maxConcurrentCalls)).append("\n");
    sb.append("    isRestrictedToDedicatedInstance: ").append(toIndentedString(isRestrictedToDedicatedInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("customer");
    openapiFields.add("location");
    openapiFields.add("otgDtgId");
    openapiFields.add("linePort");
    openapiFields.add("locationsUsingTrunk");
    openapiFields.add("pilotUserId");
    openapiFields.add("outboundProxy");
    openapiFields.add("sipAuthenticationUserName");
    openapiFields.add("status");
    openapiFields.add("errorCodes");
    openapiFields.add("responseStatus");
    openapiFields.add("dualIdentitySupportEnabled");
    openapiFields.add("trunkType");
    openapiFields.add("deviceType");
    openapiFields.add("address");
    openapiFields.add("domain");
    openapiFields.add("port");
    openapiFields.add("maxConcurrentCalls");
    openapiFields.add("isRestrictedToDedicatedInstance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("trunkType");
    openapiRequiredFields.add("port");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetATrunk200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetATrunk200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetATrunk200Response is not found in the empty JSON string", GetATrunk200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetATrunk200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetATrunk200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetATrunk200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `customer`
      GetATrunk200ResponseCustomer.validateJsonElement(jsonObj.get("customer"));
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        ReadTheListOfTrunks200ResponseTrunksInnerLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("otgDtgId") != null && !jsonObj.get("otgDtgId").isJsonNull()) && !jsonObj.get("otgDtgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otgDtgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otgDtgId").toString()));
      }
      if ((jsonObj.get("linePort") != null && !jsonObj.get("linePort").isJsonNull()) && !jsonObj.get("linePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linePort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locationsUsingTrunk") != null && !jsonObj.get("locationsUsingTrunk").isJsonNull() && !jsonObj.get("locationsUsingTrunk").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationsUsingTrunk` to be an array in the JSON string but got `%s`", jsonObj.get("locationsUsingTrunk").toString()));
      }
      if ((jsonObj.get("pilotUserId") != null && !jsonObj.get("pilotUserId").isJsonNull()) && !jsonObj.get("pilotUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pilotUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pilotUserId").toString()));
      }
      if ((jsonObj.get("sipAuthenticationUserName") != null && !jsonObj.get("sipAuthenticationUserName").isJsonNull()) && !jsonObj.get("sipAuthenticationUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sipAuthenticationUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sipAuthenticationUserName").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorCodes") != null && !jsonObj.get("errorCodes").isJsonNull() && !jsonObj.get("errorCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCodes` to be an array in the JSON string but got `%s`", jsonObj.get("errorCodes").toString()));
      }
      // validate the optional field `responseStatus`
      if (jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) {
        GetATrunk200ResponseResponseStatus.validateJsonElement(jsonObj.get("responseStatus"));
      }
      if (!jsonObj.get("trunkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trunkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trunkType").toString()));
      }
      // validate the required field `trunkType`
      TrunkTypeEnum.validateJsonElement(jsonObj.get("trunkType"));
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetATrunk200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetATrunk200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetATrunk200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetATrunk200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetATrunk200Response>() {
           @Override
           public void write(JsonWriter out, GetATrunk200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetATrunk200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetATrunk200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetATrunk200Response
   * @throws IOException if the JSON string is invalid with respect to GetATrunk200Response
   */
  public static GetATrunk200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetATrunk200Response.class);
  }

  /**
   * Convert an instance of GetATrunk200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

