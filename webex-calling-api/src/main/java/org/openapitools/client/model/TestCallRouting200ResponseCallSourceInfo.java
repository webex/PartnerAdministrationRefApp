// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Only returned when &#x60;originatorNumber&#x60; is specified in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class TestCallRouting200ResponseCallSourceInfo {
  /**
   * Type of call source.
   */
  @JsonAdapter(CallSourceTypeEnum.Adapter.class)
  public enum CallSourceTypeEnum {
    ROUTE_LIST("ROUTE_LIST"),
    
    DIAL_PATTERN("DIAL_PATTERN"),
    
    UNKOWN_EXTENSION("UNKOWN_EXTENSION"),
    
    UNKOWN_NUMBER("UNKOWN_NUMBER"),
    
    DIAL_PATTERN2("DIAL_PATTERN");

    private String value;

    CallSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallSourceTypeEnum fromValue(String value) {
      for (CallSourceTypeEnum b : CallSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallSourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallSourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALL_SOURCE_TYPE = "callSourceType";
  @SerializedName(SERIALIZED_NAME_CALL_SOURCE_TYPE)
  private CallSourceTypeEnum callSourceType;

  public static final String SERIALIZED_NAME_ROUTE_LIST_NAME = "routeListName";
  @SerializedName(SERIALIZED_NAME_ROUTE_LIST_NAME)
  private String routeListName;

  public static final String SERIALIZED_NAME_ROUTE_LIST_ID = "routeListId";
  @SerializedName(SERIALIZED_NAME_ROUTE_LIST_ID)
  private String routeListId;

  public static final String SERIALIZED_NAME_DIAL_PLAN_NAME = "dialPlanName";
  @SerializedName(SERIALIZED_NAME_DIAL_PLAN_NAME)
  private String dialPlanName;

  public static final String SERIALIZED_NAME_DIAL_PATTERN = "dialPattern";
  @SerializedName(SERIALIZED_NAME_DIAL_PATTERN)
  private String dialPattern;

  public static final String SERIALIZED_NAME_DIAL_PLAN_ID = "dialPlanId";
  @SerializedName(SERIALIZED_NAME_DIAL_PLAN_ID)
  private String dialPlanId;

  public TestCallRouting200ResponseCallSourceInfo() {
  }

  public TestCallRouting200ResponseCallSourceInfo callSourceType(CallSourceTypeEnum callSourceType) {
    this.callSourceType = callSourceType;
    return this;
  }

  /**
   * Type of call source.
   * @return callSourceType
   */
  @javax.annotation.Nonnull
  public CallSourceTypeEnum getCallSourceType() {
    return callSourceType;
  }

  public void setCallSourceType(CallSourceTypeEnum callSourceType) {
    this.callSourceType = callSourceType;
  }


  public TestCallRouting200ResponseCallSourceInfo routeListName(String routeListName) {
    this.routeListName = routeListName;
    return this;
  }

  /**
   * Name of a route list.  When &#x60;originatorType&#x60; is &#x60;trunk&#x60;, &#x60;originatorId&#x60; is a valid trunk and the trunk belongs to a route group which is assigned to a route list with the name &#x60;routeListA&#x60; and also &#x60;originatorNumber&#x60; is a number assigned to &#x60;routeListA&#x60;, then &#x60;routeListA&#x60; is returned here. This element is returned when &#x60;callSourceType&#x60; is &#x60;ROUTE_LIST&#x60;.
   * @return routeListName
   */
  @javax.annotation.Nullable
  public String getRouteListName() {
    return routeListName;
  }

  public void setRouteListName(String routeListName) {
    this.routeListName = routeListName;
  }


  public TestCallRouting200ResponseCallSourceInfo routeListId(String routeListId) {
    this.routeListId = routeListId;
    return this;
  }

  /**
   * Unique identifier for the route list.
   * @return routeListId
   */
  @javax.annotation.Nullable
  public String getRouteListId() {
    return routeListId;
  }

  public void setRouteListId(String routeListId) {
    this.routeListId = routeListId;
  }


  public TestCallRouting200ResponseCallSourceInfo dialPlanName(String dialPlanName) {
    this.dialPlanName = dialPlanName;
    return this;
  }

  /**
   * Name of a dial plan. When &#x60;originatorType&#x60; is &#x60;trunk&#x60;, &#x60;originatorId&#x60; is a valid trunk with the name &#x60;trunkA&#x60;, &#x60;trunkA&#x60; belongs to a route group which is assigned to a route list with the name &#x60;routeListA&#x60;, &#x60;trunkA&#x60; is also assigned to &#x60;dialPlanA&#x60; as routing choice, &#x60;dialPlanA&#x60; has &#x60;dialPattern&#x60; xxxx assigned. If the &#x60;originatorNumber&#x60; matches the &#x60;dialPattern&#x60; &#x60;xxxx&#x60;, &#x60;dialPlanA&#x60; is returned. This element is returned when &#x60;callSourceType&#x60; is &#x60;DIAL_PATTERN&#x60;.
   * @return dialPlanName
   */
  @javax.annotation.Nullable
  public String getDialPlanName() {
    return dialPlanName;
  }

  public void setDialPlanName(String dialPlanName) {
    this.dialPlanName = dialPlanName;
  }


  public TestCallRouting200ResponseCallSourceInfo dialPattern(String dialPattern) {
    this.dialPattern = dialPattern;
    return this;
  }

  /**
   * Pattern given to a dial plan. When &#x60;originatorType&#x60; is &#x60;trunk&#x60;, &#x60;originatorId&#x60; is a valid trunk with the name &#x60;trunkA&#x60;, &#x60;trunkA&#x60; belongs to a route group which is assigned to a route list with the name &#x60;routeListA&#x60;, &#x60;trunkA&#x60; is also assigned to &#x60;dialPlanA&#x60; as routing choice, &#x60;dialPlanA&#x60; has &#x60;dialPattern&#x60; &#x60;xxxx&#x60; assigned. If the &#x60;originatorNumber&#x60; matches the &#x60;dialPattern&#x60; &#x60;xxxx&#x60;, &#x60;dialPattern&#x60; &#x60;xxxx&#x60; is returned. This element is returned when &#x60;callSourceType&#x60; is &#x60;DIAL_PATTERN&#x60;.
   * @return dialPattern
   */
  @javax.annotation.Nullable
  public String getDialPattern() {
    return dialPattern;
  }

  public void setDialPattern(String dialPattern) {
    this.dialPattern = dialPattern;
  }


  public TestCallRouting200ResponseCallSourceInfo dialPlanId(String dialPlanId) {
    this.dialPlanId = dialPlanId;
    return this;
  }

  /**
   * Unique identifier for dial plan.
   * @return dialPlanId
   */
  @javax.annotation.Nullable
  public String getDialPlanId() {
    return dialPlanId;
  }

  public void setDialPlanId(String dialPlanId) {
    this.dialPlanId = dialPlanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCallRouting200ResponseCallSourceInfo testCallRouting200ResponseCallSourceInfo = (TestCallRouting200ResponseCallSourceInfo) o;
    return Objects.equals(this.callSourceType, testCallRouting200ResponseCallSourceInfo.callSourceType) &&
        Objects.equals(this.routeListName, testCallRouting200ResponseCallSourceInfo.routeListName) &&
        Objects.equals(this.routeListId, testCallRouting200ResponseCallSourceInfo.routeListId) &&
        Objects.equals(this.dialPlanName, testCallRouting200ResponseCallSourceInfo.dialPlanName) &&
        Objects.equals(this.dialPattern, testCallRouting200ResponseCallSourceInfo.dialPattern) &&
        Objects.equals(this.dialPlanId, testCallRouting200ResponseCallSourceInfo.dialPlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callSourceType, routeListName, routeListId, dialPlanName, dialPattern, dialPlanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCallRouting200ResponseCallSourceInfo {\n");
    sb.append("    callSourceType: ").append(toIndentedString(callSourceType)).append("\n");
    sb.append("    routeListName: ").append(toIndentedString(routeListName)).append("\n");
    sb.append("    routeListId: ").append(toIndentedString(routeListId)).append("\n");
    sb.append("    dialPlanName: ").append(toIndentedString(dialPlanName)).append("\n");
    sb.append("    dialPattern: ").append(toIndentedString(dialPattern)).append("\n");
    sb.append("    dialPlanId: ").append(toIndentedString(dialPlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callSourceType");
    openapiFields.add("routeListName");
    openapiFields.add("routeListId");
    openapiFields.add("dialPlanName");
    openapiFields.add("dialPattern");
    openapiFields.add("dialPlanId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callSourceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCallRouting200ResponseCallSourceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCallRouting200ResponseCallSourceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCallRouting200ResponseCallSourceInfo is not found in the empty JSON string", TestCallRouting200ResponseCallSourceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCallRouting200ResponseCallSourceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCallRouting200ResponseCallSourceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCallRouting200ResponseCallSourceInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("callSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callSourceType").toString()));
      }
      // validate the required field `callSourceType`
      CallSourceTypeEnum.validateJsonElement(jsonObj.get("callSourceType"));
      if ((jsonObj.get("routeListName") != null && !jsonObj.get("routeListName").isJsonNull()) && !jsonObj.get("routeListName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeListName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeListName").toString()));
      }
      if ((jsonObj.get("routeListId") != null && !jsonObj.get("routeListId").isJsonNull()) && !jsonObj.get("routeListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeListId").toString()));
      }
      if ((jsonObj.get("dialPlanName") != null && !jsonObj.get("dialPlanName").isJsonNull()) && !jsonObj.get("dialPlanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialPlanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialPlanName").toString()));
      }
      if ((jsonObj.get("dialPattern") != null && !jsonObj.get("dialPattern").isJsonNull()) && !jsonObj.get("dialPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialPattern").toString()));
      }
      if ((jsonObj.get("dialPlanId") != null && !jsonObj.get("dialPlanId").isJsonNull()) && !jsonObj.get("dialPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialPlanId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCallRouting200ResponseCallSourceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCallRouting200ResponseCallSourceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCallRouting200ResponseCallSourceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCallRouting200ResponseCallSourceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCallRouting200ResponseCallSourceInfo>() {
           @Override
           public void write(JsonWriter out, TestCallRouting200ResponseCallSourceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCallRouting200ResponseCallSourceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCallRouting200ResponseCallSourceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCallRouting200ResponseCallSourceInfo
   * @throws IOException if the JSON string is invalid with respect to TestCallRouting200ResponseCallSourceInfo
   */
  public static TestCallRouting200ResponseCallSourceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCallRouting200ResponseCallSourceInfo.class);
  }

  /**
   * Convert an instance of TestCallRouting200ResponseCallSourceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

