// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CDR
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CDR {
  public static final String SERIALIZED_NAME_ANSWER_INDICATOR = "Answer indicator";
  @SerializedName(SERIALIZED_NAME_ANSWER_INDICATOR)
  private String answerIndicator;

  public static final String SERIALIZED_NAME_ANSWER_TIME = "Answer time";
  @SerializedName(SERIALIZED_NAME_ANSWER_TIME)
  private String answerTime;

  public static final String SERIALIZED_NAME_ANSWERED = "Answered";
  @SerializedName(SERIALIZED_NAME_ANSWERED)
  private String answered;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE = "Authorization code";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE)
  private String authorizationCode;

  public static final String SERIALIZED_NAME_CALL_I_D = "Call ID";
  @SerializedName(SERIALIZED_NAME_CALL_I_D)
  private String callID;

  public static final String SERIALIZED_NAME_CALL_OUTCOME = "Call outcome";
  @SerializedName(SERIALIZED_NAME_CALL_OUTCOME)
  private String callOutcome;

  public static final String SERIALIZED_NAME_CALL_OUTCOME_REASON = "Call outcome reason";
  @SerializedName(SERIALIZED_NAME_CALL_OUTCOME_REASON)
  private String callOutcomeReason;

  public static final String SERIALIZED_NAME_CALL_TRANSFER_TIME = "Call transfer Time";
  @SerializedName(SERIALIZED_NAME_CALL_TRANSFER_TIME)
  private String callTransferTime;

  public static final String SERIALIZED_NAME_CALL_TYPE = "Call type";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private String callType;

  public static final String SERIALIZED_NAME_CALLED_LINE_I_D = "Called line ID";
  @SerializedName(SERIALIZED_NAME_CALLED_LINE_I_D)
  private String calledLineID;

  public static final String SERIALIZED_NAME_CALLED_NUMBER = "Called number";
  @SerializedName(SERIALIZED_NAME_CALLED_NUMBER)
  private String calledNumber;

  public static final String SERIALIZED_NAME_CALLING_LINE_I_D = "Calling line ID";
  @SerializedName(SERIALIZED_NAME_CALLING_LINE_I_D)
  private String callingLineID;

  public static final String SERIALIZED_NAME_CALLING_NUMBER = "Calling number";
  @SerializedName(SERIALIZED_NAME_CALLING_NUMBER)
  private String callingNumber;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "Client type";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private String clientType;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "Client version";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_CORRELATION_I_D = "Correlation ID";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D)
  private String correlationID;

  public static final String SERIALIZED_NAME_DEPARTMENT_I_D = "Department ID";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_I_D)
  private String departmentID;

  public static final String SERIALIZED_NAME_DEVICE_M_A_C = "Device MAC";
  @SerializedName(SERIALIZED_NAME_DEVICE_M_A_C)
  private String deviceMAC;

  public static final String SERIALIZED_NAME_DIALED_DIGITS = "Dialed digits";
  @SerializedName(SERIALIZED_NAME_DIALED_DIGITS)
  private String dialedDigits;

  public static final String SERIALIZED_NAME_DIRECTION = "Direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_FINAL_LOCAL_SESSION_I_D = "Final local SessionID";
  @SerializedName(SERIALIZED_NAME_FINAL_LOCAL_SESSION_I_D)
  private String finalLocalSessionID;

  public static final String SERIALIZED_NAME_FINAL_REMOTE_SESSION_I_D = "Final remote SessionID";
  @SerializedName(SERIALIZED_NAME_FINAL_REMOTE_SESSION_I_D)
  private String finalRemoteSessionID;

  public static final String SERIALIZED_NAME_INBOUND_TRUNK = "Inbound trunk";
  @SerializedName(SERIALIZED_NAME_INBOUND_TRUNK)
  private String inboundTrunk;

  public static final String SERIALIZED_NAME_INTERNATIONAL_COUNTRY = "International country";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_COUNTRY)
  private String internationalCountry;

  public static final String SERIALIZED_NAME_LOCAL_CALL_I_D = "Local call ID";
  @SerializedName(SERIALIZED_NAME_LOCAL_CALL_I_D)
  private String localCallID;

  public static final String SERIALIZED_NAME_LOCAL_SESSION_I_D = "Local SessionID";
  @SerializedName(SERIALIZED_NAME_LOCAL_SESSION_I_D)
  private String localSessionID;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MODEL = "Model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NETWORK_CALL_I_D = "Network call ID";
  @SerializedName(SERIALIZED_NAME_NETWORK_CALL_I_D)
  private String networkCallID;

  public static final String SERIALIZED_NAME_ORG_U_U_I_D = "Org UUID";
  @SerializedName(SERIALIZED_NAME_ORG_U_U_I_D)
  private String orgUUID;

  public static final String SERIALIZED_NAME_ORIGINAL_REASON = "Original reason";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_REASON)
  private String originalReason;

  public static final String SERIALIZED_NAME_OS_TYPE = "OS type";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OUTBOUND_TRUNK = "Outbound trunk";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_TRUNK)
  private String outboundTrunk;

  public static final String SERIALIZED_NAME_RELEASE_TIME = "Release time";
  @SerializedName(SERIALIZED_NAME_RELEASE_TIME)
  private String releaseTime;

  public static final String SERIALIZED_NAME_RING_DURATION = "Ring duration";
  @SerializedName(SERIALIZED_NAME_RING_DURATION)
  private BigDecimal ringDuration;

  public static final String SERIALIZED_NAME_REDIRECT_REASON = "Redirect reason";
  @SerializedName(SERIALIZED_NAME_REDIRECT_REASON)
  private String redirectReason;

  public static final String SERIALIZED_NAME_REDIRECTING_NUMBER = "Redirecting number";
  @SerializedName(SERIALIZED_NAME_REDIRECTING_NUMBER)
  private String redirectingNumber;

  public static final String SERIALIZED_NAME_RELATED_CALL_I_D = "Related call ID";
  @SerializedName(SERIALIZED_NAME_RELATED_CALL_I_D)
  private String relatedCallID;

  public static final String SERIALIZED_NAME_RELATED_REASON = "Related reason";
  @SerializedName(SERIALIZED_NAME_RELATED_REASON)
  private String relatedReason;

  public static final String SERIALIZED_NAME_RELEASING_PARTY = "Releasing party";
  @SerializedName(SERIALIZED_NAME_RELEASING_PARTY)
  private String releasingParty;

  public static final String SERIALIZED_NAME_REMOTE_CALL_I_D = "Remote call ID";
  @SerializedName(SERIALIZED_NAME_REMOTE_CALL_I_D)
  private String remoteCallID;

  public static final String SERIALIZED_NAME_REMOTE_SESSION_I_D = "Remote SessionID";
  @SerializedName(SERIALIZED_NAME_REMOTE_SESSION_I_D)
  private String remoteSessionID;

  public static final String SERIALIZED_NAME_REPORT_I_D = "Report ID";
  @SerializedName(SERIALIZED_NAME_REPORT_I_D)
  private String reportID;

  public static final String SERIALIZED_NAME_REPORT_TIME = "Report time";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_ROUTE_GROUP = "Route group";
  @SerializedName(SERIALIZED_NAME_ROUTE_GROUP)
  private String routeGroup;

  public static final String SERIALIZED_NAME_SITE_MAIN_NUMBER = "Site main number";
  @SerializedName(SERIALIZED_NAME_SITE_MAIN_NUMBER)
  private String siteMainNumber;

  public static final String SERIALIZED_NAME_SITE_TIMEZONE = "Site timezone";
  @SerializedName(SERIALIZED_NAME_SITE_TIMEZONE)
  private String siteTimezone;

  public static final String SERIALIZED_NAME_SITE_U_U_I_D = "Site UUID";
  @SerializedName(SERIALIZED_NAME_SITE_U_U_I_D)
  private String siteUUID;

  public static final String SERIALIZED_NAME_START_TIME = "Start time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUB_CLIENT_TYPE = "Sub client type";
  @SerializedName(SERIALIZED_NAME_SUB_CLIENT_TYPE)
  private String subClientType;

  public static final String SERIALIZED_NAME_TRANSFER_RELATED_CALL_I_D = "Transfer related call ID";
  @SerializedName(SERIALIZED_NAME_TRANSFER_RELATED_CALL_I_D)
  private String transferRelatedCallID;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_NUMBER = "User number";
  @SerializedName(SERIALIZED_NAME_USER_NUMBER)
  private String userNumber;

  public static final String SERIALIZED_NAME_USER_TYPE = "User type";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private String userType;

  public static final String SERIALIZED_NAME_USER_U_U_I_D = "User UUID";
  @SerializedName(SERIALIZED_NAME_USER_U_U_I_D)
  private String userUUID;

  public static final String SERIALIZED_NAME_PS_T_N_VENDOR_NAME = "PSTN Vendor Name";
  @SerializedName(SERIALIZED_NAME_PS_T_N_VENDOR_NAME)
  private String psTNVendorName;

  public static final String SERIALIZED_NAME_PS_T_N_LEGAL_ENTITY = "PSTN Legal Entity";
  @SerializedName(SERIALIZED_NAME_PS_T_N_LEGAL_ENTITY)
  private String psTNLegalEntity;

  public static final String SERIALIZED_NAME_PS_T_N_VENDOR_ORG_I_D = "PSTN Vendor Org ID";
  @SerializedName(SERIALIZED_NAME_PS_T_N_VENDOR_ORG_I_D)
  private String psTNVendorOrgID;

  public static final String SERIALIZED_NAME_PS_T_N_PROVIDER_I_D = "PSTN Provider ID";
  @SerializedName(SERIALIZED_NAME_PS_T_N_PROVIDER_I_D)
  private String psTNProviderID;

  public CDR() {
  }

  public CDR answerIndicator(String answerIndicator) {
    this.answerIndicator = answerIndicator;
    return this;
  }

  /**
   * Whether the call leg was answered after a redirection. Possible values:   - Yes  - No  - Yes-PostRedirection
   * @return answerIndicator
   */
  @javax.annotation.Nullable
  public String getAnswerIndicator() {
    return answerIndicator;
  }

  public void setAnswerIndicator(String answerIndicator) {
    this.answerIndicator = answerIndicator;
  }


  public CDR answerTime(String answerTime) {
    this.answerTime = answerTime;
    return this;
  }

  /**
   * The time the call was answered. Time is in UTC.
   * @return answerTime
   */
  @javax.annotation.Nullable
  public String getAnswerTime() {
    return answerTime;
  }

  public void setAnswerTime(String answerTime) {
    this.answerTime = answerTime;
  }


  public CDR answered(String answered) {
    this.answered = answered;
    return this;
  }

  /**
   * Whether the call leg was answered. For example, in a hunt group case, some legs will be unanswered, and one will be answered.
   * @return answered
   */
  @javax.annotation.Nullable
  public String getAnswered() {
    return answered;
  }

  public void setAnswered(String answered) {
    this.answered = answered;
  }


  public CDR authorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
    return this;
  }

  /**
   * The authorization code admin created for a location or site for users to use. Collected by the Account/Authorization Codes or Enhanced Outgoing Calling Plan services.
   * @return authorizationCode
   */
  @javax.annotation.Nullable
  public String getAuthorizationCode() {
    return authorizationCode;
  }

  public void setAuthorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
  }


  public CDR callID(String callID) {
    this.callID = callID;
    return this;
  }

  /**
   * SIP Call ID used to identify the call. You can share the Call ID with Cisco TAC to help them pinpoint a call if necessary.
   * @return callID
   */
  @javax.annotation.Nullable
  public String getCallID() {
    return callID;
  }

  public void setCallID(String callID) {
    this.callID = callID;
  }


  public CDR callOutcome(String callOutcome) {
    this.callOutcome = callOutcome;
    return this;
  }

  /**
   * Identifies whether the call was set up or disconnected normally. Possible values:  - Success  - Failure  - Refusal
   * @return callOutcome
   */
  @javax.annotation.Nullable
  public String getCallOutcome() {
    return callOutcome;
  }

  public void setCallOutcome(String callOutcome) {
    this.callOutcome = callOutcome;
  }


  public CDR callOutcomeReason(String callOutcomeReason) {
    this.callOutcomeReason = callOutcomeReason;
    return this;
  }

  /**
   * Additional information about the Call outcome returned.
   * @return callOutcomeReason
   */
  @javax.annotation.Nullable
  public String getCallOutcomeReason() {
    return callOutcomeReason;
  }

  public void setCallOutcomeReason(String callOutcomeReason) {
    this.callOutcomeReason = callOutcomeReason;
  }


  public CDR callTransferTime(String callTransferTime) {
    this.callTransferTime = callTransferTime;
    return this;
  }

  /**
   * Indicates the time at which the call transfer service was invoked during the call. The invocation time is shown using the UTC/GMT time zone format.
   * @return callTransferTime
   */
  @javax.annotation.Nullable
  public String getCallTransferTime() {
    return callTransferTime;
  }

  public void setCallTransferTime(String callTransferTime) {
    this.callTransferTime = callTransferTime;
  }


  public CDR callType(String callType) {
    this.callType = callType;
    return this;
  }

  /**
   * Type of call. For example:  - SIP_MEETING  - SIP_INTERNATIONAL  - SIP_SHORTCODE  - SIP_INBOUND  - UNKNOWN  - SIP_EMERGENCY  - SIP_PREMIUM  - SIP_ENTERPRISE  - SIP_TOLLFREE  - SIP_NATIONAL  - SIP_MOBILE
   * @return callType
   */
  @javax.annotation.Nullable
  public String getCallType() {
    return callType;
  }

  public void setCallType(String callType) {
    this.callType = callType;
  }


  public CDR calledLineID(String calledLineID) {
    this.calledLineID = calledLineID;
    return this;
  }

  /**
   * For incoming calls, the calling line ID of the user. For outgoing calls, it&#39;s the calling line ID of the called party.
   * @return calledLineID
   */
  @javax.annotation.Nullable
  public String getCalledLineID() {
    return calledLineID;
  }

  public void setCalledLineID(String calledLineID) {
    this.calledLineID = calledLineID;
  }


  public CDR calledNumber(String calledNumber) {
    this.calledNumber = calledNumber;
    return this;
  }

  /**
   * For incoming calls, the telephone number of the user. For outgoing calls, it&#39;s the telephone number of the called party.
   * @return calledNumber
   */
  @javax.annotation.Nullable
  public String getCalledNumber() {
    return calledNumber;
  }

  public void setCalledNumber(String calledNumber) {
    this.calledNumber = calledNumber;
  }


  public CDR callingLineID(String callingLineID) {
    this.callingLineID = callingLineID;
    return this;
  }

  /**
   * For incoming calls, the calling line ID of the calling party. For outgoing calls, it&#39;s the calling line ID of the user.
   * @return callingLineID
   */
  @javax.annotation.Nullable
  public String getCallingLineID() {
    return callingLineID;
  }

  public void setCallingLineID(String callingLineID) {
    this.callingLineID = callingLineID;
  }


  public CDR callingNumber(String callingNumber) {
    this.callingNumber = callingNumber;
    return this;
  }

  /**
   * For incoming calls, the telephone number of the calling party. For outgoing calls, it&#39;s the telephone number of the user.
   * @return callingNumber
   */
  @javax.annotation.Nullable
  public String getCallingNumber() {
    return callingNumber;
  }

  public void setCallingNumber(String callingNumber) {
    this.callingNumber = callingNumber;
  }


  public CDR clientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * The type of client that the user (creating this record) is using to make or receive the call. For example:  - SIP  - WXC_CLIENT  - WXC_THIRD_PARTY  - TEAMS_WXC_CLIENT  - WXC_DEVICE  - WXC_SIP_GW
   * @return clientType
   */
  @javax.annotation.Nullable
  public String getClientType() {
    return clientType;
  }

  public void setClientType(String clientType) {
    this.clientType = clientType;
  }


  public CDR clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  /**
   * The version of the client that the user (creating this record) is using to make or receive the call.
   * @return clientVersion
   */
  @javax.annotation.Nullable
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }


  public CDR correlationID(String correlationID) {
    this.correlationID = correlationID;
    return this;
  }

  /**
   * Correlation ID to tie together multiple call legs of the same call session.
   * @return correlationID
   */
  @javax.annotation.Nullable
  public String getCorrelationID() {
    return correlationID;
  }

  public void setCorrelationID(String correlationID) {
    this.correlationID = correlationID;
  }


  public CDR departmentID(String departmentID) {
    this.departmentID = departmentID;
    return this;
  }

  /**
   * A unique identifier for the user&#39;s department name.
   * @return departmentID
   */
  @javax.annotation.Nullable
  public String getDepartmentID() {
    return departmentID;
  }

  public void setDepartmentID(String departmentID) {
    this.departmentID = departmentID;
  }


  public CDR deviceMAC(String deviceMAC) {
    this.deviceMAC = deviceMAC;
    return this;
  }

  /**
   * The MAC address of the device, if known.
   * @return deviceMAC
   */
  @javax.annotation.Nullable
  public String getDeviceMAC() {
    return deviceMAC;
  }

  public void setDeviceMAC(String deviceMAC) {
    this.deviceMAC = deviceMAC;
  }


  public CDR dialedDigits(String dialedDigits) {
    this.dialedDigits = dialedDigits;
    return this;
  }

  /**
   * The keypad digits as dialed by the user, before pre-translations.  This field reports multiple call dial possibilities:  - Feature access codes (FAC) used for invoking features such as Last Number Redial or a Call Return.  - An extension that got dialed and a mis-dialed keypad digit from a device/app.  - When a user must dial an outside access code (for example, 9+) before dialing a number, this access code is also reported, as well as the digits dialed thereafter.  Note that when pre-translations have no effect, the dialed digits field contains the same data as the called number field.  This field is only used for originating (outgoing) Calls and is not available for terminating (incoming) Calls.
   * @return dialedDigits
   */
  @javax.annotation.Nullable
  public String getDialedDigits() {
    return dialedDigits;
  }

  public void setDialedDigits(String dialedDigits) {
    this.dialedDigits = dialedDigits;
  }


  public CDR direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Whether the call was inbound or outbound. The possible values are:  - ORIGINATING  - TERMINATING
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public CDR duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The length of the call in seconds.
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public CDR finalLocalSessionID(String finalLocalSessionID) {
    this.finalLocalSessionID = finalLocalSessionID;
    return this;
  }

  /**
   * Each call consists of four UUIDs known as Local Session ID, Final Local Session ID, Remote Session ID and Final Remote Session ID.  - The Session ID comprises a Universally Unique Identifier (UUID) for each user-agent participating in a call.  - It can be used for end-to-end tracking of a SIP session in IP-based multimedia communication systems in compliance with RFC 7206 and draft-ietf-insipid-session-id-15.  - The Local SessionID is generated from the Originating user agent.  - The Remote SessionID is generated from the Terminating user agent.  - The Final Local Session ID has the value of the Local Session ID at the end of the call.  - The Final Remote Session ID has the value of the Remote Session ID at the end of the call.
   * @return finalLocalSessionID
   */
  @javax.annotation.Nullable
  public String getFinalLocalSessionID() {
    return finalLocalSessionID;
  }

  public void setFinalLocalSessionID(String finalLocalSessionID) {
    this.finalLocalSessionID = finalLocalSessionID;
  }


  public CDR finalRemoteSessionID(String finalRemoteSessionID) {
    this.finalRemoteSessionID = finalRemoteSessionID;
    return this;
  }

  /**
   * Each call consists of four UUIDs known as Local Session ID, Final Local Session ID, Remote Session ID and Final Remote Session ID.  - The Session ID comprises a Universally Unique Identifier (UUID) for each user-agent participating in a call.  - It can be used for end-to-end tracking of a SIP session in IP-based multimedia communication systems in compliance with RFC 7206 and draft-ietf-insipid-session-id-15.  - The Local SessionID is generated from the Originating user agent.  - The Remote SessionID is generated from the Terminating user agent.  - The Final Local Session ID has the value of the Local Session ID at the end of the call.  - The Final Remote Session ID has the value of the Remote Session ID at the end of the call.
   * @return finalRemoteSessionID
   */
  @javax.annotation.Nullable
  public String getFinalRemoteSessionID() {
    return finalRemoteSessionID;
  }

  public void setFinalRemoteSessionID(String finalRemoteSessionID) {
    this.finalRemoteSessionID = finalRemoteSessionID;
  }


  public CDR inboundTrunk(String inboundTrunk) {
    this.inboundTrunk = inboundTrunk;
    return this;
  }

  /**
   * Inbound trunk may be presented in Originating and Terminating records.
   * @return inboundTrunk
   */
  @javax.annotation.Nullable
  public String getInboundTrunk() {
    return inboundTrunk;
  }

  public void setInboundTrunk(String inboundTrunk) {
    this.inboundTrunk = inboundTrunk;
  }


  public CDR internationalCountry(String internationalCountry) {
    this.internationalCountry = internationalCountry;
    return this;
  }

  /**
   * The country code of the dialed number. This is only populated for international calls.
   * @return internationalCountry
   */
  @javax.annotation.Nullable
  public String getInternationalCountry() {
    return internationalCountry;
  }

  public void setInternationalCountry(String internationalCountry) {
    this.internationalCountry = internationalCountry;
  }


  public CDR localCallID(String localCallID) {
    this.localCallID = localCallID;
    return this;
  }

  /**
   * A unique identifier that is used to correlate CDRs and call legs with each other. This ID is used in conjunction with:  - Remote call ID: To identify the remote CDR of a call leg.  - Transfer related call ID: To identify the call transferred leg.
   * @return localCallID
   */
  @javax.annotation.Nullable
  public String getLocalCallID() {
    return localCallID;
  }

  public void setLocalCallID(String localCallID) {
    this.localCallID = localCallID;
  }


  public CDR localSessionID(String localSessionID) {
    this.localSessionID = localSessionID;
    return this;
  }

  /**
   * Each call consists of four UUIDs known as Local Session ID, Final Local Session ID, Remote Session ID and Final Remote Session ID.  - The Session ID comprises a Universally Unique Identifier (UUID) for each user-agent participating in a call.  - It can be used for end-to-end tracking of a SIP session in IP-based multimedia communication systems in compliance with RFC 7206 and draft-ietf-insipid-session-id-15.  - The Local SessionID is generated from the Originating user agent.  - The Remote SessionID is generated from the Terminating user agent.  - The Final Local Session ID has the value of the Local Session ID at the end of the call.  - The Final Remote Session ID has the value of the Remote Session ID at the end of the call.
   * @return localSessionID
   */
  @javax.annotation.Nullable
  public String getLocalSessionID() {
    return localSessionID;
  }

  public void setLocalSessionID(String localSessionID) {
    this.localSessionID = localSessionID;
  }


  public CDR location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the report.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public CDR model(String model) {
    this.model = model;
    return this;
  }

  /**
   * The device model type the user is using to make or receive the call. 
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public CDR networkCallID(String networkCallID) {
    this.networkCallID = networkCallID;
    return this;
  }

  /**
   * A unique identifier that shows if other CDRs are in the same call leg. Two CDRs belong in the same call leg if they have the same Network call ID.
   * @return networkCallID
   */
  @javax.annotation.Nullable
  public String getNetworkCallID() {
    return networkCallID;
  }

  public void setNetworkCallID(String networkCallID) {
    this.networkCallID = networkCallID;
  }


  public CDR orgUUID(String orgUUID) {
    this.orgUUID = orgUUID;
    return this;
  }

  /**
   * A unique identifier for the organization that made the call. This is a unique identifier across Cisco.
   * @return orgUUID
   */
  @javax.annotation.Nullable
  public String getOrgUUID() {
    return orgUUID;
  }

  public void setOrgUUID(String orgUUID) {
    this.orgUUID = orgUUID;
  }


  public CDR originalReason(String originalReason) {
    this.originalReason = originalReason;
    return this;
  }

  /**
   * Call redirection reason for the original called number. For example:  - Unconditional: Call Forward Always (CFA) service, Group night forwarding.  - NoAnswer: The party was not available to take the call. CF/busy or Voicemail/busy.  - Deflection: Indication that a call was redirected. Possible causes could be Blind transfer, Auto attendant transfer, Transfer out of a Call center etc.  - TimeOfDay: Call scheduled period of automated redirection. CF/selective, group night forwarding.  - UserBusy: DND enabled or the user willingly declined the call. CF/busy or voicemail/busy.  - FollowMe: Automated redirection to a personal redirecting service which could be Simultaneous Ringing, Sequential Ringing, Office Anywhere, or Remote Office.  - CallQueue: A call center call to an agent or a user (a member of the call queue).  - HuntGroup: A hunt-group-based call to an agent or a user (denotes a member of the hunt group).  - Unavailable: To voicemail, when the user has no app or device.  - Unrecognized: Unable to determine the reason.  - Unknown: Call forward by phone with no reason.  - ExplicitIdxxx: Enterprise voice portal redirection to the user’s home voice portal. The “xxx” portion is the digits collected from the caller, identifying the target mailbox (Extension or DN).  - ImplicitId: Indicates an enterprise voice portal redirection to the user’s home voice portal.
   * @return originalReason
   */
  @javax.annotation.Nullable
  public String getOriginalReason() {
    return originalReason;
  }

  public void setOriginalReason(String originalReason) {
    this.originalReason = originalReason;
  }


  public CDR osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The operating system that the app was running on, if available.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public CDR outboundTrunk(String outboundTrunk) {
    this.outboundTrunk = outboundTrunk;
    return this;
  }

  /**
   * Outbound trunk may be presented in Originating and Terminating records.
   * @return outboundTrunk
   */
  @javax.annotation.Nullable
  public String getOutboundTrunk() {
    return outboundTrunk;
  }

  public void setOutboundTrunk(String outboundTrunk) {
    this.outboundTrunk = outboundTrunk;
  }


  public CDR releaseTime(String releaseTime) {
    this.releaseTime = releaseTime;
    return this;
  }

  /**
   * The time the call was finished, in UTC.
   * @return releaseTime
   */
  @javax.annotation.Nullable
  public String getReleaseTime() {
    return releaseTime;
  }

  public void setReleaseTime(String releaseTime) {
    this.releaseTime = releaseTime;
  }


  public CDR ringDuration(BigDecimal ringDuration) {
    this.ringDuration = ringDuration;
    return this;
  }

  /**
   * The length of ringing before the call was answered or timed out, in seconds.
   * @return ringDuration
   */
  @javax.annotation.Nullable
  public BigDecimal getRingDuration() {
    return ringDuration;
  }

  public void setRingDuration(BigDecimal ringDuration) {
    this.ringDuration = ringDuration;
  }


  public CDR redirectReason(String redirectReason) {
    this.redirectReason = redirectReason;
    return this;
  }

  /**
   * Call Redirection Reason for the redirecting number. For example:  - Unconditional: Call Forward Always (CFA) service.  - NoAnswer: The party was not available to take the call. CF/busy or Voicemail/busy.  - Deflection: Indication that a call was redirected. Possible causes could be Blind transfer, Auto attendant transfer, Transfer out of a Call center etc.  - TimeOfDay: Call scheduled period of automated redirection. CF/Selective.  - UserBusy: DND enabled or user willingly declined the call. CF/busy or Voicemail/busy.  - FollowMe: Automated redirection to a personal redirecting service which could be Simultaneous Ringing, Sequential Ringing, Office Anywhere, or Remote Office.  - CallQueue: A call center call to an agent or a user (denotes a member of the call queue).  - HuntGroup: A hunt-group-based call to an agent or a user (denotes a member of the hunt group).  - Unavailable: To voicemail, when the user has no app or device.  - Unrecognized: Unable to determine the reason.  - Unknown: Call forward by phone with no reason.  - ExplicitIdxxx: Enterprise voice portal redirection to the user’s home voice portal. The “xxx” portion is the digits collected from the caller, identifying the target mailbox (Extension or DN).  - ImplicitId: Indicates an enterprise voice portal redirection to the user’s home voice portal.
   * @return redirectReason
   */
  @javax.annotation.Nullable
  public String getRedirectReason() {
    return redirectReason;
  }

  public void setRedirectReason(String redirectReason) {
    this.redirectReason = redirectReason;
  }


  public CDR redirectingNumber(String redirectingNumber) {
    this.redirectingNumber = redirectingNumber;
    return this;
  }

  /**
   * When the call has been redirected one or more times, this field reports the last redirecting number. Identifies who last redirected the call. Only applies to call scenarios such as transfer, call forwarded calls, simultaneous rings, etc.
   * @return redirectingNumber
   */
  @javax.annotation.Nullable
  public String getRedirectingNumber() {
    return redirectingNumber;
  }

  public void setRedirectingNumber(String redirectingNumber) {
    this.redirectingNumber = redirectingNumber;
  }


  public CDR relatedCallID(String relatedCallID) {
    this.relatedCallID = relatedCallID;
    return this;
  }

  /**
   * Call identifier of a different call that was created by this call because of a service activation. The value is the same as the Local call ID field of the related call. You can use this field to correlate multiple call legs connected through other services.
   * @return relatedCallID
   */
  @javax.annotation.Nullable
  public String getRelatedCallID() {
    return relatedCallID;
  }

  public void setRelatedCallID(String relatedCallID) {
    this.relatedCallID = relatedCallID;
  }


  public CDR relatedReason(String relatedReason) {
    this.relatedReason = relatedReason;
    return this;
  }

  /**
   * Indicates a trigger that led to a change in the call presence. The trigger could be for this particular call or redirected via a different call. For example:  - ConsultativeTransfer: While on a call, the call was transferred to another user by announcing it first. meaning the person was given a heads up or asked if they&#39;re interested in taking the call and then transferred.  - CallForwardSelective: Call Forward as per the defined schedule. Might be based on factors like a specific time, specific callers or to a VM. It always takes precedence over Call Forwarding.  - CallForwardAlways: Calls are unconditionally forwarded to a defined phone number or to VM.  - CallForwardNoAnswer: The party was not available to take the call.  - CallQueue: A call center call to an agent or a user (denotes a member of the call queue).  - HuntGroup: A hunt group based call to an agent or a user (denotes a member of the hunt group).  - CallPickup: The user part of a pickup group or pickup attempted by this user against a ringing call for a different user or extension.  - CalllPark: An ongoing call was parked, assigned with a parked number (not the user’s phone number).  - CallParkRetrieve: Call park retrieval attempt by the user, either for a different extension or against the user’s own extension.  - Deflection: Indication that a call was redirected. Possible causes could be Blind transfer, Auto-attendant transfer, Transfer out of a Call center, etc.  - FaxDeposit: Indicates a FAX was transmitted to the FAX service.  - PushNotificationRetrieval: Push notification feature usage indication. Means that a push notification was sent to wake up the client and get ready to receive a call.  - BargeIn: Indicates the user barged-in to someone else’s call.  - VoiceXMLScriptTermination: Route Point feature usage indication.  - AnywhereLocation: Indicates call origination towards the single number reach location.  - AnywherePortal: Indicates call origination towards the “user” identified by the single number reach portal.  - Unrecognized: Unable to determine the reason.  - CallForwardBusy: The user willingly declined the call, or DND was enabled that then redirected the call to a defined phone number or voice mail.  - CallForwardNotReachable: Hunt group redirection for an agent who is not reachable.  - CallRetrieve: The user triggered the call retrieve option to pick up a call that was parked.  - CallRecording: The user initiated the call recording service that triggered Start/Pause/Resume/Stop recording options.  - DirectedCallPickup: Indicates this user belonged to a call pickup group who answered the call or answered when another member of the call pickup group in a location was busy.  - Executive: The user has been configured using the Executive/Executive assistant service who is allowed to handle calls on someone else&#39;s behalf. Also known as Boss-admin.  - ExecutiveAssistantInitiateCall: The user has been configured as an Executive assistant who placed or initiated the call on someone else’s (Boss admin&#39;s) behalf.  - ExecutiveAssistantDivert: The user has been configured as an Executive assistant who had call forwarding enabled to a defined phone number.  - ExecutiveForward: The Executive (Boss-admin) had a call forward setting enabled to a defined number. Generally triggered when an ExecutiveAssistant did not pick a call.  - ExecutiveAssistantCallPush: The user has been configured as an Executive assistant who received a call and pushed that call out (using #63) to the Executive’s (Boss-admin&#39;s) number.  - Remote Office: Indicates the call was made to reach the remote location of the user.  - RoutePoint: Indicates an incoming and queued call to an agent (for incoming calls to the route point).  - SequentialRing: Indicates this user is in the list of phone numbers, which are alerted sequentially upon receiving an incoming call that matches a set of criteria.  - SimultaneousRingPersonal: Indicates this user was in the list of multiple destinations that are to ring simultaneously when any calls are received on their phone number (the first destination answered is connected).  - CCMonitoringBI: The indication that a Call Queue supervisor invoked silent monitoring.
   * @return relatedReason
   */
  @javax.annotation.Nullable
  public String getRelatedReason() {
    return relatedReason;
  }

  public void setRelatedReason(String relatedReason) {
    this.relatedReason = relatedReason;
  }


  public CDR releasingParty(String releasingParty) {
    this.releasingParty = releasingParty;
    return this;
  }

  /**
   * Indicates which party released the call first. The possible values are:  - Local: Used when the local user has released the call first.  - Remote: Used when the far-end party releases the call first.  - Unknown: Used when the call has partial information or is unable to gather enough information about the party who released the call. It could be because of situations like force lock or because of a session audit failure.
   * @return releasingParty
   */
  @javax.annotation.Nullable
  public String getReleasingParty() {
    return releasingParty;
  }

  public void setReleasingParty(String releasingParty) {
    this.releasingParty = releasingParty;
  }


  public CDR remoteCallID(String remoteCallID) {
    this.remoteCallID = remoteCallID;
    return this;
  }

  /**
   * A unique identifier that is used to correlate CDRs and call legs with each other. This ID is used in conjunction with Local call ID to identity the local CDR of a call leg.
   * @return remoteCallID
   */
  @javax.annotation.Nullable
  public String getRemoteCallID() {
    return remoteCallID;
  }

  public void setRemoteCallID(String remoteCallID) {
    this.remoteCallID = remoteCallID;
  }


  public CDR remoteSessionID(String remoteSessionID) {
    this.remoteSessionID = remoteSessionID;
    return this;
  }

  /**
   * Each call consists of four UUIDs known as Local Session ID, Final Local Session ID, Remote Session ID and Final Remote Session ID.  - The Session ID comprises a Universally Unique Identifier (UUID) for each user-agent participating in a call.  - It can be used for end-to-end tracking of a SIP session in IP-based multimedia communication systems in compliance with RFC 7206 and draft-ietf-insipid-session-id-15.  - The Local SessionID is generated from the Originating user agent.  - The Remote SessionID is generated from the Terminating user agent.  - The Final Local Session ID has the value of the Local Session ID at the end of the call.  - The Final Remote Session ID has the value of the Remote Session ID at the end of the call.
   * @return remoteSessionID
   */
  @javax.annotation.Nullable
  public String getRemoteSessionID() {
    return remoteSessionID;
  }

  public void setRemoteSessionID(String remoteSessionID) {
    this.remoteSessionID = remoteSessionID;
  }


  public CDR reportID(String reportID) {
    this.reportID = reportID;
    return this;
  }

  /**
   * A unique ID for this particular record. This can be used when processing records to aid in deduplication.
   * @return reportID
   */
  @javax.annotation.Nullable
  public String getReportID() {
    return reportID;
  }

  public void setReportID(String reportID) {
    this.reportID = reportID;
  }


  public CDR reportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  /**
   * The time this report was created. Time is in UTC.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }

  public void setReportTime(String reportTime) {
    this.reportTime = reportTime;
  }


  public CDR routeGroup(String routeGroup) {
    this.routeGroup = routeGroup;
    return this;
  }

  /**
   * If present, this field&#39;s only reported in Originating records. Route group identifies the route group used for outbound calls routed via a route group to Premises-based PSTN or an on-prem deployment integrated with Webex Calling (dial plan or unknown extension).
   * @return routeGroup
   */
  @javax.annotation.Nullable
  public String getRouteGroup() {
    return routeGroup;
  }

  public void setRouteGroup(String routeGroup) {
    this.routeGroup = routeGroup;
  }


  public CDR siteMainNumber(String siteMainNumber) {
    this.siteMainNumber = siteMainNumber;
    return this;
  }

  /**
   * The main number for the user&#39;s site where the call was made or received.
   * @return siteMainNumber
   */
  @javax.annotation.Nullable
  public String getSiteMainNumber() {
    return siteMainNumber;
  }

  public void setSiteMainNumber(String siteMainNumber) {
    this.siteMainNumber = siteMainNumber;
  }


  public CDR siteTimezone(String siteTimezone) {
    this.siteTimezone = siteTimezone;
    return this;
  }

  /**
   * Site timezone is the offset in minutes from UTC time of the user&#39;s timezone.
   * @return siteTimezone
   */
  @javax.annotation.Nullable
  public String getSiteTimezone() {
    return siteTimezone;
  }

  public void setSiteTimezone(String siteTimezone) {
    this.siteTimezone = siteTimezone;
  }


  public CDR siteUUID(String siteUUID) {
    this.siteUUID = siteUUID;
    return this;
  }

  /**
   * A unique identifier for the site associated with the call. Unique across Cisco products.
   * @return siteUUID
   */
  @javax.annotation.Nullable
  public String getSiteUUID() {
    return siteUUID;
  }

  public void setSiteUUID(String siteUUID) {
    this.siteUUID = siteUUID;
  }


  public CDR startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * This is the start time of the call, the answer time may be slightly after this. Time is in UTC. 
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public CDR subClientType(String subClientType) {
    this.subClientType = subClientType;
    return this;
  }

  /**
   * If the call is TO or FROM a mobile phone using Webex Go, the Client type will show SIP, and Sub client type will show MOBILE_NETWORK.
   * @return subClientType
   */
  @javax.annotation.Nullable
  public String getSubClientType() {
    return subClientType;
  }

  public void setSubClientType(String subClientType) {
    this.subClientType = subClientType;
  }


  public CDR transferRelatedCallID(String transferRelatedCallID) {
    this.transferRelatedCallID = transferRelatedCallID;
    return this;
  }

  /**
   * Call identifier of a different call that was involved in the transfer. You can share this ID with Cisco TAC to help them pinpoint parties who were involved in the call transfer.
   * @return transferRelatedCallID
   */
  @javax.annotation.Nullable
  public String getTransferRelatedCallID() {
    return transferRelatedCallID;
  }

  public void setTransferRelatedCallID(String transferRelatedCallID) {
    this.transferRelatedCallID = transferRelatedCallID;
  }


  public CDR user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The user who made or received the call.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public CDR userNumber(String userNumber) {
    this.userNumber = userNumber;
    return this;
  }

  /**
   * Represents the E.164 number of the user generating a CDR. If the user has no number assigned to them, then their extension will be displayed instead.
   * @return userNumber
   */
  @javax.annotation.Nullable
  public String getUserNumber() {
    return userNumber;
  }

  public void setUserNumber(String userNumber) {
    this.userNumber = userNumber;
  }


  public CDR userType(String userType) {
    this.userType = userType;
    return this;
  }

  /**
   * The type of user (user or workspace) that made or received the call. For example:  - AutomatedAttendantVideo: Automated Attendant Video IVR group service.  - Anchor: A Webex Calling user number made or received that is integrated with Webex Contact Center. An \&quot;anchor\&quot; is created to facilitate the call routing flow between WxC and WxCC.  - BroadworksAnywhere: Single number reach (Office anywhere) service.  - VoiceMailRetrieval: Voice Mail group service.  - LocalGateway: A local gateway-based user who made or received the call.  - HuntGroup: A hunt group based service.  - GroupPaging: One way call or group page made for target users.  - User: The direct user who made or received the call.  - VoiceMailGroup: Shared voicemail or inbound FAX destination for users.  - CallCenterStandard: A call queue-based service.  - VoiceXML: Call added back to the Route Point queue after script termination.  - RoutePoint: Route Point call to an agent (for an incoming call to the routing point).  - Place: A workspace-based user who made or received the call.  - VirtuaLline: Call made or received by a virtual line user using the Multi-line option in Webex Calling.
   * @return userType
   */
  @javax.annotation.Nullable
  public String getUserType() {
    return userType;
  }

  public void setUserType(String userType) {
    this.userType = userType;
  }


  public CDR userUUID(String userUUID) {
    this.userUUID = userUUID;
    return this;
  }

  /**
   * A unique identifier for the user associated with the call. This is a unique identifier across Cisco products.
   * @return userUUID
   */
  @javax.annotation.Nullable
  public String getUserUUID() {
    return userUUID;
  }

  public void setUserUUID(String userUUID) {
    this.userUUID = userUUID;
  }


  public CDR psTNVendorName(String psTNVendorName) {
    this.psTNVendorName = psTNVendorName;
    return this;
  }

  /**
   * Displays the name of the vendor from which one has purchased PSTN service for a specific country. For example:  - If purchased from Cisco PSTN, the field would display \&quot;Cisco Calling Plans\&quot;  - If purchased from Cisco Cloud Connected PSTN Partners, the field would list names such as \&quot;Tata\&quot;, \&quot;IntelePeer\&quot;, \&quot;KDDI\&quot;, etc.
   * @return psTNVendorName
   */
  @javax.annotation.Nullable
  public String getPsTNVendorName() {
    return psTNVendorName;
  }

  public void setPsTNVendorName(String psTNVendorName) {
    this.psTNVendorName = psTNVendorName;
  }


  public CDR psTNLegalEntity(String psTNLegalEntity) {
    this.psTNLegalEntity = psTNLegalEntity;
    return this;
  }

  /**
   * This field shows the regulated business entity registered to provide PSTN service in a particular country. It is exclusively used for Cisco Calling Plans.  - Note: The name of the regulated entity may vary within a region and across different regions.
   * @return psTNLegalEntity
   */
  @javax.annotation.Nullable
  public String getPsTNLegalEntity() {
    return psTNLegalEntity;
  }

  public void setPsTNLegalEntity(String psTNLegalEntity) {
    this.psTNLegalEntity = psTNLegalEntity;
  }


  public CDR psTNVendorOrgID(String psTNVendorOrgID) {
    this.psTNVendorOrgID = psTNVendorOrgID;
    return this;
  }

  /**
   * This field displays the organization&#39;s Universal Unique Identifier (UUID) for Cisco Calling Plans, which is unique across various regions.
   * @return psTNVendorOrgID
   */
  @javax.annotation.Nullable
  public String getPsTNVendorOrgID() {
    return psTNVendorOrgID;
  }

  public void setPsTNVendorOrgID(String psTNVendorOrgID) {
    this.psTNVendorOrgID = psTNVendorOrgID;
  }


  public CDR psTNProviderID(String psTNProviderID) {
    this.psTNProviderID = psTNProviderID;
    return this;
  }

  /**
   * This field represents an immutable UUID, as defined by Cisco, for a PSTN provider partner. It uniquely identifies the entity that has provided PSTN service in that country.
   * @return psTNProviderID
   */
  @javax.annotation.Nullable
  public String getPsTNProviderID() {
    return psTNProviderID;
  }

  public void setPsTNProviderID(String psTNProviderID) {
    this.psTNProviderID = psTNProviderID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CDR CDR = (CDR) o;
    return Objects.equals(this.answerIndicator, CDR.answerIndicator) &&
        Objects.equals(this.answerTime, CDR.answerTime) &&
        Objects.equals(this.answered, CDR.answered) &&
        Objects.equals(this.authorizationCode, CDR.authorizationCode) &&
        Objects.equals(this.callID, CDR.callID) &&
        Objects.equals(this.callOutcome, CDR.callOutcome) &&
        Objects.equals(this.callOutcomeReason, CDR.callOutcomeReason) &&
        Objects.equals(this.callTransferTime, CDR.callTransferTime) &&
        Objects.equals(this.callType, CDR.callType) &&
        Objects.equals(this.calledLineID, CDR.calledLineID) &&
        Objects.equals(this.calledNumber, CDR.calledNumber) &&
        Objects.equals(this.callingLineID, CDR.callingLineID) &&
        Objects.equals(this.callingNumber, CDR.callingNumber) &&
        Objects.equals(this.clientType, CDR.clientType) &&
        Objects.equals(this.clientVersion, CDR.clientVersion) &&
        Objects.equals(this.correlationID, CDR.correlationID) &&
        Objects.equals(this.departmentID, CDR.departmentID) &&
        Objects.equals(this.deviceMAC, CDR.deviceMAC) &&
        Objects.equals(this.dialedDigits, CDR.dialedDigits) &&
        Objects.equals(this.direction, CDR.direction) &&
        Objects.equals(this.duration, CDR.duration) &&
        Objects.equals(this.finalLocalSessionID, CDR.finalLocalSessionID) &&
        Objects.equals(this.finalRemoteSessionID, CDR.finalRemoteSessionID) &&
        Objects.equals(this.inboundTrunk, CDR.inboundTrunk) &&
        Objects.equals(this.internationalCountry, CDR.internationalCountry) &&
        Objects.equals(this.localCallID, CDR.localCallID) &&
        Objects.equals(this.localSessionID, CDR.localSessionID) &&
        Objects.equals(this.location, CDR.location) &&
        Objects.equals(this.model, CDR.model) &&
        Objects.equals(this.networkCallID, CDR.networkCallID) &&
        Objects.equals(this.orgUUID, CDR.orgUUID) &&
        Objects.equals(this.originalReason, CDR.originalReason) &&
        Objects.equals(this.osType, CDR.osType) &&
        Objects.equals(this.outboundTrunk, CDR.outboundTrunk) &&
        Objects.equals(this.releaseTime, CDR.releaseTime) &&
        Objects.equals(this.ringDuration, CDR.ringDuration) &&
        Objects.equals(this.redirectReason, CDR.redirectReason) &&
        Objects.equals(this.redirectingNumber, CDR.redirectingNumber) &&
        Objects.equals(this.relatedCallID, CDR.relatedCallID) &&
        Objects.equals(this.relatedReason, CDR.relatedReason) &&
        Objects.equals(this.releasingParty, CDR.releasingParty) &&
        Objects.equals(this.remoteCallID, CDR.remoteCallID) &&
        Objects.equals(this.remoteSessionID, CDR.remoteSessionID) &&
        Objects.equals(this.reportID, CDR.reportID) &&
        Objects.equals(this.reportTime, CDR.reportTime) &&
        Objects.equals(this.routeGroup, CDR.routeGroup) &&
        Objects.equals(this.siteMainNumber, CDR.siteMainNumber) &&
        Objects.equals(this.siteTimezone, CDR.siteTimezone) &&
        Objects.equals(this.siteUUID, CDR.siteUUID) &&
        Objects.equals(this.startTime, CDR.startTime) &&
        Objects.equals(this.subClientType, CDR.subClientType) &&
        Objects.equals(this.transferRelatedCallID, CDR.transferRelatedCallID) &&
        Objects.equals(this.user, CDR.user) &&
        Objects.equals(this.userNumber, CDR.userNumber) &&
        Objects.equals(this.userType, CDR.userType) &&
        Objects.equals(this.userUUID, CDR.userUUID) &&
        Objects.equals(this.psTNVendorName, CDR.psTNVendorName) &&
        Objects.equals(this.psTNLegalEntity, CDR.psTNLegalEntity) &&
        Objects.equals(this.psTNVendorOrgID, CDR.psTNVendorOrgID) &&
        Objects.equals(this.psTNProviderID, CDR.psTNProviderID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerIndicator, answerTime, answered, authorizationCode, callID, callOutcome, callOutcomeReason, callTransferTime, callType, calledLineID, calledNumber, callingLineID, callingNumber, clientType, clientVersion, correlationID, departmentID, deviceMAC, dialedDigits, direction, duration, finalLocalSessionID, finalRemoteSessionID, inboundTrunk, internationalCountry, localCallID, localSessionID, location, model, networkCallID, orgUUID, originalReason, osType, outboundTrunk, releaseTime, ringDuration, redirectReason, redirectingNumber, relatedCallID, relatedReason, releasingParty, remoteCallID, remoteSessionID, reportID, reportTime, routeGroup, siteMainNumber, siteTimezone, siteUUID, startTime, subClientType, transferRelatedCallID, user, userNumber, userType, userUUID, psTNVendorName, psTNLegalEntity, psTNVendorOrgID, psTNProviderID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CDR {\n");
    sb.append("    answerIndicator: ").append(toIndentedString(answerIndicator)).append("\n");
    sb.append("    answerTime: ").append(toIndentedString(answerTime)).append("\n");
    sb.append("    answered: ").append(toIndentedString(answered)).append("\n");
    sb.append("    authorizationCode: ").append(toIndentedString(authorizationCode)).append("\n");
    sb.append("    callID: ").append(toIndentedString(callID)).append("\n");
    sb.append("    callOutcome: ").append(toIndentedString(callOutcome)).append("\n");
    sb.append("    callOutcomeReason: ").append(toIndentedString(callOutcomeReason)).append("\n");
    sb.append("    callTransferTime: ").append(toIndentedString(callTransferTime)).append("\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    calledLineID: ").append(toIndentedString(calledLineID)).append("\n");
    sb.append("    calledNumber: ").append(toIndentedString(calledNumber)).append("\n");
    sb.append("    callingLineID: ").append(toIndentedString(callingLineID)).append("\n");
    sb.append("    callingNumber: ").append(toIndentedString(callingNumber)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    correlationID: ").append(toIndentedString(correlationID)).append("\n");
    sb.append("    departmentID: ").append(toIndentedString(departmentID)).append("\n");
    sb.append("    deviceMAC: ").append(toIndentedString(deviceMAC)).append("\n");
    sb.append("    dialedDigits: ").append(toIndentedString(dialedDigits)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    finalLocalSessionID: ").append(toIndentedString(finalLocalSessionID)).append("\n");
    sb.append("    finalRemoteSessionID: ").append(toIndentedString(finalRemoteSessionID)).append("\n");
    sb.append("    inboundTrunk: ").append(toIndentedString(inboundTrunk)).append("\n");
    sb.append("    internationalCountry: ").append(toIndentedString(internationalCountry)).append("\n");
    sb.append("    localCallID: ").append(toIndentedString(localCallID)).append("\n");
    sb.append("    localSessionID: ").append(toIndentedString(localSessionID)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    networkCallID: ").append(toIndentedString(networkCallID)).append("\n");
    sb.append("    orgUUID: ").append(toIndentedString(orgUUID)).append("\n");
    sb.append("    originalReason: ").append(toIndentedString(originalReason)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    outboundTrunk: ").append(toIndentedString(outboundTrunk)).append("\n");
    sb.append("    releaseTime: ").append(toIndentedString(releaseTime)).append("\n");
    sb.append("    ringDuration: ").append(toIndentedString(ringDuration)).append("\n");
    sb.append("    redirectReason: ").append(toIndentedString(redirectReason)).append("\n");
    sb.append("    redirectingNumber: ").append(toIndentedString(redirectingNumber)).append("\n");
    sb.append("    relatedCallID: ").append(toIndentedString(relatedCallID)).append("\n");
    sb.append("    relatedReason: ").append(toIndentedString(relatedReason)).append("\n");
    sb.append("    releasingParty: ").append(toIndentedString(releasingParty)).append("\n");
    sb.append("    remoteCallID: ").append(toIndentedString(remoteCallID)).append("\n");
    sb.append("    remoteSessionID: ").append(toIndentedString(remoteSessionID)).append("\n");
    sb.append("    reportID: ").append(toIndentedString(reportID)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    routeGroup: ").append(toIndentedString(routeGroup)).append("\n");
    sb.append("    siteMainNumber: ").append(toIndentedString(siteMainNumber)).append("\n");
    sb.append("    siteTimezone: ").append(toIndentedString(siteTimezone)).append("\n");
    sb.append("    siteUUID: ").append(toIndentedString(siteUUID)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subClientType: ").append(toIndentedString(subClientType)).append("\n");
    sb.append("    transferRelatedCallID: ").append(toIndentedString(transferRelatedCallID)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userNumber: ").append(toIndentedString(userNumber)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    userUUID: ").append(toIndentedString(userUUID)).append("\n");
    sb.append("    psTNVendorName: ").append(toIndentedString(psTNVendorName)).append("\n");
    sb.append("    psTNLegalEntity: ").append(toIndentedString(psTNLegalEntity)).append("\n");
    sb.append("    psTNVendorOrgID: ").append(toIndentedString(psTNVendorOrgID)).append("\n");
    sb.append("    psTNProviderID: ").append(toIndentedString(psTNProviderID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Answer indicator");
    openapiFields.add("Answer time");
    openapiFields.add("Answered");
    openapiFields.add("Authorization code");
    openapiFields.add("Call ID");
    openapiFields.add("Call outcome");
    openapiFields.add("Call outcome reason");
    openapiFields.add("Call transfer Time");
    openapiFields.add("Call type");
    openapiFields.add("Called line ID");
    openapiFields.add("Called number");
    openapiFields.add("Calling line ID");
    openapiFields.add("Calling number");
    openapiFields.add("Client type");
    openapiFields.add("Client version");
    openapiFields.add("Correlation ID");
    openapiFields.add("Department ID");
    openapiFields.add("Device MAC");
    openapiFields.add("Dialed digits");
    openapiFields.add("Direction");
    openapiFields.add("Duration");
    openapiFields.add("Final local SessionID");
    openapiFields.add("Final remote SessionID");
    openapiFields.add("Inbound trunk");
    openapiFields.add("International country");
    openapiFields.add("Local call ID");
    openapiFields.add("Local SessionID");
    openapiFields.add("Location");
    openapiFields.add("Model");
    openapiFields.add("Network call ID");
    openapiFields.add("Org UUID");
    openapiFields.add("Original reason");
    openapiFields.add("OS type");
    openapiFields.add("Outbound trunk");
    openapiFields.add("Release time");
    openapiFields.add("Ring duration");
    openapiFields.add("Redirect reason");
    openapiFields.add("Redirecting number");
    openapiFields.add("Related call ID");
    openapiFields.add("Related reason");
    openapiFields.add("Releasing party");
    openapiFields.add("Remote call ID");
    openapiFields.add("Remote SessionID");
    openapiFields.add("Report ID");
    openapiFields.add("Report time");
    openapiFields.add("Route group");
    openapiFields.add("Site main number");
    openapiFields.add("Site timezone");
    openapiFields.add("Site UUID");
    openapiFields.add("Start time");
    openapiFields.add("Sub client type");
    openapiFields.add("Transfer related call ID");
    openapiFields.add("User");
    openapiFields.add("User number");
    openapiFields.add("User type");
    openapiFields.add("User UUID");
    openapiFields.add("PSTN Vendor Name");
    openapiFields.add("PSTN Legal Entity");
    openapiFields.add("PSTN Vendor Org ID");
    openapiFields.add("PSTN Provider ID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CDR
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CDR.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CDR is not found in the empty JSON string", CDR.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CDR.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CDR` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Answer indicator") != null && !jsonObj.get("Answer indicator").isJsonNull()) && !jsonObj.get("Answer indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Answer indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Answer indicator").toString()));
      }
      if ((jsonObj.get("Answer time") != null && !jsonObj.get("Answer time").isJsonNull()) && !jsonObj.get("Answer time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Answer time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Answer time").toString()));
      }
      if ((jsonObj.get("Answered") != null && !jsonObj.get("Answered").isJsonNull()) && !jsonObj.get("Answered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Answered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Answered").toString()));
      }
      if ((jsonObj.get("Authorization code") != null && !jsonObj.get("Authorization code").isJsonNull()) && !jsonObj.get("Authorization code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Authorization code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Authorization code").toString()));
      }
      if ((jsonObj.get("Call ID") != null && !jsonObj.get("Call ID").isJsonNull()) && !jsonObj.get("Call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Call ID").toString()));
      }
      if ((jsonObj.get("Call outcome") != null && !jsonObj.get("Call outcome").isJsonNull()) && !jsonObj.get("Call outcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Call outcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Call outcome").toString()));
      }
      if ((jsonObj.get("Call outcome reason") != null && !jsonObj.get("Call outcome reason").isJsonNull()) && !jsonObj.get("Call outcome reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Call outcome reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Call outcome reason").toString()));
      }
      if ((jsonObj.get("Call transfer Time") != null && !jsonObj.get("Call transfer Time").isJsonNull()) && !jsonObj.get("Call transfer Time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Call transfer Time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Call transfer Time").toString()));
      }
      if ((jsonObj.get("Call type") != null && !jsonObj.get("Call type").isJsonNull()) && !jsonObj.get("Call type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Call type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Call type").toString()));
      }
      if ((jsonObj.get("Called line ID") != null && !jsonObj.get("Called line ID").isJsonNull()) && !jsonObj.get("Called line ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Called line ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Called line ID").toString()));
      }
      if ((jsonObj.get("Called number") != null && !jsonObj.get("Called number").isJsonNull()) && !jsonObj.get("Called number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Called number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Called number").toString()));
      }
      if ((jsonObj.get("Calling line ID") != null && !jsonObj.get("Calling line ID").isJsonNull()) && !jsonObj.get("Calling line ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Calling line ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Calling line ID").toString()));
      }
      if ((jsonObj.get("Calling number") != null && !jsonObj.get("Calling number").isJsonNull()) && !jsonObj.get("Calling number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Calling number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Calling number").toString()));
      }
      if ((jsonObj.get("Client type") != null && !jsonObj.get("Client type").isJsonNull()) && !jsonObj.get("Client type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client type").toString()));
      }
      if ((jsonObj.get("Client version") != null && !jsonObj.get("Client version").isJsonNull()) && !jsonObj.get("Client version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client version").toString()));
      }
      if ((jsonObj.get("Correlation ID") != null && !jsonObj.get("Correlation ID").isJsonNull()) && !jsonObj.get("Correlation ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Correlation ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Correlation ID").toString()));
      }
      if ((jsonObj.get("Department ID") != null && !jsonObj.get("Department ID").isJsonNull()) && !jsonObj.get("Department ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Department ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Department ID").toString()));
      }
      if ((jsonObj.get("Device MAC") != null && !jsonObj.get("Device MAC").isJsonNull()) && !jsonObj.get("Device MAC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Device MAC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Device MAC").toString()));
      }
      if ((jsonObj.get("Dialed digits") != null && !jsonObj.get("Dialed digits").isJsonNull()) && !jsonObj.get("Dialed digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dialed digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dialed digits").toString()));
      }
      if ((jsonObj.get("Direction") != null && !jsonObj.get("Direction").isJsonNull()) && !jsonObj.get("Direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Direction").toString()));
      }
      if ((jsonObj.get("Final local SessionID") != null && !jsonObj.get("Final local SessionID").isJsonNull()) && !jsonObj.get("Final local SessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Final local SessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Final local SessionID").toString()));
      }
      if ((jsonObj.get("Final remote SessionID") != null && !jsonObj.get("Final remote SessionID").isJsonNull()) && !jsonObj.get("Final remote SessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Final remote SessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Final remote SessionID").toString()));
      }
      if ((jsonObj.get("Inbound trunk") != null && !jsonObj.get("Inbound trunk").isJsonNull()) && !jsonObj.get("Inbound trunk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Inbound trunk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Inbound trunk").toString()));
      }
      if ((jsonObj.get("International country") != null && !jsonObj.get("International country").isJsonNull()) && !jsonObj.get("International country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `International country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("International country").toString()));
      }
      if ((jsonObj.get("Local call ID") != null && !jsonObj.get("Local call ID").isJsonNull()) && !jsonObj.get("Local call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Local call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Local call ID").toString()));
      }
      if ((jsonObj.get("Local SessionID") != null && !jsonObj.get("Local SessionID").isJsonNull()) && !jsonObj.get("Local SessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Local SessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Local SessionID").toString()));
      }
      if ((jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) && !jsonObj.get("Location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Location").toString()));
      }
      if ((jsonObj.get("Model") != null && !jsonObj.get("Model").isJsonNull()) && !jsonObj.get("Model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Model").toString()));
      }
      if ((jsonObj.get("Network call ID") != null && !jsonObj.get("Network call ID").isJsonNull()) && !jsonObj.get("Network call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Network call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Network call ID").toString()));
      }
      if ((jsonObj.get("Org UUID") != null && !jsonObj.get("Org UUID").isJsonNull()) && !jsonObj.get("Org UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Org UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Org UUID").toString()));
      }
      if ((jsonObj.get("Original reason") != null && !jsonObj.get("Original reason").isJsonNull()) && !jsonObj.get("Original reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Original reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Original reason").toString()));
      }
      if ((jsonObj.get("OS type") != null && !jsonObj.get("OS type").isJsonNull()) && !jsonObj.get("OS type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OS type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OS type").toString()));
      }
      if ((jsonObj.get("Outbound trunk") != null && !jsonObj.get("Outbound trunk").isJsonNull()) && !jsonObj.get("Outbound trunk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Outbound trunk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Outbound trunk").toString()));
      }
      if ((jsonObj.get("Release time") != null && !jsonObj.get("Release time").isJsonNull()) && !jsonObj.get("Release time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Release time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Release time").toString()));
      }
      if ((jsonObj.get("Redirect reason") != null && !jsonObj.get("Redirect reason").isJsonNull()) && !jsonObj.get("Redirect reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Redirect reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Redirect reason").toString()));
      }
      if ((jsonObj.get("Redirecting number") != null && !jsonObj.get("Redirecting number").isJsonNull()) && !jsonObj.get("Redirecting number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Redirecting number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Redirecting number").toString()));
      }
      if ((jsonObj.get("Related call ID") != null && !jsonObj.get("Related call ID").isJsonNull()) && !jsonObj.get("Related call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Related call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Related call ID").toString()));
      }
      if ((jsonObj.get("Related reason") != null && !jsonObj.get("Related reason").isJsonNull()) && !jsonObj.get("Related reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Related reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Related reason").toString()));
      }
      if ((jsonObj.get("Releasing party") != null && !jsonObj.get("Releasing party").isJsonNull()) && !jsonObj.get("Releasing party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Releasing party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Releasing party").toString()));
      }
      if ((jsonObj.get("Remote call ID") != null && !jsonObj.get("Remote call ID").isJsonNull()) && !jsonObj.get("Remote call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Remote call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Remote call ID").toString()));
      }
      if ((jsonObj.get("Remote SessionID") != null && !jsonObj.get("Remote SessionID").isJsonNull()) && !jsonObj.get("Remote SessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Remote SessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Remote SessionID").toString()));
      }
      if ((jsonObj.get("Report ID") != null && !jsonObj.get("Report ID").isJsonNull()) && !jsonObj.get("Report ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Report ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Report ID").toString()));
      }
      if ((jsonObj.get("Report time") != null && !jsonObj.get("Report time").isJsonNull()) && !jsonObj.get("Report time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Report time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Report time").toString()));
      }
      if ((jsonObj.get("Route group") != null && !jsonObj.get("Route group").isJsonNull()) && !jsonObj.get("Route group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Route group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Route group").toString()));
      }
      if ((jsonObj.get("Site main number") != null && !jsonObj.get("Site main number").isJsonNull()) && !jsonObj.get("Site main number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Site main number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Site main number").toString()));
      }
      if ((jsonObj.get("Site timezone") != null && !jsonObj.get("Site timezone").isJsonNull()) && !jsonObj.get("Site timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Site timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Site timezone").toString()));
      }
      if ((jsonObj.get("Site UUID") != null && !jsonObj.get("Site UUID").isJsonNull()) && !jsonObj.get("Site UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Site UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Site UUID").toString()));
      }
      if ((jsonObj.get("Start time") != null && !jsonObj.get("Start time").isJsonNull()) && !jsonObj.get("Start time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Start time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Start time").toString()));
      }
      if ((jsonObj.get("Sub client type") != null && !jsonObj.get("Sub client type").isJsonNull()) && !jsonObj.get("Sub client type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sub client type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sub client type").toString()));
      }
      if ((jsonObj.get("Transfer related call ID") != null && !jsonObj.get("Transfer related call ID").isJsonNull()) && !jsonObj.get("Transfer related call ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Transfer related call ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Transfer related call ID").toString()));
      }
      if ((jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) && !jsonObj.get("User").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User").toString()));
      }
      if ((jsonObj.get("User number") != null && !jsonObj.get("User number").isJsonNull()) && !jsonObj.get("User number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User number").toString()));
      }
      if ((jsonObj.get("User type") != null && !jsonObj.get("User type").isJsonNull()) && !jsonObj.get("User type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User type").toString()));
      }
      if ((jsonObj.get("User UUID") != null && !jsonObj.get("User UUID").isJsonNull()) && !jsonObj.get("User UUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User UUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User UUID").toString()));
      }
      if ((jsonObj.get("PSTN Vendor Name") != null && !jsonObj.get("PSTN Vendor Name").isJsonNull()) && !jsonObj.get("PSTN Vendor Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PSTN Vendor Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PSTN Vendor Name").toString()));
      }
      if ((jsonObj.get("PSTN Legal Entity") != null && !jsonObj.get("PSTN Legal Entity").isJsonNull()) && !jsonObj.get("PSTN Legal Entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PSTN Legal Entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PSTN Legal Entity").toString()));
      }
      if ((jsonObj.get("PSTN Vendor Org ID") != null && !jsonObj.get("PSTN Vendor Org ID").isJsonNull()) && !jsonObj.get("PSTN Vendor Org ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PSTN Vendor Org ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PSTN Vendor Org ID").toString()));
      }
      if ((jsonObj.get("PSTN Provider ID") != null && !jsonObj.get("PSTN Provider ID").isJsonNull()) && !jsonObj.get("PSTN Provider ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PSTN Provider ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PSTN Provider ID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CDR.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CDR' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CDR> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CDR.class));

       return (TypeAdapter<T>) new TypeAdapter<CDR>() {
           @Override
           public void write(JsonWriter out, CDR value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CDR read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CDR given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CDR
   * @throws IOException if the JSON string is invalid with respect to CDR
   */
  public static CDR fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CDR.class);
  }

  /**
   * Convert an instance of CDR to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

