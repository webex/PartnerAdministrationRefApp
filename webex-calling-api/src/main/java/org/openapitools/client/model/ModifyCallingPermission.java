// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModifyCallingPermission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ModifyCallingPermission {
  /**
   * Indicates types for outgoing calls.
   */
  @JsonAdapter(CallTypeEnum.Adapter.class)
  public enum CallTypeEnum {
    INTERNAL_CALL("INTERNAL_CALL"),
    
    TOLL_FREE("TOLL_FREE"),
    
    INTERNATIONAL("INTERNATIONAL"),
    
    OPERATOR_ASSISTED("OPERATOR_ASSISTED"),
    
    CHARGEABLE_DIRECTORY_ASSISTED("CHARGEABLE_DIRECTORY_ASSISTED"),
    
    SPECIAL_SERVICES_I("SPECIAL_SERVICES_I"),
    
    SPECIAL_SERVICES_II("SPECIAL_SERVICES_II"),
    
    PREMIUM_SERVICES_I("PREMIUM_SERVICES_I"),
    
    PREMIUM_SERVICES_II("PREMIUM_SERVICES_II"),
    
    NATIONAL("NATIONAL");

    private String value;

    CallTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallTypeEnum fromValue(String value) {
      for (CallTypeEnum b : CallTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALL_TYPE = "callType";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private CallTypeEnum callType;

  /**
   * Indicates permission for call types.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ALLOW("ALLOW"),
    
    BLOCK("BLOCK"),
    
    AUTH_CODE("AUTH_CODE"),
    
    TRANSFER_NUMBER_1("TRANSFER_NUMBER_1"),
    
    TRANSFER_NUMBER_2("TRANSFER_NUMBER_2"),
    
    TRANSFER_NUMBER_3("TRANSFER_NUMBER_3");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_TRANSFER_ENABLED = "transferEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ENABLED)
  private Boolean transferEnabled;

  public ModifyCallingPermission() {
  }

  public ModifyCallingPermission callType(CallTypeEnum callType) {
    this.callType = callType;
    return this;
  }

  /**
   * Indicates types for outgoing calls.
   * @return callType
   */
  @javax.annotation.Nullable
  public CallTypeEnum getCallType() {
    return callType;
  }

  public void setCallType(CallTypeEnum callType) {
    this.callType = callType;
  }


  public ModifyCallingPermission action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Indicates permission for call types.
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ModifyCallingPermission transferEnabled(Boolean transferEnabled) {
    this.transferEnabled = transferEnabled;
    return this;
  }

  /**
   * Indicate calling permission for call type enable status.
   * @return transferEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransferEnabled() {
    return transferEnabled;
  }

  public void setTransferEnabled(Boolean transferEnabled) {
    this.transferEnabled = transferEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyCallingPermission modifyCallingPermission = (ModifyCallingPermission) o;
    return Objects.equals(this.callType, modifyCallingPermission.callType) &&
        Objects.equals(this.action, modifyCallingPermission.action) &&
        Objects.equals(this.transferEnabled, modifyCallingPermission.transferEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callType, action, transferEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyCallingPermission {\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    transferEnabled: ").append(toIndentedString(transferEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callType");
    openapiFields.add("action");
    openapiFields.add("transferEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyCallingPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyCallingPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyCallingPermission is not found in the empty JSON string", ModifyCallingPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyCallingPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyCallingPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callType") != null && !jsonObj.get("callType").isJsonNull()) && !jsonObj.get("callType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callType").toString()));
      }
      // validate the optional field `callType`
      if (jsonObj.get("callType") != null && !jsonObj.get("callType").isJsonNull()) {
        CallTypeEnum.validateJsonElement(jsonObj.get("callType"));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyCallingPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyCallingPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyCallingPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyCallingPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyCallingPermission>() {
           @Override
           public void write(JsonWriter out, ModifyCallingPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyCallingPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyCallingPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyCallingPermission
   * @throws IOException if the JSON string is invalid with respect to ModifyCallingPermission
   */
  public static ModifyCallingPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyCallingPermission.class);
  }

  /**
   * Convert an instance of ModifyCallingPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

