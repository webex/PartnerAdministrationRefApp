// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallPersonalityEnum;
import org.openapitools.client.model.CallStateEnum;
import org.openapitools.client.model.PartyInformation;
import org.openapitools.client.model.RecallInformation;
import org.openapitools.client.model.RecordingStateEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class Call {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CALL_SESSION_ID = "callSessionId";
  @SerializedName(SERIALIZED_NAME_CALL_SESSION_ID)
  private String callSessionId;

  public static final String SERIALIZED_NAME_PERSONALITY = "personality";
  @SerializedName(SERIALIZED_NAME_PERSONALITY)
  private CallPersonalityEnum personality;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private CallStateEnum state;

  public static final String SERIALIZED_NAME_REMOTE_PARTY = "remoteParty";
  @SerializedName(SERIALIZED_NAME_REMOTE_PARTY)
  private PartyInformation remoteParty;

  public static final String SERIALIZED_NAME_APPEARANCE = "appearance";
  @SerializedName(SERIALIZED_NAME_APPEARANCE)
  private BigDecimal appearance;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_ANSWERED = "answered";
  @SerializedName(SERIALIZED_NAME_ANSWERED)
  private String answered;

  public static final String SERIALIZED_NAME_REDIRECTIONS = "redirections";
  @SerializedName(SERIALIZED_NAME_REDIRECTIONS)
  private List<Object> redirections = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECALL = "recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private RecallInformation recall;

  public static final String SERIALIZED_NAME_RECORDING_STATE = "recordingState";
  @SerializedName(SERIALIZED_NAME_RECORDING_STATE)
  private RecordingStateEnum recordingState;

  public Call() {
  }

  public Call id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The call identifier of the call.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Call callSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
    return this;
  }

  /**
   * The call session identifier of the call session the call belongs to. This can be used to correlate multiple calls that are part of the same call session.
   * @return callSessionId
   */
  @javax.annotation.Nonnull
  public String getCallSessionId() {
    return callSessionId;
  }

  public void setCallSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
  }


  public Call personality(CallPersonalityEnum personality) {
    this.personality = personality;
    return this;
  }

  /**
   * Get personality
   * @return personality
   */
  @javax.annotation.Nonnull
  public CallPersonalityEnum getPersonality() {
    return personality;
  }

  public void setPersonality(CallPersonalityEnum personality) {
    this.personality = personality;
  }


  public Call state(CallStateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public CallStateEnum getState() {
    return state;
  }

  public void setState(CallStateEnum state) {
    this.state = state;
  }


  public Call remoteParty(PartyInformation remoteParty) {
    this.remoteParty = remoteParty;
    return this;
  }

  /**
   * Get remoteParty
   * @return remoteParty
   */
  @javax.annotation.Nonnull
  public PartyInformation getRemoteParty() {
    return remoteParty;
  }

  public void setRemoteParty(PartyInformation remoteParty) {
    this.remoteParty = remoteParty;
  }


  public Call appearance(BigDecimal appearance) {
    this.appearance = appearance;
    return this;
  }

  /**
   * The appearance value for the call. The appearance value can be used to display the user&#39;s calls in an order consistent with the user&#39;s devices. Only present when the call has an appearance value assigned.
   * @return appearance
   */
  @javax.annotation.Nullable
  public BigDecimal getAppearance() {
    return appearance;
  }

  public void setAppearance(BigDecimal appearance) {
    this.appearance = appearance;
  }


  public Call created(String created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time the call was created.
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Call answered(String answered) {
    this.answered = answered;
    return this;
  }

  /**
   * The date and time the call was answered. Only present when the call has been answered.
   * @return answered
   */
  @javax.annotation.Nullable
  public String getAnswered() {
    return answered;
  }

  public void setAnswered(String answered) {
    this.answered = answered;
  }


  public Call redirections(List<Object> redirections) {
    this.redirections = redirections;
    return this;
  }

  public Call addRedirectionsItem(Object redirectionsItem) {
    if (this.redirections == null) {
      this.redirections = new ArrayList<>();
    }
    this.redirections.add(redirectionsItem);
    return this;
  }

  /**
   * The list of details for previous redirections of the incoming call ordered from most recent to least recent. For example, if user B forwards an incoming call to user C, then a redirection entry is present for B&#39;s forwarding in C&#39;s incoming call details. Only present when there were previous redirections and the incoming call&#39;s state is alerting.
   * @return redirections
   */
  @javax.annotation.Nullable
  public List<Object> getRedirections() {
    return redirections;
  }

  public void setRedirections(List<Object> redirections) {
    this.redirections = redirections;
  }


  public Call recall(RecallInformation recall) {
    this.recall = recall;
    return this;
  }

  /**
   * Get recall
   * @return recall
   */
  @javax.annotation.Nullable
  public RecallInformation getRecall() {
    return recall;
  }

  public void setRecall(RecallInformation recall) {
    this.recall = recall;
  }


  public Call recordingState(RecordingStateEnum recordingState) {
    this.recordingState = recordingState;
    return this;
  }

  /**
   * Get recordingState
   * @return recordingState
   */
  @javax.annotation.Nullable
  public RecordingStateEnum getRecordingState() {
    return recordingState;
  }

  public void setRecordingState(RecordingStateEnum recordingState) {
    this.recordingState = recordingState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Call call = (Call) o;
    return Objects.equals(this.id, call.id) &&
        Objects.equals(this.callSessionId, call.callSessionId) &&
        Objects.equals(this.personality, call.personality) &&
        Objects.equals(this.state, call.state) &&
        Objects.equals(this.remoteParty, call.remoteParty) &&
        Objects.equals(this.appearance, call.appearance) &&
        Objects.equals(this.created, call.created) &&
        Objects.equals(this.answered, call.answered) &&
        Objects.equals(this.redirections, call.redirections) &&
        Objects.equals(this.recall, call.recall) &&
        Objects.equals(this.recordingState, call.recordingState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, callSessionId, personality, state, remoteParty, appearance, created, answered, redirections, recall, recordingState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Call {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    callSessionId: ").append(toIndentedString(callSessionId)).append("\n");
    sb.append("    personality: ").append(toIndentedString(personality)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    remoteParty: ").append(toIndentedString(remoteParty)).append("\n");
    sb.append("    appearance: ").append(toIndentedString(appearance)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    answered: ").append(toIndentedString(answered)).append("\n");
    sb.append("    redirections: ").append(toIndentedString(redirections)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("    recordingState: ").append(toIndentedString(recordingState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("callSessionId");
    openapiFields.add("personality");
    openapiFields.add("state");
    openapiFields.add("remoteParty");
    openapiFields.add("appearance");
    openapiFields.add("created");
    openapiFields.add("answered");
    openapiFields.add("redirections");
    openapiFields.add("recall");
    openapiFields.add("recordingState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("callSessionId");
    openapiRequiredFields.add("personality");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("remoteParty");
    openapiRequiredFields.add("created");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Call
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Call.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Call is not found in the empty JSON string", Call.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Call.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Call` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Call.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("callSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callSessionId").toString()));
      }
      // validate the required field `personality`
      CallPersonalityEnum.validateJsonElement(jsonObj.get("personality"));
      // validate the required field `state`
      CallStateEnum.validateJsonElement(jsonObj.get("state"));
      // validate the required field `remoteParty`
      PartyInformation.validateJsonElement(jsonObj.get("remoteParty"));
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("answered") != null && !jsonObj.get("answered").isJsonNull()) && !jsonObj.get("answered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answered").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirections") != null && !jsonObj.get("redirections").isJsonNull() && !jsonObj.get("redirections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirections` to be an array in the JSON string but got `%s`", jsonObj.get("redirections").toString()));
      }
      // validate the optional field `recall`
      if (jsonObj.get("recall") != null && !jsonObj.get("recall").isJsonNull()) {
        RecallInformation.validateJsonElement(jsonObj.get("recall"));
      }
      // validate the optional field `recordingState`
      if (jsonObj.get("recordingState") != null && !jsonObj.get("recordingState").isJsonNull()) {
        RecordingStateEnum.validateJsonElement(jsonObj.get("recordingState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Call.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Call' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Call> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Call.class));

       return (TypeAdapter<T>) new TypeAdapter<Call>() {
           @Override
           public void write(JsonWriter out, Call value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Call read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Call given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Call
   * @throws IOException if the JSON string is invalid with respect to Call
   */
  public static Call fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Call.class);
  }

  /**
   * Convert an instance of Call to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

