// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The content of the meeting archive poll;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class MeetingRecordingArchivePollContent {
  public static final String SERIALIZED_NAME_QUESTION_COUNT = "questionCount";
  @SerializedName(SERIALIZED_NAME_QUESTION_COUNT)
  private BigDecimal questionCount;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private BigDecimal userCount;

  public static final String SERIALIZED_NAME_VOTED_USER_COUNT = "votedUserCount";
  @SerializedName(SERIALIZED_NAME_VOTED_USER_COUNT)
  private BigDecimal votedUserCount;

  public static final String SERIALIZED_NAME_QUESTIONS = "questions";
  @SerializedName(SERIALIZED_NAME_QUESTIONS)
  private List<Object> questions = new ArrayList<>();

  public MeetingRecordingArchivePollContent() {
  }

  public MeetingRecordingArchivePollContent questionCount(BigDecimal questionCount) {
    this.questionCount = questionCount;
    return this;
  }

  /**
   * The total number of questions.
   * @return questionCount
   */
  @javax.annotation.Nullable
  public BigDecimal getQuestionCount() {
    return questionCount;
  }

  public void setQuestionCount(BigDecimal questionCount) {
    this.questionCount = questionCount;
  }


  public MeetingRecordingArchivePollContent userCount(BigDecimal userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * The total number of users.
   * @return userCount
   */
  @javax.annotation.Nullable
  public BigDecimal getUserCount() {
    return userCount;
  }

  public void setUserCount(BigDecimal userCount) {
    this.userCount = userCount;
  }


  public MeetingRecordingArchivePollContent votedUserCount(BigDecimal votedUserCount) {
    this.votedUserCount = votedUserCount;
    return this;
  }

  /**
   * The number of voters among users.
   * @return votedUserCount
   */
  @javax.annotation.Nullable
  public BigDecimal getVotedUserCount() {
    return votedUserCount;
  }

  public void setVotedUserCount(BigDecimal votedUserCount) {
    this.votedUserCount = votedUserCount;
  }


  public MeetingRecordingArchivePollContent questions(List<Object> questions) {
    this.questions = questions;
    return this;
  }

  public MeetingRecordingArchivePollContent addQuestionsItem(Object questionsItem) {
    if (this.questions == null) {
      this.questions = new ArrayList<>();
    }
    this.questions.add(questionsItem);
    return this;
  }

  /**
   * Poll&#39;s questions.
   * @return questions
   */
  @javax.annotation.Nullable
  public List<Object> getQuestions() {
    return questions;
  }

  public void setQuestions(List<Object> questions) {
    this.questions = questions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingRecordingArchivePollContent meetingRecordingArchivePollContent = (MeetingRecordingArchivePollContent) o;
    return Objects.equals(this.questionCount, meetingRecordingArchivePollContent.questionCount) &&
        Objects.equals(this.userCount, meetingRecordingArchivePollContent.userCount) &&
        Objects.equals(this.votedUserCount, meetingRecordingArchivePollContent.votedUserCount) &&
        Objects.equals(this.questions, meetingRecordingArchivePollContent.questions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(questionCount, userCount, votedUserCount, questions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingRecordingArchivePollContent {\n");
    sb.append("    questionCount: ").append(toIndentedString(questionCount)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    votedUserCount: ").append(toIndentedString(votedUserCount)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("questionCount");
    openapiFields.add("userCount");
    openapiFields.add("votedUserCount");
    openapiFields.add("questions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingRecordingArchivePollContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingRecordingArchivePollContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingRecordingArchivePollContent is not found in the empty JSON string", MeetingRecordingArchivePollContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingRecordingArchivePollContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingRecordingArchivePollContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("questions") != null && !jsonObj.get("questions").isJsonNull() && !jsonObj.get("questions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questions` to be an array in the JSON string but got `%s`", jsonObj.get("questions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingRecordingArchivePollContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingRecordingArchivePollContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingRecordingArchivePollContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingRecordingArchivePollContent.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingRecordingArchivePollContent>() {
           @Override
           public void write(JsonWriter out, MeetingRecordingArchivePollContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingRecordingArchivePollContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingRecordingArchivePollContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingRecordingArchivePollContent
   * @throws IOException if the JSON string is invalid with respect to MeetingRecordingArchivePollContent
   */
  public static MeetingRecordingArchivePollContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingRecordingArchivePollContent.class);
  }

  /**
   * Convert an instance of MeetingRecordingArchivePollContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

