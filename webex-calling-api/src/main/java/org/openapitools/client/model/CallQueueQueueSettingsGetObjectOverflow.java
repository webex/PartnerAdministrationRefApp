// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for incoming calls exceed queueSize.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CallQueueQueueSettingsGetObjectOverflow {
  /**
   * Indicates how to handle new calls when the queue is full.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    PERFORM_BUSY_TREATMENT("PERFORM_BUSY_TREATMENT"),
    
    PLAY_RINGING_UNTIL_CALLER_HANGS_UP("PLAY_RINGING_UNTIL_CALLER_HANGS_UP"),
    
    TRANSFER_TO_PHONE_NUMBER("TRANSFER_TO_PHONE_NUMBER");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_SEND_TO_VOICEMAIL = "sendToVoicemail";
  @SerializedName(SERIALIZED_NAME_SEND_TO_VOICEMAIL)
  private Boolean sendToVoicemail;

  public static final String SERIALIZED_NAME_TRANSFER_NUMBER = "transferNumber";
  @SerializedName(SERIALIZED_NAME_TRANSFER_NUMBER)
  private String transferNumber;

  public static final String SERIALIZED_NAME_OVERFLOW_AFTER_WAIT_ENABLED = "overflowAfterWaitEnabled";
  @SerializedName(SERIALIZED_NAME_OVERFLOW_AFTER_WAIT_ENABLED)
  private Boolean overflowAfterWaitEnabled;

  public static final String SERIALIZED_NAME_OVERFLOW_AFTER_WAIT_TIME = "overflowAfterWaitTime";
  @SerializedName(SERIALIZED_NAME_OVERFLOW_AFTER_WAIT_TIME)
  private BigDecimal overflowAfterWaitTime;

  public static final String SERIALIZED_NAME_PLAY_OVERFLOW_GREETING_ENABLED = "playOverflowGreetingEnabled";
  @SerializedName(SERIALIZED_NAME_PLAY_OVERFLOW_GREETING_ENABLED)
  private Boolean playOverflowGreetingEnabled;

  /**
   * Indicates how to handle new calls when the queue is full.
   */
  @JsonAdapter(GreetingEnum.Adapter.class)
  public enum GreetingEnum {
    CUSTOM("CUSTOM"),
    
    DEFAULT("DEFAULT");

    private String value;

    GreetingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GreetingEnum fromValue(String value) {
      for (GreetingEnum b : GreetingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GreetingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GreetingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GreetingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GreetingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GreetingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GREETING = "greeting";
  @SerializedName(SERIALIZED_NAME_GREETING)
  private GreetingEnum greeting;

  public static final String SERIALIZED_NAME_AUDIO_ANNOUNCEMENT_FILES = "audioAnnouncementFiles";
  @SerializedName(SERIALIZED_NAME_AUDIO_ANNOUNCEMENT_FILES)
  private List<Object> audioAnnouncementFiles = new ArrayList<>();

  public CallQueueQueueSettingsGetObjectOverflow() {
  }

  public CallQueueQueueSettingsGetObjectOverflow action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Indicates how to handle new calls when the queue is full.
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public CallQueueQueueSettingsGetObjectOverflow sendToVoicemail(Boolean sendToVoicemail) {
    this.sendToVoicemail = sendToVoicemail;
    return this;
  }

  /**
   * When &#x60;true&#x60;, forwards all calls to a voicemail service of an internal number. This option is ignored when an external &#x60;transferNumber&#x60; is entered.
   * @return sendToVoicemail
   */
  @javax.annotation.Nullable
  public Boolean getSendToVoicemail() {
    return sendToVoicemail;
  }

  public void setSendToVoicemail(Boolean sendToVoicemail) {
    this.sendToVoicemail = sendToVoicemail;
  }


  public CallQueueQueueSettingsGetObjectOverflow transferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
    return this;
  }

  /**
   * Destination number for overflow calls when &#x60;action&#x60; is set to &#x60;TRANSFER_TO_PHONE_NUMBER&#x60;.
   * @return transferNumber
   */
  @javax.annotation.Nullable
  public String getTransferNumber() {
    return transferNumber;
  }

  public void setTransferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
  }


  public CallQueueQueueSettingsGetObjectOverflow overflowAfterWaitEnabled(Boolean overflowAfterWaitEnabled) {
    this.overflowAfterWaitEnabled = overflowAfterWaitEnabled;
    return this;
  }

  /**
   * After calls wait for the configured number of seconds and no agent is available, the overflow treatment is triggered.
   * @return overflowAfterWaitEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOverflowAfterWaitEnabled() {
    return overflowAfterWaitEnabled;
  }

  public void setOverflowAfterWaitEnabled(Boolean overflowAfterWaitEnabled) {
    this.overflowAfterWaitEnabled = overflowAfterWaitEnabled;
  }


  public CallQueueQueueSettingsGetObjectOverflow overflowAfterWaitTime(BigDecimal overflowAfterWaitTime) {
    this.overflowAfterWaitTime = overflowAfterWaitTime;
    return this;
  }

  /**
   * Number of seconds to wait before the overflow treatment is triggered when no agent is available. The minimum value 0, The maximum value is 7200 seconds.
   * @return overflowAfterWaitTime
   */
  @javax.annotation.Nullable
  public BigDecimal getOverflowAfterWaitTime() {
    return overflowAfterWaitTime;
  }

  public void setOverflowAfterWaitTime(BigDecimal overflowAfterWaitTime) {
    this.overflowAfterWaitTime = overflowAfterWaitTime;
  }


  public CallQueueQueueSettingsGetObjectOverflow playOverflowGreetingEnabled(Boolean playOverflowGreetingEnabled) {
    this.playOverflowGreetingEnabled = playOverflowGreetingEnabled;
    return this;
  }

  /**
   * Indicate overflow audio to be played, otherwise, callers will hear the hold music until the call is answered by a user.
   * @return playOverflowGreetingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPlayOverflowGreetingEnabled() {
    return playOverflowGreetingEnabled;
  }

  public void setPlayOverflowGreetingEnabled(Boolean playOverflowGreetingEnabled) {
    this.playOverflowGreetingEnabled = playOverflowGreetingEnabled;
  }


  public CallQueueQueueSettingsGetObjectOverflow greeting(GreetingEnum greeting) {
    this.greeting = greeting;
    return this;
  }

  /**
   * Indicates how to handle new calls when the queue is full.
   * @return greeting
   */
  @javax.annotation.Nonnull
  public GreetingEnum getGreeting() {
    return greeting;
  }

  public void setGreeting(GreetingEnum greeting) {
    this.greeting = greeting;
  }


  public CallQueueQueueSettingsGetObjectOverflow audioAnnouncementFiles(List<Object> audioAnnouncementFiles) {
    this.audioAnnouncementFiles = audioAnnouncementFiles;
    return this;
  }

  public CallQueueQueueSettingsGetObjectOverflow addAudioAnnouncementFilesItem(Object audioAnnouncementFilesItem) {
    if (this.audioAnnouncementFiles == null) {
      this.audioAnnouncementFiles = new ArrayList<>();
    }
    this.audioAnnouncementFiles.add(audioAnnouncementFilesItem);
    return this;
  }

  /**
   * Array of announcement files to be played as &#x60;overflow&#x60; greetings. These files are from the list of announcement files associated with this call queue. For &#x60;CUSTOM&#x60; announcement, a minimum of 1 file is mandatory, and the maximum is 4.
   * @return audioAnnouncementFiles
   */
  @javax.annotation.Nullable
  public List<Object> getAudioAnnouncementFiles() {
    return audioAnnouncementFiles;
  }

  public void setAudioAnnouncementFiles(List<Object> audioAnnouncementFiles) {
    this.audioAnnouncementFiles = audioAnnouncementFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallQueueQueueSettingsGetObjectOverflow callQueueQueueSettingsGetObjectOverflow = (CallQueueQueueSettingsGetObjectOverflow) o;
    return Objects.equals(this.action, callQueueQueueSettingsGetObjectOverflow.action) &&
        Objects.equals(this.sendToVoicemail, callQueueQueueSettingsGetObjectOverflow.sendToVoicemail) &&
        Objects.equals(this.transferNumber, callQueueQueueSettingsGetObjectOverflow.transferNumber) &&
        Objects.equals(this.overflowAfterWaitEnabled, callQueueQueueSettingsGetObjectOverflow.overflowAfterWaitEnabled) &&
        Objects.equals(this.overflowAfterWaitTime, callQueueQueueSettingsGetObjectOverflow.overflowAfterWaitTime) &&
        Objects.equals(this.playOverflowGreetingEnabled, callQueueQueueSettingsGetObjectOverflow.playOverflowGreetingEnabled) &&
        Objects.equals(this.greeting, callQueueQueueSettingsGetObjectOverflow.greeting) &&
        Objects.equals(this.audioAnnouncementFiles, callQueueQueueSettingsGetObjectOverflow.audioAnnouncementFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, sendToVoicemail, transferNumber, overflowAfterWaitEnabled, overflowAfterWaitTime, playOverflowGreetingEnabled, greeting, audioAnnouncementFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallQueueQueueSettingsGetObjectOverflow {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    sendToVoicemail: ").append(toIndentedString(sendToVoicemail)).append("\n");
    sb.append("    transferNumber: ").append(toIndentedString(transferNumber)).append("\n");
    sb.append("    overflowAfterWaitEnabled: ").append(toIndentedString(overflowAfterWaitEnabled)).append("\n");
    sb.append("    overflowAfterWaitTime: ").append(toIndentedString(overflowAfterWaitTime)).append("\n");
    sb.append("    playOverflowGreetingEnabled: ").append(toIndentedString(playOverflowGreetingEnabled)).append("\n");
    sb.append("    greeting: ").append(toIndentedString(greeting)).append("\n");
    sb.append("    audioAnnouncementFiles: ").append(toIndentedString(audioAnnouncementFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("sendToVoicemail");
    openapiFields.add("transferNumber");
    openapiFields.add("overflowAfterWaitEnabled");
    openapiFields.add("overflowAfterWaitTime");
    openapiFields.add("playOverflowGreetingEnabled");
    openapiFields.add("greeting");
    openapiFields.add("audioAnnouncementFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("greeting");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallQueueQueueSettingsGetObjectOverflow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallQueueQueueSettingsGetObjectOverflow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallQueueQueueSettingsGetObjectOverflow is not found in the empty JSON string", CallQueueQueueSettingsGetObjectOverflow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallQueueQueueSettingsGetObjectOverflow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallQueueQueueSettingsGetObjectOverflow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallQueueQueueSettingsGetObjectOverflow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("transferNumber") != null && !jsonObj.get("transferNumber").isJsonNull()) && !jsonObj.get("transferNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferNumber").toString()));
      }
      if (!jsonObj.get("greeting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greeting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greeting").toString()));
      }
      // validate the required field `greeting`
      GreetingEnum.validateJsonElement(jsonObj.get("greeting"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("audioAnnouncementFiles") != null && !jsonObj.get("audioAnnouncementFiles").isJsonNull() && !jsonObj.get("audioAnnouncementFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioAnnouncementFiles` to be an array in the JSON string but got `%s`", jsonObj.get("audioAnnouncementFiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallQueueQueueSettingsGetObjectOverflow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallQueueQueueSettingsGetObjectOverflow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallQueueQueueSettingsGetObjectOverflow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallQueueQueueSettingsGetObjectOverflow.class));

       return (TypeAdapter<T>) new TypeAdapter<CallQueueQueueSettingsGetObjectOverflow>() {
           @Override
           public void write(JsonWriter out, CallQueueQueueSettingsGetObjectOverflow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallQueueQueueSettingsGetObjectOverflow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallQueueQueueSettingsGetObjectOverflow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallQueueQueueSettingsGetObjectOverflow
   * @throws IOException if the JSON string is invalid with respect to CallQueueQueueSettingsGetObjectOverflow
   */
  public static CallQueueQueueSettingsGetObjectOverflow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallQueueQueueSettingsGetObjectOverflow.class);
  }

  /**
   * Convert an instance of CallQueueQueueSettingsGetObjectOverflow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

