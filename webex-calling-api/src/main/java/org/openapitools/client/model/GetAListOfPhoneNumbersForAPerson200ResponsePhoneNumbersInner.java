// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner {
  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_DIRECT_NUMBER = "directNumber";
  @SerializedName(SERIALIZED_NAME_DIRECT_NUMBER)
  private String directNumber;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_ROUTING_PREFIX = "routingPrefix";
  @SerializedName(SERIALIZED_NAME_ROUTING_PREFIX)
  private String routingPrefix;

  public static final String SERIALIZED_NAME_ESN = "esn";
  @SerializedName(SERIALIZED_NAME_ESN)
  private String esn;

  /**
   * Optional ring pattern. Applicable only for alternate numbers.
   */
  @JsonAdapter(RingPatternEnum.Adapter.class)
  public enum RingPatternEnum {
    NORMAL("NORMAL"),
    
    LONG_LONG("LONG_LONG"),
    
    SHORT_SHORT_LONG("SHORT_SHORT_LONG"),
    
    SHORT_LONG_SHORT("SHORT_LONG_SHORT");

    private String value;

    RingPatternEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RingPatternEnum fromValue(String value) {
      for (RingPatternEnum b : RingPatternEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RingPatternEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RingPatternEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RingPatternEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RingPatternEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RingPatternEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RING_PATTERN = "ringPattern";
  @SerializedName(SERIALIZED_NAME_RING_PATTERN)
  private RingPatternEnum ringPattern;

  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner() {
  }

  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Flag to indicate if the number is primary or not.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner directNumber(String directNumber) {
    this.directNumber = directNumber;
    return this;
  }

  /**
   * Phone number.
   * @return directNumber
   */
  @javax.annotation.Nullable
  public String getDirectNumber() {
    return directNumber;
  }

  public void setDirectNumber(String directNumber) {
    this.directNumber = directNumber;
  }


  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Extension.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner routingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
    return this;
  }

  /**
   * Routing prefix of location.
   * @return routingPrefix
   */
  @javax.annotation.Nullable
  public String getRoutingPrefix() {
    return routingPrefix;
  }

  public void setRoutingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
  }


  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner esn(String esn) {
    this.esn = esn;
    return this;
  }

  /**
   * Routing prefix + extension of a person or workspace.
   * @return esn
   */
  @javax.annotation.Nullable
  public String getEsn() {
    return esn;
  }

  public void setEsn(String esn) {
    this.esn = esn;
  }


  public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner ringPattern(RingPatternEnum ringPattern) {
    this.ringPattern = ringPattern;
    return this;
  }

  /**
   * Optional ring pattern. Applicable only for alternate numbers.
   * @return ringPattern
   */
  @javax.annotation.Nullable
  public RingPatternEnum getRingPattern() {
    return ringPattern;
  }

  public void setRingPattern(RingPatternEnum ringPattern) {
    this.ringPattern = ringPattern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner = (GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner) o;
    return Objects.equals(this.primary, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.primary) &&
        Objects.equals(this.directNumber, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.directNumber) &&
        Objects.equals(this.extension, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.extension) &&
        Objects.equals(this.routingPrefix, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.routingPrefix) &&
        Objects.equals(this.esn, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.esn) &&
        Objects.equals(this.ringPattern, getAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.ringPattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primary, directNumber, extension, routingPrefix, esn, ringPattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner {\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    directNumber: ").append(toIndentedString(directNumber)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    routingPrefix: ").append(toIndentedString(routingPrefix)).append("\n");
    sb.append("    esn: ").append(toIndentedString(esn)).append("\n");
    sb.append("    ringPattern: ").append(toIndentedString(ringPattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primary");
    openapiFields.add("directNumber");
    openapiFields.add("extension");
    openapiFields.add("routingPrefix");
    openapiFields.add("esn");
    openapiFields.add("ringPattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner is not found in the empty JSON string", GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("directNumber") != null && !jsonObj.get("directNumber").isJsonNull()) && !jsonObj.get("directNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directNumber").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("routingPrefix") != null && !jsonObj.get("routingPrefix").isJsonNull()) && !jsonObj.get("routingPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingPrefix").toString()));
      }
      if ((jsonObj.get("esn") != null && !jsonObj.get("esn").isJsonNull()) && !jsonObj.get("esn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esn").toString()));
      }
      if ((jsonObj.get("ringPattern") != null && !jsonObj.get("ringPattern").isJsonNull()) && !jsonObj.get("ringPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ringPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ringPattern").toString()));
      }
      // validate the optional field `ringPattern`
      if (jsonObj.get("ringPattern") != null && !jsonObj.get("ringPattern").isJsonNull()) {
        RingPatternEnum.validateJsonElement(jsonObj.get("ringPattern"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner>() {
           @Override
           public void write(JsonWriter out, GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner
   * @throws IOException if the JSON string is invalid with respect to GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner
   */
  public static GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner.class);
  }

  /**
   * Convert an instance of GetAListOfPhoneNumbersForAPerson200ResponsePhoneNumbersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

