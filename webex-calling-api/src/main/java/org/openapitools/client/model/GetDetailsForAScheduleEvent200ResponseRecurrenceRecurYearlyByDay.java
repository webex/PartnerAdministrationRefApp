// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recurrence definition yearly by day.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay {
  /**
   * Schedule the event on a specific day.
   */
  @JsonAdapter(DayEnum.Adapter.class)
  public enum DayEnum {
    SUNDAY("SUNDAY"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY");

    private String value;

    DayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayEnum fromValue(String value) {
      for (DayEnum b : DayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private DayEnum day;

  /**
   * Schedule the event on a specific week.
   */
  @JsonAdapter(WeekEnum.Adapter.class)
  public enum WeekEnum {
    FIRST("FIRST"),
    
    SECOND("SECOND"),
    
    THIRD("THIRD"),
    
    FOURTH("FOURTH"),
    
    LAST("LAST");

    private String value;

    WeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeekEnum fromValue(String value) {
      for (WeekEnum b : WeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private WeekEnum week;

  /**
   * Schedule the event on a specific month.
   */
  @JsonAdapter(MonthEnum.Adapter.class)
  public enum MonthEnum {
    JANUARY("JANUARY"),
    
    FEBRUARY("FEBRUARY"),
    
    MARCH("MARCH"),
    
    APRIL("APRIL"),
    
    MAY("MAY"),
    
    JUNE("JUNE"),
    
    JULY("JULY"),
    
    AUGUST("AUGUST"),
    
    SEPTEMBER("SEPTEMBER"),
    
    OCTOBER("OCTOBER"),
    
    NOVEMBER("NOVEMBER"),
    
    DECEMBER("DECEMBER");

    private String value;

    MonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthEnum fromValue(String value) {
      for (MonthEnum b : MonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private MonthEnum month;

  public GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay() {
  }

  public GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay day(DayEnum day) {
    this.day = day;
    return this;
  }

  /**
   * Schedule the event on a specific day.
   * @return day
   */
  @javax.annotation.Nonnull
  public DayEnum getDay() {
    return day;
  }

  public void setDay(DayEnum day) {
    this.day = day;
  }


  public GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay week(WeekEnum week) {
    this.week = week;
    return this;
  }

  /**
   * Schedule the event on a specific week.
   * @return week
   */
  @javax.annotation.Nonnull
  public WeekEnum getWeek() {
    return week;
  }

  public void setWeek(WeekEnum week) {
    this.week = week;
  }


  public GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay month(MonthEnum month) {
    this.month = month;
    return this;
  }

  /**
   * Schedule the event on a specific month.
   * @return month
   */
  @javax.annotation.Nonnull
  public MonthEnum getMonth() {
    return month;
  }

  public void setMonth(MonthEnum month) {
    this.month = month;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay getDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay = (GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay) o;
    return Objects.equals(this.day, getDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.day) &&
        Objects.equals(this.week, getDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.week) &&
        Objects.equals(this.month, getDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.month);
  }

  @Override
  public int hashCode() {
    return Objects.hash(day, week, month);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay {\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("day");
    openapiFields.add("week");
    openapiFields.add("month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("day");
    openapiRequiredFields.add("week");
    openapiRequiredFields.add("month");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay is not found in the empty JSON string", GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      // validate the required field `day`
      DayEnum.validateJsonElement(jsonObj.get("day"));
      if (!jsonObj.get("week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("week").toString()));
      }
      // validate the required field `week`
      WeekEnum.validateJsonElement(jsonObj.get("week"));
      if (!jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      // validate the required field `month`
      MonthEnum.validateJsonElement(jsonObj.get("month"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay>() {
           @Override
           public void write(JsonWriter out, GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay
   * @throws IOException if the JSON string is invalid with respect to GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay
   */
  public static GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay.class);
  }

  /**
   * Convert an instance of GetDetailsForAScheduleEvent200ResponseRecurrenceRecurYearlyByDay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

