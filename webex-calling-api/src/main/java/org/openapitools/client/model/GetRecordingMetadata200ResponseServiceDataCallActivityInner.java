// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRecordingMetadata200ResponseServiceDataCallActivityInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetRecordingMetadata200ResponseServiceDataCallActivityInner {
  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_MEDIA_STREAMS = "mediaStreams";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAMS)
  private List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner> mediaStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNOUNCEMENT_DATA = "announcementData";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_DATA)
  private GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData announcementData;

  public GetRecordingMetadata200ResponseServiceDataCallActivityInner() {
  }

  public GetRecordingMetadata200ResponseServiceDataCallActivityInner timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public GetRecordingMetadata200ResponseServiceDataCallActivityInner mediaStreams(List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner> mediaStreams) {
    this.mediaStreams = mediaStreams;
    return this;
  }

  public GetRecordingMetadata200ResponseServiceDataCallActivityInner addMediaStreamsItem(GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner mediaStreamsItem) {
    if (this.mediaStreams == null) {
      this.mediaStreams = new ArrayList<>();
    }
    this.mediaStreams.add(mediaStreamsItem);
    return this;
  }

  /**
   * Get mediaStreams
   * @return mediaStreams
   */
  @javax.annotation.Nullable
  public List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner> getMediaStreams() {
    return mediaStreams;
  }

  public void setMediaStreams(List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner> mediaStreams) {
    this.mediaStreams = mediaStreams;
  }


  public GetRecordingMetadata200ResponseServiceDataCallActivityInner participants(List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner> participants) {
    this.participants = participants;
    return this;
  }

  public GetRecordingMetadata200ResponseServiceDataCallActivityInner addParticipantsItem(GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Get participants
   * @return participants
   */
  @javax.annotation.Nullable
  public List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner> getParticipants() {
    return participants;
  }

  public void setParticipants(List<GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner> participants) {
    this.participants = participants;
  }


  public GetRecordingMetadata200ResponseServiceDataCallActivityInner announcementData(GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData announcementData) {
    this.announcementData = announcementData;
    return this;
  }

  /**
   * Get announcementData
   * @return announcementData
   */
  @javax.annotation.Nullable
  public GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData getAnnouncementData() {
    return announcementData;
  }

  public void setAnnouncementData(GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData announcementData) {
    this.announcementData = announcementData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecordingMetadata200ResponseServiceDataCallActivityInner getRecordingMetadata200ResponseServiceDataCallActivityInner = (GetRecordingMetadata200ResponseServiceDataCallActivityInner) o;
    return Objects.equals(this.timeStamp, getRecordingMetadata200ResponseServiceDataCallActivityInner.timeStamp) &&
        Objects.equals(this.mediaStreams, getRecordingMetadata200ResponseServiceDataCallActivityInner.mediaStreams) &&
        Objects.equals(this.participants, getRecordingMetadata200ResponseServiceDataCallActivityInner.participants) &&
        Objects.equals(this.announcementData, getRecordingMetadata200ResponseServiceDataCallActivityInner.announcementData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeStamp, mediaStreams, participants, announcementData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecordingMetadata200ResponseServiceDataCallActivityInner {\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    mediaStreams: ").append(toIndentedString(mediaStreams)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    announcementData: ").append(toIndentedString(announcementData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timeStamp");
    openapiFields.add("mediaStreams");
    openapiFields.add("participants");
    openapiFields.add("announcementData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecordingMetadata200ResponseServiceDataCallActivityInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecordingMetadata200ResponseServiceDataCallActivityInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecordingMetadata200ResponseServiceDataCallActivityInner is not found in the empty JSON string", GetRecordingMetadata200ResponseServiceDataCallActivityInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecordingMetadata200ResponseServiceDataCallActivityInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecordingMetadata200ResponseServiceDataCallActivityInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("timeStamp") != null && !jsonObj.get("timeStamp").isJsonNull()) && !jsonObj.get("timeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeStamp").toString()));
      }
      if (jsonObj.get("mediaStreams") != null && !jsonObj.get("mediaStreams").isJsonNull()) {
        JsonArray jsonArraymediaStreams = jsonObj.getAsJsonArray("mediaStreams");
        if (jsonArraymediaStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mediaStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mediaStreams` to be an array in the JSON string but got `%s`", jsonObj.get("mediaStreams").toString()));
          }

          // validate the optional field `mediaStreams` (array)
          for (int i = 0; i < jsonArraymediaStreams.size(); i++) {
            GetRecordingMetadata200ResponseServiceDataCallActivityInnerMediaStreamsInner.validateJsonElement(jsonArraymediaStreams.get(i));
          };
        }
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            GetRecordingMetadata200ResponseServiceDataCallActivityInnerParticipantsInner.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      // validate the optional field `announcementData`
      if (jsonObj.get("announcementData") != null && !jsonObj.get("announcementData").isJsonNull()) {
        GetRecordingMetadata200ResponseServiceDataCallActivityInnerAnnouncementData.validateJsonElement(jsonObj.get("announcementData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecordingMetadata200ResponseServiceDataCallActivityInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecordingMetadata200ResponseServiceDataCallActivityInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecordingMetadata200ResponseServiceDataCallActivityInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecordingMetadata200ResponseServiceDataCallActivityInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecordingMetadata200ResponseServiceDataCallActivityInner>() {
           @Override
           public void write(JsonWriter out, GetRecordingMetadata200ResponseServiceDataCallActivityInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecordingMetadata200ResponseServiceDataCallActivityInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecordingMetadata200ResponseServiceDataCallActivityInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecordingMetadata200ResponseServiceDataCallActivityInner
   * @throws IOException if the JSON string is invalid with respect to GetRecordingMetadata200ResponseServiceDataCallActivityInner
   */
  public static GetRecordingMetadata200ResponseServiceDataCallActivityInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecordingMetadata200ResponseServiceDataCallActivityInner.class);
  }

  /**
   * Convert an instance of GetRecordingMetadata200ResponseServiceDataCallActivityInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

