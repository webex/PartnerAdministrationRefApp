// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The alternate numbers feature allows you to assign multiple phone numbers or extensions to a call queue. Each number will reach the same greeting and each menu will function identically to the main number. The alternate numbers option enables you to have up to ten (10) phone numbers ring into the call queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetCallQueueObjectAlternateNumberSettings {
  public static final String SERIALIZED_NAME_DISTINCTIVE_RING_ENABLED = "distinctiveRingEnabled";
  @SerializedName(SERIALIZED_NAME_DISTINCTIVE_RING_ENABLED)
  private Boolean distinctiveRingEnabled;

  public static final String SERIALIZED_NAME_ALTERNATE_NUMBERS = "alternateNumbers";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_NUMBERS)
  private List<Object> alternateNumbers = new ArrayList<>();

  public GetCallQueueObjectAlternateNumberSettings() {
  }

  public GetCallQueueObjectAlternateNumberSettings distinctiveRingEnabled(Boolean distinctiveRingEnabled) {
    this.distinctiveRingEnabled = distinctiveRingEnabled;
    return this;
  }

  /**
   * Distinctive Ringing selected for the alternate numbers in the call queue overrides the normal ringing patterns set for the Alternate Numbers.
   * @return distinctiveRingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getDistinctiveRingEnabled() {
    return distinctiveRingEnabled;
  }

  public void setDistinctiveRingEnabled(Boolean distinctiveRingEnabled) {
    this.distinctiveRingEnabled = distinctiveRingEnabled;
  }


  public GetCallQueueObjectAlternateNumberSettings alternateNumbers(List<Object> alternateNumbers) {
    this.alternateNumbers = alternateNumbers;
    return this;
  }

  public GetCallQueueObjectAlternateNumberSettings addAlternateNumbersItem(Object alternateNumbersItem) {
    if (this.alternateNumbers == null) {
      this.alternateNumbers = new ArrayList<>();
    }
    this.alternateNumbers.add(alternateNumbersItem);
    return this;
  }

  /**
   * Specifies up to 10 numbers which can each have an overriden distinctive ring setting.
   * @return alternateNumbers
   */
  @javax.annotation.Nonnull
  public List<Object> getAlternateNumbers() {
    return alternateNumbers;
  }

  public void setAlternateNumbers(List<Object> alternateNumbers) {
    this.alternateNumbers = alternateNumbers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCallQueueObjectAlternateNumberSettings getCallQueueObjectAlternateNumberSettings = (GetCallQueueObjectAlternateNumberSettings) o;
    return Objects.equals(this.distinctiveRingEnabled, getCallQueueObjectAlternateNumberSettings.distinctiveRingEnabled) &&
        Objects.equals(this.alternateNumbers, getCallQueueObjectAlternateNumberSettings.alternateNumbers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distinctiveRingEnabled, alternateNumbers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCallQueueObjectAlternateNumberSettings {\n");
    sb.append("    distinctiveRingEnabled: ").append(toIndentedString(distinctiveRingEnabled)).append("\n");
    sb.append("    alternateNumbers: ").append(toIndentedString(alternateNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distinctiveRingEnabled");
    openapiFields.add("alternateNumbers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distinctiveRingEnabled");
    openapiRequiredFields.add("alternateNumbers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCallQueueObjectAlternateNumberSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCallQueueObjectAlternateNumberSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCallQueueObjectAlternateNumberSettings is not found in the empty JSON string", GetCallQueueObjectAlternateNumberSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCallQueueObjectAlternateNumberSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCallQueueObjectAlternateNumberSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCallQueueObjectAlternateNumberSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("alternateNumbers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("alternateNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("alternateNumbers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCallQueueObjectAlternateNumberSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCallQueueObjectAlternateNumberSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCallQueueObjectAlternateNumberSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCallQueueObjectAlternateNumberSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCallQueueObjectAlternateNumberSettings>() {
           @Override
           public void write(JsonWriter out, GetCallQueueObjectAlternateNumberSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCallQueueObjectAlternateNumberSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCallQueueObjectAlternateNumberSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCallQueueObjectAlternateNumberSettings
   * @throws IOException if the JSON string is invalid with respect to GetCallQueueObjectAlternateNumberSettings
   */
  public static GetCallQueueObjectAlternateNumberSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCallQueueObjectAlternateNumberSettings.class);
  }

  /**
   * Convert an instance of GetCallQueueObjectAlternateNumberSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

