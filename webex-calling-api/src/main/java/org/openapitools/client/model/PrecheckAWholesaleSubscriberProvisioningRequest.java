// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo;
import org.openapitools.client.model.PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrecheckAWholesaleSubscriberProvisioningRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class PrecheckAWholesaleSubscriberProvisioningRequest {
  public static final String SERIALIZED_NAME_PROVISIONING_ID = "provisioningId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ID)
  private String provisioningId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * The Webex Wholesale package to be assigned to the subscriber. **NOTE:** This parameter will be deprecated soon. Please  use &#x60;packages&#x60; instead.
   */
  @JsonAdapter(PackageEnum.Adapter.class)
  public enum PackageEnum {
    WEBEX_CALLING("webex_calling"),
    
    WEBEX_MEETINGS("webex_meetings"),
    
    WEBEX_SUITE("webex_suite"),
    
    WEBEX_VOICE("webex_voice"),
    
    CX_ESSENTIALS("cx_essentials");

    private String value;

    PackageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageEnum fromValue(String value) {
      for (PackageEnum b : PackageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private PackageEnum _package;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<Object> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_PARAMETERS = "provisioningParameters";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PARAMETERS)
  private PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters provisioningParameters;

  public static final String SERIALIZED_NAME_CUSTOMER_INFO = "customerInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INFO)
  private PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo customerInfo;

  public PrecheckAWholesaleSubscriberProvisioningRequest() {
  }

  public PrecheckAWholesaleSubscriberProvisioningRequest provisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
    return this;
  }

  /**
   * This Provisioning ID defines how this wholesale subscriber is to be provisioned for Cisco Webex Services.  Each Customer template has its unique provisioning ID. This ID is displayed under the chosen customer template on Cisco Webex Control Hub.
   * @return provisioningId
   */
  @javax.annotation.Nullable
  public String getProvisioningId() {
    return provisioningId;
  }

  public void setProvisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * ID of the Provisioned Customer for Webex Wholesale.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the subscriber.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest _package(PackageEnum _package) {
    this._package = _package;
    return this;
  }

  /**
   * The Webex Wholesale package to be assigned to the subscriber. **NOTE:** This parameter will be deprecated soon. Please  use &#x60;packages&#x60; instead.
   * @return _package
   */
  @javax.annotation.Nullable
  public PackageEnum getPackage() {
    return _package;
  }

  public void setPackage(PackageEnum _package) {
    this._package = _package;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest packages(List<Object> packages) {
    this.packages = packages;
    return this;
  }

  public PrecheckAWholesaleSubscriberProvisioningRequest addPackagesItem(Object packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The complete list of Webex Wholesale packages assigned to the subscriber. Currently accepts only one package in the list.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<Object> getPackages() {
    return packages;
  }

  public void setPackages(List<Object> packages) {
    this.packages = packages;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest provisioningParameters(PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
    return this;
  }

  /**
   * Get provisioningParameters
   * @return provisioningParameters
   */
  @javax.annotation.Nullable
  public PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters getProvisioningParameters() {
    return provisioningParameters;
  }

  public void setProvisioningParameters(PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
  }


  public PrecheckAWholesaleSubscriberProvisioningRequest customerInfo(PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
    return this;
  }

  /**
   * Get customerInfo
   * @return customerInfo
   */
  @javax.annotation.Nullable
  public PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo getCustomerInfo() {
    return customerInfo;
  }

  public void setCustomerInfo(PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrecheckAWholesaleSubscriberProvisioningRequest precheckAWholesaleSubscriberProvisioningRequest = (PrecheckAWholesaleSubscriberProvisioningRequest) o;
    return Objects.equals(this.provisioningId, precheckAWholesaleSubscriberProvisioningRequest.provisioningId) &&
        Objects.equals(this.customerId, precheckAWholesaleSubscriberProvisioningRequest.customerId) &&
        Objects.equals(this.email, precheckAWholesaleSubscriberProvisioningRequest.email) &&
        Objects.equals(this._package, precheckAWholesaleSubscriberProvisioningRequest._package) &&
        Objects.equals(this.packages, precheckAWholesaleSubscriberProvisioningRequest.packages) &&
        Objects.equals(this.provisioningParameters, precheckAWholesaleSubscriberProvisioningRequest.provisioningParameters) &&
        Objects.equals(this.customerInfo, precheckAWholesaleSubscriberProvisioningRequest.customerInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningId, customerId, email, _package, packages, provisioningParameters, customerInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrecheckAWholesaleSubscriberProvisioningRequest {\n");
    sb.append("    provisioningId: ").append(toIndentedString(provisioningId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    provisioningParameters: ").append(toIndentedString(provisioningParameters)).append("\n");
    sb.append("    customerInfo: ").append(toIndentedString(customerInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningId");
    openapiFields.add("customerId");
    openapiFields.add("email");
    openapiFields.add("package");
    openapiFields.add("packages");
    openapiFields.add("provisioningParameters");
    openapiFields.add("customerInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrecheckAWholesaleSubscriberProvisioningRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrecheckAWholesaleSubscriberProvisioningRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrecheckAWholesaleSubscriberProvisioningRequest is not found in the empty JSON string", PrecheckAWholesaleSubscriberProvisioningRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrecheckAWholesaleSubscriberProvisioningRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrecheckAWholesaleSubscriberProvisioningRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrecheckAWholesaleSubscriberProvisioningRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningId") != null && !jsonObj.get("provisioningId").isJsonNull()) && !jsonObj.get("provisioningId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) && !jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        PackageEnum.validateJsonElement(jsonObj.get("package"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull() && !jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      // validate the optional field `provisioningParameters`
      if (jsonObj.get("provisioningParameters") != null && !jsonObj.get("provisioningParameters").isJsonNull()) {
        PrecheckAWholesaleSubscriberProvisioningRequestProvisioningParameters.validateJsonElement(jsonObj.get("provisioningParameters"));
      }
      // validate the optional field `customerInfo`
      if (jsonObj.get("customerInfo") != null && !jsonObj.get("customerInfo").isJsonNull()) {
        PrecheckAWholesaleSubscriberProvisioningRequestCustomerInfo.validateJsonElement(jsonObj.get("customerInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrecheckAWholesaleSubscriberProvisioningRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrecheckAWholesaleSubscriberProvisioningRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrecheckAWholesaleSubscriberProvisioningRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrecheckAWholesaleSubscriberProvisioningRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PrecheckAWholesaleSubscriberProvisioningRequest>() {
           @Override
           public void write(JsonWriter out, PrecheckAWholesaleSubscriberProvisioningRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrecheckAWholesaleSubscriberProvisioningRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrecheckAWholesaleSubscriberProvisioningRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrecheckAWholesaleSubscriberProvisioningRequest
   * @throws IOException if the JSON string is invalid with respect to PrecheckAWholesaleSubscriberProvisioningRequest
   */
  public static PrecheckAWholesaleSubscriberProvisioningRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrecheckAWholesaleSubscriberProvisioningRequest.class);
  }

  /**
   * Convert an instance of PrecheckAWholesaleSubscriberProvisioningRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

