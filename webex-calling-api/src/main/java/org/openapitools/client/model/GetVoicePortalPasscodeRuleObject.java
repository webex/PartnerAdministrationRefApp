// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes;
import org.openapitools.client.model.GetVoicePortalPasscodeRuleObjectExpirePasscode;
import org.openapitools.client.model.GetVoicePortalPasscodeRuleObjectFailedAttempts;
import org.openapitools.client.model.GetVoicePortalPasscodeRuleObjectLength;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetVoicePortalPasscodeRuleObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetVoicePortalPasscodeRuleObject {
  public static final String SERIALIZED_NAME_EXPIRE_PASSCODE = "expirePasscode";
  @SerializedName(SERIALIZED_NAME_EXPIRE_PASSCODE)
  private GetVoicePortalPasscodeRuleObjectExpirePasscode expirePasscode;

  public static final String SERIALIZED_NAME_FAILED_ATTEMPTS = "failedAttempts";
  @SerializedName(SERIALIZED_NAME_FAILED_ATTEMPTS)
  private GetVoicePortalPasscodeRuleObjectFailedAttempts failedAttempts;

  public static final String SERIALIZED_NAME_BLOCK_PREVIOUS_PASSCODES = "blockPreviousPasscodes";
  @SerializedName(SERIALIZED_NAME_BLOCK_PREVIOUS_PASSCODES)
  private GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes blockPreviousPasscodes;

  public static final String SERIALIZED_NAME_BLOCK_REPEATED_DIGITS = "blockRepeatedDigits";
  @SerializedName(SERIALIZED_NAME_BLOCK_REPEATED_DIGITS)
  private Object blockRepeatedDigits;

  public static final String SERIALIZED_NAME_BLOCK_CONTIGUOUS_SEQUENCES = "blockContiguousSequences";
  @SerializedName(SERIALIZED_NAME_BLOCK_CONTIGUOUS_SEQUENCES)
  private Object blockContiguousSequences;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private GetVoicePortalPasscodeRuleObjectLength length;

  public static final String SERIALIZED_NAME_BLOCK_REPEATED_PATTERNS_ENABLED = "blockRepeatedPatternsEnabled";
  @SerializedName(SERIALIZED_NAME_BLOCK_REPEATED_PATTERNS_ENABLED)
  private Boolean blockRepeatedPatternsEnabled;

  public static final String SERIALIZED_NAME_BLOCK_USER_NUMBER_ENABLED = "blockUserNumberEnabled";
  @SerializedName(SERIALIZED_NAME_BLOCK_USER_NUMBER_ENABLED)
  private Boolean blockUserNumberEnabled;

  public static final String SERIALIZED_NAME_BLOCK_REVERSED_USER_NUMBER_ENABLED = "blockReversedUserNumberEnabled";
  @SerializedName(SERIALIZED_NAME_BLOCK_REVERSED_USER_NUMBER_ENABLED)
  private Boolean blockReversedUserNumberEnabled;

  public static final String SERIALIZED_NAME_BLOCK_REVERSED_OLD_PASSCODE_ENABLED = "blockReversedOldPasscodeEnabled";
  @SerializedName(SERIALIZED_NAME_BLOCK_REVERSED_OLD_PASSCODE_ENABLED)
  private Boolean blockReversedOldPasscodeEnabled;

  public GetVoicePortalPasscodeRuleObject() {
  }

  public GetVoicePortalPasscodeRuleObject expirePasscode(GetVoicePortalPasscodeRuleObjectExpirePasscode expirePasscode) {
    this.expirePasscode = expirePasscode;
    return this;
  }

  /**
   * Get expirePasscode
   * @return expirePasscode
   */
  @javax.annotation.Nullable
  public GetVoicePortalPasscodeRuleObjectExpirePasscode getExpirePasscode() {
    return expirePasscode;
  }

  public void setExpirePasscode(GetVoicePortalPasscodeRuleObjectExpirePasscode expirePasscode) {
    this.expirePasscode = expirePasscode;
  }


  public GetVoicePortalPasscodeRuleObject failedAttempts(GetVoicePortalPasscodeRuleObjectFailedAttempts failedAttempts) {
    this.failedAttempts = failedAttempts;
    return this;
  }

  /**
   * Get failedAttempts
   * @return failedAttempts
   */
  @javax.annotation.Nullable
  public GetVoicePortalPasscodeRuleObjectFailedAttempts getFailedAttempts() {
    return failedAttempts;
  }

  public void setFailedAttempts(GetVoicePortalPasscodeRuleObjectFailedAttempts failedAttempts) {
    this.failedAttempts = failedAttempts;
  }


  public GetVoicePortalPasscodeRuleObject blockPreviousPasscodes(GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes blockPreviousPasscodes) {
    this.blockPreviousPasscodes = blockPreviousPasscodes;
    return this;
  }

  /**
   * Get blockPreviousPasscodes
   * @return blockPreviousPasscodes
   */
  @javax.annotation.Nullable
  public GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes getBlockPreviousPasscodes() {
    return blockPreviousPasscodes;
  }

  public void setBlockPreviousPasscodes(GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes blockPreviousPasscodes) {
    this.blockPreviousPasscodes = blockPreviousPasscodes;
  }


  public GetVoicePortalPasscodeRuleObject blockRepeatedDigits(Object blockRepeatedDigits) {
    this.blockRepeatedDigits = blockRepeatedDigits;
    return this;
  }

  /**
   * Settings for not allowing single or groups of repeated digits in passcode (for example, 22888, 121212, or 408408).      + enabled: true (boolean) - If enabled, passcode should not contain repeated digits.     + max: &#x60;3&#x60; (number) - Maximum number of digits to be considered as a repeated sequence. The minimum value is 1. The maximum value is 6.
   * @return blockRepeatedDigits
   */
  @javax.annotation.Nullable
  public Object getBlockRepeatedDigits() {
    return blockRepeatedDigits;
  }

  public void setBlockRepeatedDigits(Object blockRepeatedDigits) {
    this.blockRepeatedDigits = blockRepeatedDigits;
  }


  public GetVoicePortalPasscodeRuleObject blockContiguousSequences(Object blockContiguousSequences) {
    this.blockContiguousSequences = blockContiguousSequences;
    return this;
  }

  /**
   * Settings for not allowing numerical sequence in passcode (for example, 012345 or 987654).      + enabled: true (boolean) - If enabled, do not allow the specified number of ascending or descending digits in a row.     + numberOfAscendingDigits: &#x60;3&#x60; (number) -  Number of ascending digits in sequence. The minimum value is 2. The maximum value is 5.     + numberOfDescendingDigits: &#x60;3&#x60; (number) -  Number of descending digits in sequence. The minimum value is 2. The maximum value is 5.
   * @return blockContiguousSequences
   */
  @javax.annotation.Nullable
  public Object getBlockContiguousSequences() {
    return blockContiguousSequences;
  }

  public void setBlockContiguousSequences(Object blockContiguousSequences) {
    this.blockContiguousSequences = blockContiguousSequences;
  }


  public GetVoicePortalPasscodeRuleObject length(GetVoicePortalPasscodeRuleObjectLength length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public GetVoicePortalPasscodeRuleObjectLength getLength() {
    return length;
  }

  public void setLength(GetVoicePortalPasscodeRuleObjectLength length) {
    this.length = length;
  }


  public GetVoicePortalPasscodeRuleObject blockRepeatedPatternsEnabled(Boolean blockRepeatedPatternsEnabled) {
    this.blockRepeatedPatternsEnabled = blockRepeatedPatternsEnabled;
    return this;
  }

  /**
   * If enabled, the passcode do not contain repeated pattern.
   * @return blockRepeatedPatternsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBlockRepeatedPatternsEnabled() {
    return blockRepeatedPatternsEnabled;
  }

  public void setBlockRepeatedPatternsEnabled(Boolean blockRepeatedPatternsEnabled) {
    this.blockRepeatedPatternsEnabled = blockRepeatedPatternsEnabled;
  }


  public GetVoicePortalPasscodeRuleObject blockUserNumberEnabled(Boolean blockUserNumberEnabled) {
    this.blockUserNumberEnabled = blockUserNumberEnabled;
    return this;
  }

  /**
   * If enabled, the passcode do not allow user phone number or extension.
   * @return blockUserNumberEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBlockUserNumberEnabled() {
    return blockUserNumberEnabled;
  }

  public void setBlockUserNumberEnabled(Boolean blockUserNumberEnabled) {
    this.blockUserNumberEnabled = blockUserNumberEnabled;
  }


  public GetVoicePortalPasscodeRuleObject blockReversedUserNumberEnabled(Boolean blockReversedUserNumberEnabled) {
    this.blockReversedUserNumberEnabled = blockReversedUserNumberEnabled;
    return this;
  }

  /**
   * If enabled, the passcode do not allow revered phone number or extension.
   * @return blockReversedUserNumberEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBlockReversedUserNumberEnabled() {
    return blockReversedUserNumberEnabled;
  }

  public void setBlockReversedUserNumberEnabled(Boolean blockReversedUserNumberEnabled) {
    this.blockReversedUserNumberEnabled = blockReversedUserNumberEnabled;
  }


  public GetVoicePortalPasscodeRuleObject blockReversedOldPasscodeEnabled(Boolean blockReversedOldPasscodeEnabled) {
    this.blockReversedOldPasscodeEnabled = blockReversedOldPasscodeEnabled;
    return this;
  }

  /**
   * If enabled, the passcode do not allow setting reversed old passcode.
   * @return blockReversedOldPasscodeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBlockReversedOldPasscodeEnabled() {
    return blockReversedOldPasscodeEnabled;
  }

  public void setBlockReversedOldPasscodeEnabled(Boolean blockReversedOldPasscodeEnabled) {
    this.blockReversedOldPasscodeEnabled = blockReversedOldPasscodeEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetVoicePortalPasscodeRuleObject getVoicePortalPasscodeRuleObject = (GetVoicePortalPasscodeRuleObject) o;
    return Objects.equals(this.expirePasscode, getVoicePortalPasscodeRuleObject.expirePasscode) &&
        Objects.equals(this.failedAttempts, getVoicePortalPasscodeRuleObject.failedAttempts) &&
        Objects.equals(this.blockPreviousPasscodes, getVoicePortalPasscodeRuleObject.blockPreviousPasscodes) &&
        Objects.equals(this.blockRepeatedDigits, getVoicePortalPasscodeRuleObject.blockRepeatedDigits) &&
        Objects.equals(this.blockContiguousSequences, getVoicePortalPasscodeRuleObject.blockContiguousSequences) &&
        Objects.equals(this.length, getVoicePortalPasscodeRuleObject.length) &&
        Objects.equals(this.blockRepeatedPatternsEnabled, getVoicePortalPasscodeRuleObject.blockRepeatedPatternsEnabled) &&
        Objects.equals(this.blockUserNumberEnabled, getVoicePortalPasscodeRuleObject.blockUserNumberEnabled) &&
        Objects.equals(this.blockReversedUserNumberEnabled, getVoicePortalPasscodeRuleObject.blockReversedUserNumberEnabled) &&
        Objects.equals(this.blockReversedOldPasscodeEnabled, getVoicePortalPasscodeRuleObject.blockReversedOldPasscodeEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirePasscode, failedAttempts, blockPreviousPasscodes, blockRepeatedDigits, blockContiguousSequences, length, blockRepeatedPatternsEnabled, blockUserNumberEnabled, blockReversedUserNumberEnabled, blockReversedOldPasscodeEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetVoicePortalPasscodeRuleObject {\n");
    sb.append("    expirePasscode: ").append(toIndentedString(expirePasscode)).append("\n");
    sb.append("    failedAttempts: ").append(toIndentedString(failedAttempts)).append("\n");
    sb.append("    blockPreviousPasscodes: ").append(toIndentedString(blockPreviousPasscodes)).append("\n");
    sb.append("    blockRepeatedDigits: ").append(toIndentedString(blockRepeatedDigits)).append("\n");
    sb.append("    blockContiguousSequences: ").append(toIndentedString(blockContiguousSequences)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    blockRepeatedPatternsEnabled: ").append(toIndentedString(blockRepeatedPatternsEnabled)).append("\n");
    sb.append("    blockUserNumberEnabled: ").append(toIndentedString(blockUserNumberEnabled)).append("\n");
    sb.append("    blockReversedUserNumberEnabled: ").append(toIndentedString(blockReversedUserNumberEnabled)).append("\n");
    sb.append("    blockReversedOldPasscodeEnabled: ").append(toIndentedString(blockReversedOldPasscodeEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirePasscode");
    openapiFields.add("failedAttempts");
    openapiFields.add("blockPreviousPasscodes");
    openapiFields.add("blockRepeatedDigits");
    openapiFields.add("blockContiguousSequences");
    openapiFields.add("length");
    openapiFields.add("blockRepeatedPatternsEnabled");
    openapiFields.add("blockUserNumberEnabled");
    openapiFields.add("blockReversedUserNumberEnabled");
    openapiFields.add("blockReversedOldPasscodeEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetVoicePortalPasscodeRuleObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetVoicePortalPasscodeRuleObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetVoicePortalPasscodeRuleObject is not found in the empty JSON string", GetVoicePortalPasscodeRuleObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetVoicePortalPasscodeRuleObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetVoicePortalPasscodeRuleObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `expirePasscode`
      if (jsonObj.get("expirePasscode") != null && !jsonObj.get("expirePasscode").isJsonNull()) {
        GetVoicePortalPasscodeRuleObjectExpirePasscode.validateJsonElement(jsonObj.get("expirePasscode"));
      }
      // validate the optional field `failedAttempts`
      if (jsonObj.get("failedAttempts") != null && !jsonObj.get("failedAttempts").isJsonNull()) {
        GetVoicePortalPasscodeRuleObjectFailedAttempts.validateJsonElement(jsonObj.get("failedAttempts"));
      }
      // validate the optional field `blockPreviousPasscodes`
      if (jsonObj.get("blockPreviousPasscodes") != null && !jsonObj.get("blockPreviousPasscodes").isJsonNull()) {
        GetVoicePortalPasscodeRuleObjectBlockPreviousPasscodes.validateJsonElement(jsonObj.get("blockPreviousPasscodes"));
      }
      // validate the optional field `length`
      if (jsonObj.get("length") != null && !jsonObj.get("length").isJsonNull()) {
        GetVoicePortalPasscodeRuleObjectLength.validateJsonElement(jsonObj.get("length"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetVoicePortalPasscodeRuleObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetVoicePortalPasscodeRuleObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetVoicePortalPasscodeRuleObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetVoicePortalPasscodeRuleObject.class));

       return (TypeAdapter<T>) new TypeAdapter<GetVoicePortalPasscodeRuleObject>() {
           @Override
           public void write(JsonWriter out, GetVoicePortalPasscodeRuleObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetVoicePortalPasscodeRuleObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetVoicePortalPasscodeRuleObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetVoicePortalPasscodeRuleObject
   * @throws IOException if the JSON string is invalid with respect to GetVoicePortalPasscodeRuleObject
   */
  public static GetVoicePortalPasscodeRuleObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetVoicePortalPasscodeRuleObject.class);
  }

  /**
   * Convert an instance of GetVoicePortalPasscodeRuleObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

