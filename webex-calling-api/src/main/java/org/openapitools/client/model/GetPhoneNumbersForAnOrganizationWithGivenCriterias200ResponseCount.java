// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Count of phone numbers categorized by type or their states, such as assigned or unassigned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount {
  public static final String SERIALIZED_NAME_ASSIGNED = "assigned";
  @SerializedName(SERIALIZED_NAME_ASSIGNED)
  private BigDecimal assigned;

  public static final String SERIALIZED_NAME_UN_ASSIGNED = "unAssigned";
  @SerializedName(SERIALIZED_NAME_UN_ASSIGNED)
  private BigDecimal unAssigned;

  public static final String SERIALIZED_NAME_IN_ACTIVE = "inActive";
  @SerializedName(SERIALIZED_NAME_IN_ACTIVE)
  private BigDecimal inActive;

  public static final String SERIALIZED_NAME_EXTENSION_ONLY = "extensionOnly";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ONLY)
  private BigDecimal extensionOnly;

  public static final String SERIALIZED_NAME_TOLL_FREE_NUMBERS = "tollFreeNumbers";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_NUMBERS)
  private BigDecimal tollFreeNumbers;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobileNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private BigDecimal mobileNumber;

  public static final String SERIALIZED_NAME_SERVICE_NUMBER = "serviceNumber";
  @SerializedName(SERIALIZED_NAME_SERVICE_NUMBER)
  private BigDecimal serviceNumber;

  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount() {
  }

  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount assigned(BigDecimal assigned) {
    this.assigned = assigned;
    return this;
  }

  /**
   * Count of phone numbers that are in the assigned state.
   * @return assigned
   */
  @javax.annotation.Nullable
  public BigDecimal getAssigned() {
    return assigned;
  }

  public void setAssigned(BigDecimal assigned) {
    this.assigned = assigned;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount unAssigned(BigDecimal unAssigned) {
    this.unAssigned = unAssigned;
    return this;
  }

  /**
   * Count of phone numbers which are in the un-assigned state.
   * @return unAssigned
   */
  @javax.annotation.Nullable
  public BigDecimal getUnAssigned() {
    return unAssigned;
  }

  public void setUnAssigned(BigDecimal unAssigned) {
    this.unAssigned = unAssigned;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount inActive(BigDecimal inActive) {
    this.inActive = inActive;
    return this;
  }

  /**
   * Count of phone numbers which are inactive.
   * @return inActive
   */
  @javax.annotation.Nullable
  public BigDecimal getInActive() {
    return inActive;
  }

  public void setInActive(BigDecimal inActive) {
    this.inActive = inActive;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount extensionOnly(BigDecimal extensionOnly) {
    this.extensionOnly = extensionOnly;
    return this;
  }

  /**
   * Count of extensions only without phone number.
   * @return extensionOnly
   */
  @javax.annotation.Nullable
  public BigDecimal getExtensionOnly() {
    return extensionOnly;
  }

  public void setExtensionOnly(BigDecimal extensionOnly) {
    this.extensionOnly = extensionOnly;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount tollFreeNumbers(BigDecimal tollFreeNumbers) {
    this.tollFreeNumbers = tollFreeNumbers;
    return this;
  }

  /**
   * Count of the toll free numbers.
   * @return tollFreeNumbers
   */
  @javax.annotation.Nullable
  public BigDecimal getTollFreeNumbers() {
    return tollFreeNumbers;
  }

  public void setTollFreeNumbers(BigDecimal tollFreeNumbers) {
    this.tollFreeNumbers = tollFreeNumbers;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Total phone numbers and extensions available.
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount mobileNumber(BigDecimal mobileNumber) {
    this.mobileNumber = mobileNumber;
    return this;
  }

  /**
   * Count of phone numbers of type &#x60;MOBILE_NUMBER&#x60; only without &#x60;PSTN_NUMBER&#x60; and extension.
   * @return mobileNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getMobileNumber() {
    return mobileNumber;
  }

  public void setMobileNumber(BigDecimal mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount serviceNumber(BigDecimal serviceNumber) {
    this.serviceNumber = serviceNumber;
    return this;
  }

  /**
   * Count of phone numbers with &#x60;includedTelephonyTypes&#x60; as &#x60;PSTN_NUMBER&#x60; and &#x60;isServiceNumber&#x60; value as &#x60;true&#x60;.
   * @return serviceNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getServiceNumber() {
    return serviceNumber;
  }

  public void setServiceNumber(BigDecimal serviceNumber) {
    this.serviceNumber = serviceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount = (GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount) o;
    return Objects.equals(this.assigned, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.assigned) &&
        Objects.equals(this.unAssigned, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.unAssigned) &&
        Objects.equals(this.inActive, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.inActive) &&
        Objects.equals(this.extensionOnly, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.extensionOnly) &&
        Objects.equals(this.tollFreeNumbers, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.tollFreeNumbers) &&
        Objects.equals(this.total, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.total) &&
        Objects.equals(this.mobileNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.mobileNumber) &&
        Objects.equals(this.serviceNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.serviceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigned, unAssigned, inActive, extensionOnly, tollFreeNumbers, total, mobileNumber, serviceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount {\n");
    sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
    sb.append("    unAssigned: ").append(toIndentedString(unAssigned)).append("\n");
    sb.append("    inActive: ").append(toIndentedString(inActive)).append("\n");
    sb.append("    extensionOnly: ").append(toIndentedString(extensionOnly)).append("\n");
    sb.append("    tollFreeNumbers: ").append(toIndentedString(tollFreeNumbers)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    serviceNumber: ").append(toIndentedString(serviceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigned");
    openapiFields.add("unAssigned");
    openapiFields.add("inActive");
    openapiFields.add("extensionOnly");
    openapiFields.add("tollFreeNumbers");
    openapiFields.add("total");
    openapiFields.add("mobileNumber");
    openapiFields.add("serviceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount is not found in the empty JSON string", GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount>() {
           @Override
           public void write(JsonWriter out, GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount
   * @throws IOException if the JSON string is invalid with respect to GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount
   */
  public static GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount.class);
  }

  /**
   * Convert an instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponseCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

