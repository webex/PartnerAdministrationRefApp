// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDECTNetwork
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CreateDECTNetwork {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Select a device model type depending on the number of base stations and handset lines needed in the DECT network.  The corresponding device model display name sometimes called the product name, can also be used to specify the model.
   */
  @JsonAdapter(ModelEnum.Adapter.class)
  public enum ModelEnum {
    DMS_CISCO_DBS110("DMS Cisco DBS110"),
    
    CISCO_DECT_110_BASE("Cisco DECT 110 Base"),
    
    DMS_CISCO_DBS210("DMS Cisco DBS210"),
    
    CISCO_DECT_210_BASE("Cisco DECT 210 Base");

    private String value;

    ModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelEnum fromValue(String value) {
      for (ModelEnum b : ModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelEnum model;

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_CODE_ENABLED = "defaultAccessCodeEnabled";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_CODE_ENABLED)
  private Boolean defaultAccessCodeEnabled;

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_CODE = "defaultAccessCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_CODE)
  private String defaultAccessCode;

  public CreateDECTNetwork() {
  }

  public CreateDECTNetwork name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the DECT network. Min and max length supported for the DECT network name are 1 and 40 respectively.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateDECTNetwork displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Add a default name (11 characters max) to display for all handsets. If left blank, the default name will be an indexed number followed by the DECT network name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateDECTNetwork model(ModelEnum model) {
    this.model = model;
    return this;
  }

  /**
   * Select a device model type depending on the number of base stations and handset lines needed in the DECT network.  The corresponding device model display name sometimes called the product name, can also be used to specify the model.
   * @return model
   */
  @javax.annotation.Nonnull
  public ModelEnum getModel() {
    return model;
  }

  public void setModel(ModelEnum model) {
    this.model = model;
  }


  public CreateDECTNetwork defaultAccessCodeEnabled(Boolean defaultAccessCodeEnabled) {
    this.defaultAccessCodeEnabled = defaultAccessCodeEnabled;
    return this;
  }

  /**
   * If set to true, need to provide a default access code that will be shared for all users in this network to pair their lines to the next available handset. Otherwise, each user will get a unique 4-digit access code that will be auto-generated. Note: There is currently no public API to retrieve the auto generated access codes for handsets. Use Control Hub instead.
   * @return defaultAccessCodeEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getDefaultAccessCodeEnabled() {
    return defaultAccessCodeEnabled;
  }

  public void setDefaultAccessCodeEnabled(Boolean defaultAccessCodeEnabled) {
    this.defaultAccessCodeEnabled = defaultAccessCodeEnabled;
  }


  public CreateDECTNetwork defaultAccessCode(String defaultAccessCode) {
    this.defaultAccessCode = defaultAccessCode;
    return this;
  }

  /**
   * If &#x60;defaultAccessCodeEnabled&#x60; is set to true, then provide a default access code that needs to be a 4-numeric digit. The access code should be unique to the DECT network for the location.
   * @return defaultAccessCode
   */
  @javax.annotation.Nonnull
  public String getDefaultAccessCode() {
    return defaultAccessCode;
  }

  public void setDefaultAccessCode(String defaultAccessCode) {
    this.defaultAccessCode = defaultAccessCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDECTNetwork createDECTNetwork = (CreateDECTNetwork) o;
    return Objects.equals(this.name, createDECTNetwork.name) &&
        Objects.equals(this.displayName, createDECTNetwork.displayName) &&
        Objects.equals(this.model, createDECTNetwork.model) &&
        Objects.equals(this.defaultAccessCodeEnabled, createDECTNetwork.defaultAccessCodeEnabled) &&
        Objects.equals(this.defaultAccessCode, createDECTNetwork.defaultAccessCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, model, defaultAccessCodeEnabled, defaultAccessCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDECTNetwork {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    defaultAccessCodeEnabled: ").append(toIndentedString(defaultAccessCodeEnabled)).append("\n");
    sb.append("    defaultAccessCode: ").append(toIndentedString(defaultAccessCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("model");
    openapiFields.add("defaultAccessCodeEnabled");
    openapiFields.add("defaultAccessCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("defaultAccessCodeEnabled");
    openapiRequiredFields.add("defaultAccessCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDECTNetwork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDECTNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDECTNetwork is not found in the empty JSON string", CreateDECTNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDECTNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDECTNetwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDECTNetwork.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // validate the required field `model`
      ModelEnum.validateJsonElement(jsonObj.get("model"));
      if (!jsonObj.get("defaultAccessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAccessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAccessCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDECTNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDECTNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDECTNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDECTNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDECTNetwork>() {
           @Override
           public void write(JsonWriter out, CreateDECTNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDECTNetwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDECTNetwork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDECTNetwork
   * @throws IOException if the JSON string is invalid with respect to CreateDECTNetwork
   */
  public static CreateDECTNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDECTNetwork.class);
  }

  /**
   * Convert an instance of CreateDECTNetwork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

