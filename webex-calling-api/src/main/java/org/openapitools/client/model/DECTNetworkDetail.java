// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.BaseStationType;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DECTNetworkDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class DECTNetworkDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chainId";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private BigDecimal chainId;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private BaseStationType model;

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_CODE_ENABLED = "defaultAccessCodeEnabled";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_CODE_ENABLED)
  private Boolean defaultAccessCodeEnabled;

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_CODE = "defaultAccessCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_CODE)
  private String defaultAccessCode;

  public static final String SERIALIZED_NAME_NUMBER_OF_BASE_STATIONS = "numberOfBaseStations";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BASE_STATIONS)
  private BigDecimal numberOfBaseStations;

  public static final String SERIALIZED_NAME_NUMBER_OF_HANDSETS_ASSIGNED = "numberOfHandsetsAssigned";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_HANDSETS_ASSIGNED)
  private BigDecimal numberOfHandsetsAssigned;

  public static final String SERIALIZED_NAME_NUMBER_OF_LINES = "numberOfLines";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LINES)
  private BigDecimal numberOfLines;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public DECTNetworkDetail() {
  }

  public DECTNetworkDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the DECT network.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DECTNetworkDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the DECT network. This should be unique across the location.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DECTNetworkDetail displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * DECT network name displayed on the handset.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DECTNetworkDetail chainId(BigDecimal chainId) {
    this.chainId = chainId;
    return this;
  }

  /**
   * Chain ID of the DECT network.
   * @return chainId
   */
  @javax.annotation.Nonnull
  public BigDecimal getChainId() {
    return chainId;
  }

  public void setChainId(BigDecimal chainId) {
    this.chainId = chainId;
  }


  public DECTNetworkDetail model(BaseStationType model) {
    this.model = model;
    return this;
  }

  /**
   * Base station model deployed in the DECT network.
   * @return model
   */
  @javax.annotation.Nonnull
  public BaseStationType getModel() {
    return model;
  }

  public void setModel(BaseStationType model) {
    this.model = model;
  }


  public DECTNetworkDetail defaultAccessCodeEnabled(Boolean defaultAccessCodeEnabled) {
    this.defaultAccessCodeEnabled = defaultAccessCodeEnabled;
    return this;
  }

  /**
   * Default access code is enabled. If true, the default access code is mandatory. If false, auto-generated access code is used.
   * @return defaultAccessCodeEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getDefaultAccessCodeEnabled() {
    return defaultAccessCodeEnabled;
  }

  public void setDefaultAccessCodeEnabled(Boolean defaultAccessCodeEnabled) {
    this.defaultAccessCodeEnabled = defaultAccessCodeEnabled;
  }


  public DECTNetworkDetail defaultAccessCode(String defaultAccessCode) {
    this.defaultAccessCode = defaultAccessCode;
    return this;
  }

  /**
   * Default access code for the DECT network. The default access code should be unique within the same location to avoid the handset accidentally registering with base stations from different DECT networks in range. This is mandatory when &#x60;defaultAccessCodeEnabled&#x60; is true.
   * @return defaultAccessCode
   */
  @javax.annotation.Nonnull
  public String getDefaultAccessCode() {
    return defaultAccessCode;
  }

  public void setDefaultAccessCode(String defaultAccessCode) {
    this.defaultAccessCode = defaultAccessCode;
  }


  public DECTNetworkDetail numberOfBaseStations(BigDecimal numberOfBaseStations) {
    this.numberOfBaseStations = numberOfBaseStations;
    return this;
  }

  /**
   * Number of base stations in the DECT network.
   * @return numberOfBaseStations
   */
  @javax.annotation.Nonnull
  public BigDecimal getNumberOfBaseStations() {
    return numberOfBaseStations;
  }

  public void setNumberOfBaseStations(BigDecimal numberOfBaseStations) {
    this.numberOfBaseStations = numberOfBaseStations;
  }


  public DECTNetworkDetail numberOfHandsetsAssigned(BigDecimal numberOfHandsetsAssigned) {
    this.numberOfHandsetsAssigned = numberOfHandsetsAssigned;
    return this;
  }

  /**
   * Number of handsets assigned to the DECT network.
   * @return numberOfHandsetsAssigned
   */
  @javax.annotation.Nonnull
  public BigDecimal getNumberOfHandsetsAssigned() {
    return numberOfHandsetsAssigned;
  }

  public void setNumberOfHandsetsAssigned(BigDecimal numberOfHandsetsAssigned) {
    this.numberOfHandsetsAssigned = numberOfHandsetsAssigned;
  }


  public DECTNetworkDetail numberOfLines(BigDecimal numberOfLines) {
    this.numberOfLines = numberOfLines;
    return this;
  }

  /**
   * Number of lines in the DECT network.
   * @return numberOfLines
   */
  @javax.annotation.Nonnull
  public BigDecimal getNumberOfLines() {
    return numberOfLines;
  }

  public void setNumberOfLines(BigDecimal numberOfLines) {
    this.numberOfLines = numberOfLines;
  }


  public DECTNetworkDetail location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DECTNetworkDetail deCTNetworkDetail = (DECTNetworkDetail) o;
    return Objects.equals(this.id, deCTNetworkDetail.id) &&
        Objects.equals(this.name, deCTNetworkDetail.name) &&
        Objects.equals(this.displayName, deCTNetworkDetail.displayName) &&
        Objects.equals(this.chainId, deCTNetworkDetail.chainId) &&
        Objects.equals(this.model, deCTNetworkDetail.model) &&
        Objects.equals(this.defaultAccessCodeEnabled, deCTNetworkDetail.defaultAccessCodeEnabled) &&
        Objects.equals(this.defaultAccessCode, deCTNetworkDetail.defaultAccessCode) &&
        Objects.equals(this.numberOfBaseStations, deCTNetworkDetail.numberOfBaseStations) &&
        Objects.equals(this.numberOfHandsetsAssigned, deCTNetworkDetail.numberOfHandsetsAssigned) &&
        Objects.equals(this.numberOfLines, deCTNetworkDetail.numberOfLines) &&
        Objects.equals(this.location, deCTNetworkDetail.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, displayName, chainId, model, defaultAccessCodeEnabled, defaultAccessCode, numberOfBaseStations, numberOfHandsetsAssigned, numberOfLines, location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DECTNetworkDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    defaultAccessCodeEnabled: ").append(toIndentedString(defaultAccessCodeEnabled)).append("\n");
    sb.append("    defaultAccessCode: ").append(toIndentedString(defaultAccessCode)).append("\n");
    sb.append("    numberOfBaseStations: ").append(toIndentedString(numberOfBaseStations)).append("\n");
    sb.append("    numberOfHandsetsAssigned: ").append(toIndentedString(numberOfHandsetsAssigned)).append("\n");
    sb.append("    numberOfLines: ").append(toIndentedString(numberOfLines)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("chainId");
    openapiFields.add("model");
    openapiFields.add("defaultAccessCodeEnabled");
    openapiFields.add("defaultAccessCode");
    openapiFields.add("numberOfBaseStations");
    openapiFields.add("numberOfHandsetsAssigned");
    openapiFields.add("numberOfLines");
    openapiFields.add("location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("chainId");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("defaultAccessCodeEnabled");
    openapiRequiredFields.add("defaultAccessCode");
    openapiRequiredFields.add("numberOfBaseStations");
    openapiRequiredFields.add("numberOfHandsetsAssigned");
    openapiRequiredFields.add("numberOfLines");
    openapiRequiredFields.add("location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DECTNetworkDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DECTNetworkDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DECTNetworkDetail is not found in the empty JSON string", DECTNetworkDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DECTNetworkDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DECTNetworkDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DECTNetworkDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the required field `model`
      BaseStationType.validateJsonElement(jsonObj.get("model"));
      if (!jsonObj.get("defaultAccessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAccessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAccessCode").toString()));
      }
      // validate the required field `location`
      Location.validateJsonElement(jsonObj.get("location"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DECTNetworkDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DECTNetworkDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DECTNetworkDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DECTNetworkDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DECTNetworkDetail>() {
           @Override
           public void write(JsonWriter out, DECTNetworkDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DECTNetworkDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DECTNetworkDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DECTNetworkDetail
   * @throws IOException if the JSON string is invalid with respect to DECTNetworkDetail
   */
  public static DECTNetworkDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DECTNetworkDetail.class);
  }

  /**
   * Convert an instance of DECTNetworkDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

