// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReadPushToTalkSettingsForAWorkspace200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ReadPushToTalkSettingsForAWorkspace200Response {
  public static final String SERIALIZED_NAME_ALLOW_AUTO_ANSWER = "allowAutoAnswer";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_ANSWER)
  private Boolean allowAutoAnswer;

  /**
   * Specifies the connection type to be used.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    ONE_WAY("ONE_WAY"),
    
    TWO_WAY("TWO_WAY");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  /**
   * Specifies the access type to be applied when evaluating the member list.
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    ALLOW_MEMBERS("ALLOW_MEMBERS"),
    
    BLOCK_MEMBERS("BLOCK_MEMBERS");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTypeEnum fromValue(String value) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "accessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypeEnum accessType;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner> members = new ArrayList<>();

  public ReadPushToTalkSettingsForAWorkspace200Response() {
  }

  public ReadPushToTalkSettingsForAWorkspace200Response allowAutoAnswer(Boolean allowAutoAnswer) {
    this.allowAutoAnswer = allowAutoAnswer;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; to enable the Push-to-Talk feature.  When enabled, a workspace receives a Push-to-Talk call and answers the call automatically.
   * @return allowAutoAnswer
   */
  @javax.annotation.Nonnull
  public Boolean getAllowAutoAnswer() {
    return allowAutoAnswer;
  }

  public void setAllowAutoAnswer(Boolean allowAutoAnswer) {
    this.allowAutoAnswer = allowAutoAnswer;
  }


  public ReadPushToTalkSettingsForAWorkspace200Response connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Specifies the connection type to be used.
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public ReadPushToTalkSettingsForAWorkspace200Response accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Specifies the access type to be applied when evaluating the member list.
   * @return accessType
   */
  @javax.annotation.Nonnull
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }


  public ReadPushToTalkSettingsForAWorkspace200Response members(List<GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner> members) {
    this.members = members;
    return this;
  }

  public ReadPushToTalkSettingsForAWorkspace200Response addMembersItem(GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * List of people/workspaces that are allowed or disallowed to interact using the Push-to-Talk feature.
   * @return members
   */
  @javax.annotation.Nullable
  public List<GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner> getMembers() {
    return members;
  }

  public void setMembers(List<GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner> members) {
    this.members = members;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadPushToTalkSettingsForAWorkspace200Response readPushToTalkSettingsForAWorkspace200Response = (ReadPushToTalkSettingsForAWorkspace200Response) o;
    return Objects.equals(this.allowAutoAnswer, readPushToTalkSettingsForAWorkspace200Response.allowAutoAnswer) &&
        Objects.equals(this.connectionType, readPushToTalkSettingsForAWorkspace200Response.connectionType) &&
        Objects.equals(this.accessType, readPushToTalkSettingsForAWorkspace200Response.accessType) &&
        Objects.equals(this.members, readPushToTalkSettingsForAWorkspace200Response.members);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAutoAnswer, connectionType, accessType, members);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadPushToTalkSettingsForAWorkspace200Response {\n");
    sb.append("    allowAutoAnswer: ").append(toIndentedString(allowAutoAnswer)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowAutoAnswer");
    openapiFields.add("connectionType");
    openapiFields.add("accessType");
    openapiFields.add("members");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowAutoAnswer");
    openapiRequiredFields.add("connectionType");
    openapiRequiredFields.add("accessType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadPushToTalkSettingsForAWorkspace200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadPushToTalkSettingsForAWorkspace200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadPushToTalkSettingsForAWorkspace200Response is not found in the empty JSON string", ReadPushToTalkSettingsForAWorkspace200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadPushToTalkSettingsForAWorkspace200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadPushToTalkSettingsForAWorkspace200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadPushToTalkSettingsForAWorkspace200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the required field `connectionType`
      ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      if (!jsonObj.get("accessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessType").toString()));
      }
      // validate the required field `accessType`
      AccessTypeEnum.validateJsonElement(jsonObj.get("accessType"));
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            GetAPersonSPrivacySettings200ResponseMonitoringAgentsInner.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadPushToTalkSettingsForAWorkspace200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadPushToTalkSettingsForAWorkspace200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadPushToTalkSettingsForAWorkspace200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadPushToTalkSettingsForAWorkspace200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadPushToTalkSettingsForAWorkspace200Response>() {
           @Override
           public void write(JsonWriter out, ReadPushToTalkSettingsForAWorkspace200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadPushToTalkSettingsForAWorkspace200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadPushToTalkSettingsForAWorkspace200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadPushToTalkSettingsForAWorkspace200Response
   * @throws IOException if the JSON string is invalid with respect to ReadPushToTalkSettingsForAWorkspace200Response
   */
  public static ReadPushToTalkSettingsForAWorkspace200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadPushToTalkSettingsForAWorkspace200Response.class);
  }

  /**
   * Convert an instance of ReadPushToTalkSettingsForAWorkspace200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

