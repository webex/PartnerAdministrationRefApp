// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAPerson200ResponsePhoneNumbersInner;
import org.openapitools.client.model.CreateAPerson200ResponseSipAddressesInner;
import org.openapitools.client.model.CreateAPersonRequestAddressesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAPerson200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CreateAPerson200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Object> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<CreateAPerson200ResponsePhoneNumbersInner> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Object> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<Object> licenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private String manager;

  public static final String SERIALIZED_NAME_MANAGER_ID = "managerId";
  @SerializedName(SERIALIZED_NAME_MANAGER_ID)
  private String managerId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<CreateAPersonRequestAddressesInner> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY = "lastActivity";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY)
  private String lastActivity;

  public static final String SERIALIZED_NAME_SITE_URLS = "siteUrls";
  @SerializedName(SERIALIZED_NAME_SITE_URLS)
  private List<Object> siteUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIP_ADDRESSES = "sipAddresses";
  @SerializedName(SERIALIZED_NAME_SIP_ADDRESSES)
  private List<CreateAPerson200ResponseSipAddressesInner> sipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_XMPP_FEDERATION_JID = "xmppFederationJid";
  @SerializedName(SERIALIZED_NAME_XMPP_FEDERATION_JID)
  private String xmppFederationJid;

  /**
   * The current presence status of the person. This will only be returned for people within your organization or an organization you manage. Presence information will not be shown if the authenticated user has [disabled status sharing](https://help.webex.com/nkzs6wl/). Presence status is different from Control Hub&#39;s \&quot;Last Service Access Time\&quot; which indicates the last time an oAuth token was issued for this user.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    CALL("call"),
    
    DO_NOT_DISTURB("DoNotDisturb"),
    
    INACTIVE("inactive"),
    
    MEETING("meeting"),
    
    OUT_OF_OFFICE("OutOfOffice"),
    
    PENDING("pending"),
    
    PRESENTING("presenting"),
    
    UNKNOWN("unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Whether or not an invite is pending for the user to complete account activation. This property is only returned if the authenticated user is an admin user for the person&#39;s organization.
   */
  @JsonAdapter(InvitePendingEnum.Adapter.class)
  public enum InvitePendingEnum {
    TRUE(true),
    
    FALSE(false);

    private boolean value;

    InvitePendingEnum(boolean value) {
      this.value = value;
    }

    public boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvitePendingEnum fromValue(boolean value) {
      for (InvitePendingEnum b : InvitePendingEnum.values()) {
        if (b.value == value) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvitePendingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvitePendingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvitePendingEnum read(final JsonReader jsonReader) throws IOException {
        boolean value = jsonReader.nextBoolean();
        return InvitePendingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvitePendingEnum.fromValue(Boolean.parseBoolean(value));
    }
  }

  public static final String SERIALIZED_NAME_INVITE_PENDING = "invitePending";
  @SerializedName(SERIALIZED_NAME_INVITE_PENDING)
  private InvitePendingEnum invitePending;

  /**
   * Whether or not the user is allowed to use Webex. This property is only returned if the authenticated user is an admin user for the person&#39;s organization.
   */
  @JsonAdapter(LoginEnabledEnum.Adapter.class)
  public enum LoginEnabledEnum {
    TRUE(true),
    
    FALSE(false);

    private boolean value;

    LoginEnabledEnum(boolean value) {
      this.value = value;
    }

    public boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoginEnabledEnum fromValue(boolean value) {
      for (LoginEnabledEnum b : LoginEnabledEnum.values()) {
        if (b.value == value) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoginEnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoginEnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoginEnabledEnum read(final JsonReader jsonReader) throws IOException {
        boolean value = jsonReader.nextBoolean();
        return LoginEnabledEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoginEnabledEnum.fromValue(Boolean.parseBoolean(value));
    }
  }

  public static final String SERIALIZED_NAME_LOGIN_ENABLED = "loginEnabled";
  @SerializedName(SERIALIZED_NAME_LOGIN_ENABLED)
  private LoginEnabledEnum loginEnabled;

  /**
   * The type of person account, such as person or bot.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PERSON("person"),
    
    BOT("bot"),
    
    APPUSER("appuser");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateAPerson200Response() {
  }

  public CreateAPerson200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the person.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateAPerson200Response emails(List<Object> emails) {
    this.emails = emails;
    return this;
  }

  public CreateAPerson200Response addEmailsItem(Object emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * The email addresses of the person.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<Object> getEmails() {
    return emails;
  }

  public void setEmails(List<Object> emails) {
    this.emails = emails;
  }


  public CreateAPerson200Response phoneNumbers(List<CreateAPerson200ResponsePhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public CreateAPerson200Response addPhoneNumbersItem(CreateAPerson200ResponsePhoneNumbersInner phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * Phone numbers for the person.
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<CreateAPerson200ResponsePhoneNumbersInner> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<CreateAPerson200ResponsePhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public CreateAPerson200Response extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * The Webex Calling extension for the person. Only applies to a person with a Webex Calling license.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public CreateAPerson200Response locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location for this person retrieved from BroadCloud.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public CreateAPerson200Response displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The full name of the person.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateAPerson200Response nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  /**
   * The nickname of the person if configured. If no nickname is configured for the person, this field will not be present.
   * @return nickName
   */
  @javax.annotation.Nullable
  public String getNickName() {
    return nickName;
  }

  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public CreateAPerson200Response firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the person.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CreateAPerson200Response lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the person.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CreateAPerson200Response avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * The URL to the person&#39;s avatar in PNG format.
   * @return avatar
   */
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public CreateAPerson200Response orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * The ID of the organization to which this person belongs.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public CreateAPerson200Response roles(List<Object> roles) {
    this.roles = roles;
    return this;
  }

  public CreateAPerson200Response addRolesItem(Object rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * An array of role strings representing the roles to which this admin user belongs.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Object> getRoles() {
    return roles;
  }

  public void setRoles(List<Object> roles) {
    this.roles = roles;
  }


  public CreateAPerson200Response licenses(List<Object> licenses) {
    this.licenses = licenses;
    return this;
  }

  public CreateAPerson200Response addLicensesItem(Object licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

  /**
   * An array of license strings allocated to this person.
   * @return licenses
   */
  @javax.annotation.Nullable
  public List<Object> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<Object> licenses) {
    this.licenses = licenses;
  }


  public CreateAPerson200Response department(String department) {
    this.department = department;
    return this;
  }

  /**
   * The business department the user belongs to.
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public CreateAPerson200Response manager(String manager) {
    this.manager = manager;
    return this;
  }

  /**
   * A manager identifier.
   * @return manager
   */
  @javax.annotation.Nullable
  public String getManager() {
    return manager;
  }

  public void setManager(String manager) {
    this.manager = manager;
  }


  public CreateAPerson200Response managerId(String managerId) {
    this.managerId = managerId;
    return this;
  }

  /**
   * Person ID of the manager.
   * @return managerId
   */
  @javax.annotation.Nullable
  public String getManagerId() {
    return managerId;
  }

  public void setManagerId(String managerId) {
    this.managerId = managerId;
  }


  public CreateAPerson200Response title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The person&#39;s title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateAPerson200Response addresses(List<CreateAPersonRequestAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public CreateAPerson200Response addAddressesItem(CreateAPersonRequestAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * A person&#39;s addresses.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<CreateAPersonRequestAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<CreateAPersonRequestAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public CreateAPerson200Response created(String created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time the person was created.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public CreateAPerson200Response lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date and time the person was last changed.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public CreateAPerson200Response timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The time zone of the person if configured. If no timezone is configured on the account, this field will not be present.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public CreateAPerson200Response lastActivity(String lastActivity) {
    this.lastActivity = lastActivity;
    return this;
  }

  /**
   * The date and time of the person&#39;s last activity within Webex. This will only be returned for people within your organization or an organization you manage. Presence information will not be shown if the authenticated user has [disabled status sharing](https://help.webex.com/nkzs6wl/).
   * @return lastActivity
   */
  @javax.annotation.Nullable
  public String getLastActivity() {
    return lastActivity;
  }

  public void setLastActivity(String lastActivity) {
    this.lastActivity = lastActivity;
  }


  public CreateAPerson200Response siteUrls(List<Object> siteUrls) {
    this.siteUrls = siteUrls;
    return this;
  }

  public CreateAPerson200Response addSiteUrlsItem(Object siteUrlsItem) {
    if (this.siteUrls == null) {
      this.siteUrls = new ArrayList<>();
    }
    this.siteUrls.add(siteUrlsItem);
    return this;
  }

  /**
   * One or several site names where this user has a role (host or attendee).
   * @return siteUrls
   */
  @javax.annotation.Nullable
  public List<Object> getSiteUrls() {
    return siteUrls;
  }

  public void setSiteUrls(List<Object> siteUrls) {
    this.siteUrls = siteUrls;
  }


  public CreateAPerson200Response sipAddresses(List<CreateAPerson200ResponseSipAddressesInner> sipAddresses) {
    this.sipAddresses = sipAddresses;
    return this;
  }

  public CreateAPerson200Response addSipAddressesItem(CreateAPerson200ResponseSipAddressesInner sipAddressesItem) {
    if (this.sipAddresses == null) {
      this.sipAddresses = new ArrayList<>();
    }
    this.sipAddresses.add(sipAddressesItem);
    return this;
  }

  /**
   * The user&#39;s SIP addresses. Read-only.
   * @return sipAddresses
   */
  @javax.annotation.Nullable
  public List<CreateAPerson200ResponseSipAddressesInner> getSipAddresses() {
    return sipAddresses;
  }

  public void setSipAddresses(List<CreateAPerson200ResponseSipAddressesInner> sipAddresses) {
    this.sipAddresses = sipAddresses;
  }


  public CreateAPerson200Response xmppFederationJid(String xmppFederationJid) {
    this.xmppFederationJid = xmppFederationJid;
    return this;
  }

  /**
   * Identifier for intra-domain federation with other XMPP based messenger systems.
   * @return xmppFederationJid
   */
  @javax.annotation.Nullable
  public String getXmppFederationJid() {
    return xmppFederationJid;
  }

  public void setXmppFederationJid(String xmppFederationJid) {
    this.xmppFederationJid = xmppFederationJid;
  }


  public CreateAPerson200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current presence status of the person. This will only be returned for people within your organization or an organization you manage. Presence information will not be shown if the authenticated user has [disabled status sharing](https://help.webex.com/nkzs6wl/). Presence status is different from Control Hub&#39;s \&quot;Last Service Access Time\&quot; which indicates the last time an oAuth token was issued for this user.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CreateAPerson200Response invitePending(InvitePendingEnum invitePending) {
    this.invitePending = invitePending;
    return this;
  }

  /**
   * Whether or not an invite is pending for the user to complete account activation. This property is only returned if the authenticated user is an admin user for the person&#39;s organization.
   * @return invitePending
   */
  @javax.annotation.Nullable
  public InvitePendingEnum getInvitePending() {
    return invitePending;
  }

  public void setInvitePending(InvitePendingEnum invitePending) {
    this.invitePending = invitePending;
  }


  public CreateAPerson200Response loginEnabled(LoginEnabledEnum loginEnabled) {
    this.loginEnabled = loginEnabled;
    return this;
  }

  /**
   * Whether or not the user is allowed to use Webex. This property is only returned if the authenticated user is an admin user for the person&#39;s organization.
   * @return loginEnabled
   */
  @javax.annotation.Nullable
  public LoginEnabledEnum getLoginEnabled() {
    return loginEnabled;
  }

  public void setLoginEnabled(LoginEnabledEnum loginEnabled) {
    this.loginEnabled = loginEnabled;
  }


  public CreateAPerson200Response type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of person account, such as person or bot.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAPerson200Response createAPerson200Response = (CreateAPerson200Response) o;
    return Objects.equals(this.id, createAPerson200Response.id) &&
        Objects.equals(this.emails, createAPerson200Response.emails) &&
        Objects.equals(this.phoneNumbers, createAPerson200Response.phoneNumbers) &&
        Objects.equals(this.extension, createAPerson200Response.extension) &&
        Objects.equals(this.locationId, createAPerson200Response.locationId) &&
        Objects.equals(this.displayName, createAPerson200Response.displayName) &&
        Objects.equals(this.nickName, createAPerson200Response.nickName) &&
        Objects.equals(this.firstName, createAPerson200Response.firstName) &&
        Objects.equals(this.lastName, createAPerson200Response.lastName) &&
        Objects.equals(this.avatar, createAPerson200Response.avatar) &&
        Objects.equals(this.orgId, createAPerson200Response.orgId) &&
        Objects.equals(this.roles, createAPerson200Response.roles) &&
        Objects.equals(this.licenses, createAPerson200Response.licenses) &&
        Objects.equals(this.department, createAPerson200Response.department) &&
        Objects.equals(this.manager, createAPerson200Response.manager) &&
        Objects.equals(this.managerId, createAPerson200Response.managerId) &&
        Objects.equals(this.title, createAPerson200Response.title) &&
        Objects.equals(this.addresses, createAPerson200Response.addresses) &&
        Objects.equals(this.created, createAPerson200Response.created) &&
        Objects.equals(this.lastModified, createAPerson200Response.lastModified) &&
        Objects.equals(this.timezone, createAPerson200Response.timezone) &&
        Objects.equals(this.lastActivity, createAPerson200Response.lastActivity) &&
        Objects.equals(this.siteUrls, createAPerson200Response.siteUrls) &&
        Objects.equals(this.sipAddresses, createAPerson200Response.sipAddresses) &&
        Objects.equals(this.xmppFederationJid, createAPerson200Response.xmppFederationJid) &&
        Objects.equals(this.status, createAPerson200Response.status) &&
        Objects.equals(this.invitePending, createAPerson200Response.invitePending) &&
        Objects.equals(this.loginEnabled, createAPerson200Response.loginEnabled) &&
        Objects.equals(this.type, createAPerson200Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, emails, phoneNumbers, extension, locationId, displayName, nickName, firstName, lastName, avatar, orgId, roles, licenses, department, manager, managerId, title, addresses, created, lastModified, timezone, lastActivity, siteUrls, sipAddresses, xmppFederationJid, status, invitePending, loginEnabled, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAPerson200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    managerId: ").append(toIndentedString(managerId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    lastActivity: ").append(toIndentedString(lastActivity)).append("\n");
    sb.append("    siteUrls: ").append(toIndentedString(siteUrls)).append("\n");
    sb.append("    sipAddresses: ").append(toIndentedString(sipAddresses)).append("\n");
    sb.append("    xmppFederationJid: ").append(toIndentedString(xmppFederationJid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    invitePending: ").append(toIndentedString(invitePending)).append("\n");
    sb.append("    loginEnabled: ").append(toIndentedString(loginEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("emails");
    openapiFields.add("phoneNumbers");
    openapiFields.add("extension");
    openapiFields.add("locationId");
    openapiFields.add("displayName");
    openapiFields.add("nickName");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("avatar");
    openapiFields.add("orgId");
    openapiFields.add("roles");
    openapiFields.add("licenses");
    openapiFields.add("department");
    openapiFields.add("manager");
    openapiFields.add("managerId");
    openapiFields.add("title");
    openapiFields.add("addresses");
    openapiFields.add("created");
    openapiFields.add("lastModified");
    openapiFields.add("timezone");
    openapiFields.add("lastActivity");
    openapiFields.add("siteUrls");
    openapiFields.add("sipAddresses");
    openapiFields.add("xmppFederationJid");
    openapiFields.add("status");
    openapiFields.add("invitePending");
    openapiFields.add("loginEnabled");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAPerson200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAPerson200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAPerson200Response is not found in the empty JSON string", CreateAPerson200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAPerson200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAPerson200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            CreateAPerson200ResponsePhoneNumbersInner.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull() && !jsonObj.get("licenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) && !jsonObj.get("manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      if ((jsonObj.get("managerId") != null && !jsonObj.get("managerId").isJsonNull()) && !jsonObj.get("managerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managerId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            CreateAPersonRequestAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) && !jsonObj.get("lastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModified").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("lastActivity") != null && !jsonObj.get("lastActivity").isJsonNull()) && !jsonObj.get("lastActivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastActivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastActivity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteUrls") != null && !jsonObj.get("siteUrls").isJsonNull() && !jsonObj.get("siteUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteUrls` to be an array in the JSON string but got `%s`", jsonObj.get("siteUrls").toString()));
      }
      if (jsonObj.get("sipAddresses") != null && !jsonObj.get("sipAddresses").isJsonNull()) {
        JsonArray jsonArraysipAddresses = jsonObj.getAsJsonArray("sipAddresses");
        if (jsonArraysipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sipAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("sipAddresses").toString()));
          }

          // validate the optional field `sipAddresses` (array)
          for (int i = 0; i < jsonArraysipAddresses.size(); i++) {
            CreateAPerson200ResponseSipAddressesInner.validateJsonElement(jsonArraysipAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("xmppFederationJid") != null && !jsonObj.get("xmppFederationJid").isJsonNull()) && !jsonObj.get("xmppFederationJid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xmppFederationJid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xmppFederationJid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("invitePending") != null && !jsonObj.get("invitePending").isJsonNull()) && !jsonObj.get("invitePending").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitePending` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitePending").toString()));
      }
      // validate the optional field `invitePending`
      if (jsonObj.get("invitePending") != null && !jsonObj.get("invitePending").isJsonNull()) {
        InvitePendingEnum.validateJsonElement(jsonObj.get("invitePending"));
      }
      if ((jsonObj.get("loginEnabled") != null && !jsonObj.get("loginEnabled").isJsonNull()) && !jsonObj.get("loginEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginEnabled").toString()));
      }
      // validate the optional field `loginEnabled`
      if (jsonObj.get("loginEnabled") != null && !jsonObj.get("loginEnabled").isJsonNull()) {
        LoginEnabledEnum.validateJsonElement(jsonObj.get("loginEnabled"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAPerson200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAPerson200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAPerson200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAPerson200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAPerson200Response>() {
           @Override
           public void write(JsonWriter out, CreateAPerson200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAPerson200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAPerson200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAPerson200Response
   * @throws IOException if the JSON string is invalid with respect to CreateAPerson200Response
   */
  public static CreateAPerson200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAPerson200Response.class);
  }

  /**
   * Convert an instance of CreateAPerson200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

