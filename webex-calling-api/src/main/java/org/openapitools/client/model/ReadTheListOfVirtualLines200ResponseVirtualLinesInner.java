// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation;
import org.openapitools.client.model.ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReadTheListOfVirtualLines200ResponseVirtualLinesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ReadTheListOfVirtualLines200ResponseVirtualLinesInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_CALLER_ID_LAST_NAME = "callerIdLastName";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_LAST_NAME)
  private String callerIdLastName;

  public static final String SERIALIZED_NAME_CALLER_ID_FIRST_NAME = "callerIdFirstName";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_FIRST_NAME)
  private String callerIdFirstName;

  public static final String SERIALIZED_NAME_CALLER_ID_NUMBER = "callerIdNumber";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_NUMBER)
  private String callerIdNumber;

  /**
   * &#x60;externalCallerIdNamePolicy&#x60; for the virtual line.
   */
  @JsonAdapter(ExternalCallerIdNamePolicyEnum.Adapter.class)
  public enum ExternalCallerIdNamePolicyEnum {
    DIRECT_LINE("DIRECT_LINE"),
    
    LOCATION("LOCATION"),
    
    OTHER("OTHER");

    private String value;

    ExternalCallerIdNamePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalCallerIdNamePolicyEnum fromValue(String value) {
      for (ExternalCallerIdNamePolicyEnum b : ExternalCallerIdNamePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalCallerIdNamePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalCallerIdNamePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalCallerIdNamePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalCallerIdNamePolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalCallerIdNamePolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_CALLER_ID_NAME_POLICY = "externalCallerIdNamePolicy";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CALLER_ID_NAME_POLICY)
  private ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy;

  public static final String SERIALIZED_NAME_CUSTOM_EXTERNAL_CALLER_ID_NAME = "customExternalCallerIdName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EXTERNAL_CALLER_ID_NAME)
  private String customExternalCallerIdName;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber number;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation location;

  public static final String SERIALIZED_NAME_NUMBER_OF_DEVICES_ASSIGNED = "numberOfDevicesAssigned";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DEVICES_ASSIGNED)
  private BigDecimal numberOfDevicesAssigned;

  public static final String SERIALIZED_NAME_BILLING_PLAN = "billingPlan";
  @SerializedName(SERIALIZED_NAME_BILLING_PLAN)
  private String billingPlan;

  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner() {
  }

  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the virtual line.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name for virtual line.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name for virtual line.
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner callerIdLastName(String callerIdLastName) {
    this.callerIdLastName = callerIdLastName;
    return this;
  }

  /**
   * &#x60;callerIdLastName&#x60; for virtual line.
   * @return callerIdLastName
   */
  @javax.annotation.Nullable
  public String getCallerIdLastName() {
    return callerIdLastName;
  }

  public void setCallerIdLastName(String callerIdLastName) {
    this.callerIdLastName = callerIdLastName;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner callerIdFirstName(String callerIdFirstName) {
    this.callerIdFirstName = callerIdFirstName;
    return this;
  }

  /**
   * &#x60;callerIdFirstName&#x60; for virtual line.
   * @return callerIdFirstName
   */
  @javax.annotation.Nullable
  public String getCallerIdFirstName() {
    return callerIdFirstName;
  }

  public void setCallerIdFirstName(String callerIdFirstName) {
    this.callerIdFirstName = callerIdFirstName;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner callerIdNumber(String callerIdNumber) {
    this.callerIdNumber = callerIdNumber;
    return this;
  }

  /**
   * &#x60;callerIdNumber&#x60; for virtual line.
   * @return callerIdNumber
   */
  @javax.annotation.Nullable
  public String getCallerIdNumber() {
    return callerIdNumber;
  }

  public void setCallerIdNumber(String callerIdNumber) {
    this.callerIdNumber = callerIdNumber;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner externalCallerIdNamePolicy(ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy) {
    this.externalCallerIdNamePolicy = externalCallerIdNamePolicy;
    return this;
  }

  /**
   * &#x60;externalCallerIdNamePolicy&#x60; for the virtual line.
   * @return externalCallerIdNamePolicy
   */
  @javax.annotation.Nonnull
  public ExternalCallerIdNamePolicyEnum getExternalCallerIdNamePolicy() {
    return externalCallerIdNamePolicy;
  }

  public void setExternalCallerIdNamePolicy(ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy) {
    this.externalCallerIdNamePolicy = externalCallerIdNamePolicy;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner customExternalCallerIdName(String customExternalCallerIdName) {
    this.customExternalCallerIdName = customExternalCallerIdName;
    return this;
  }

  /**
   * &#x60;customExternalCallerIdName&#x60; for virtual line.
   * @return customExternalCallerIdName
   */
  @javax.annotation.Nullable
  public String getCustomExternalCallerIdName() {
    return customExternalCallerIdName;
  }

  public void setCustomExternalCallerIdName(String customExternalCallerIdName) {
    this.customExternalCallerIdName = customExternalCallerIdName;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner number(ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nonnull
  public ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber getNumber() {
    return number;
  }

  public void setNumber(ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber number) {
    this.number = number;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner location(ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation getLocation() {
    return location;
  }

  public void setLocation(ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation location) {
    this.location = location;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner numberOfDevicesAssigned(BigDecimal numberOfDevicesAssigned) {
    this.numberOfDevicesAssigned = numberOfDevicesAssigned;
    return this;
  }

  /**
   * Number of devices assigned to a virtual line.
   * @return numberOfDevicesAssigned
   */
  @javax.annotation.Nonnull
  public BigDecimal getNumberOfDevicesAssigned() {
    return numberOfDevicesAssigned;
  }

  public void setNumberOfDevicesAssigned(BigDecimal numberOfDevicesAssigned) {
    this.numberOfDevicesAssigned = numberOfDevicesAssigned;
  }


  public ReadTheListOfVirtualLines200ResponseVirtualLinesInner billingPlan(String billingPlan) {
    this.billingPlan = billingPlan;
    return this;
  }

  /**
   * Type of billing plan.
   * @return billingPlan
   */
  @javax.annotation.Nullable
  public String getBillingPlan() {
    return billingPlan;
  }

  public void setBillingPlan(String billingPlan) {
    this.billingPlan = billingPlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadTheListOfVirtualLines200ResponseVirtualLinesInner readTheListOfVirtualLines200ResponseVirtualLinesInner = (ReadTheListOfVirtualLines200ResponseVirtualLinesInner) o;
    return Objects.equals(this.id, readTheListOfVirtualLines200ResponseVirtualLinesInner.id) &&
        Objects.equals(this.lastName, readTheListOfVirtualLines200ResponseVirtualLinesInner.lastName) &&
        Objects.equals(this.firstName, readTheListOfVirtualLines200ResponseVirtualLinesInner.firstName) &&
        Objects.equals(this.callerIdLastName, readTheListOfVirtualLines200ResponseVirtualLinesInner.callerIdLastName) &&
        Objects.equals(this.callerIdFirstName, readTheListOfVirtualLines200ResponseVirtualLinesInner.callerIdFirstName) &&
        Objects.equals(this.callerIdNumber, readTheListOfVirtualLines200ResponseVirtualLinesInner.callerIdNumber) &&
        Objects.equals(this.externalCallerIdNamePolicy, readTheListOfVirtualLines200ResponseVirtualLinesInner.externalCallerIdNamePolicy) &&
        Objects.equals(this.customExternalCallerIdName, readTheListOfVirtualLines200ResponseVirtualLinesInner.customExternalCallerIdName) &&
        Objects.equals(this.number, readTheListOfVirtualLines200ResponseVirtualLinesInner.number) &&
        Objects.equals(this.location, readTheListOfVirtualLines200ResponseVirtualLinesInner.location) &&
        Objects.equals(this.numberOfDevicesAssigned, readTheListOfVirtualLines200ResponseVirtualLinesInner.numberOfDevicesAssigned) &&
        Objects.equals(this.billingPlan, readTheListOfVirtualLines200ResponseVirtualLinesInner.billingPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastName, firstName, callerIdLastName, callerIdFirstName, callerIdNumber, externalCallerIdNamePolicy, customExternalCallerIdName, number, location, numberOfDevicesAssigned, billingPlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadTheListOfVirtualLines200ResponseVirtualLinesInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    callerIdLastName: ").append(toIndentedString(callerIdLastName)).append("\n");
    sb.append("    callerIdFirstName: ").append(toIndentedString(callerIdFirstName)).append("\n");
    sb.append("    callerIdNumber: ").append(toIndentedString(callerIdNumber)).append("\n");
    sb.append("    externalCallerIdNamePolicy: ").append(toIndentedString(externalCallerIdNamePolicy)).append("\n");
    sb.append("    customExternalCallerIdName: ").append(toIndentedString(customExternalCallerIdName)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    numberOfDevicesAssigned: ").append(toIndentedString(numberOfDevicesAssigned)).append("\n");
    sb.append("    billingPlan: ").append(toIndentedString(billingPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("lastName");
    openapiFields.add("firstName");
    openapiFields.add("callerIdLastName");
    openapiFields.add("callerIdFirstName");
    openapiFields.add("callerIdNumber");
    openapiFields.add("externalCallerIdNamePolicy");
    openapiFields.add("customExternalCallerIdName");
    openapiFields.add("number");
    openapiFields.add("location");
    openapiFields.add("numberOfDevicesAssigned");
    openapiFields.add("billingPlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("externalCallerIdNamePolicy");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("numberOfDevicesAssigned");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadTheListOfVirtualLines200ResponseVirtualLinesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadTheListOfVirtualLines200ResponseVirtualLinesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadTheListOfVirtualLines200ResponseVirtualLinesInner is not found in the empty JSON string", ReadTheListOfVirtualLines200ResponseVirtualLinesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadTheListOfVirtualLines200ResponseVirtualLinesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadTheListOfVirtualLines200ResponseVirtualLinesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadTheListOfVirtualLines200ResponseVirtualLinesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("callerIdLastName") != null && !jsonObj.get("callerIdLastName").isJsonNull()) && !jsonObj.get("callerIdLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdLastName").toString()));
      }
      if ((jsonObj.get("callerIdFirstName") != null && !jsonObj.get("callerIdFirstName").isJsonNull()) && !jsonObj.get("callerIdFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdFirstName").toString()));
      }
      if ((jsonObj.get("callerIdNumber") != null && !jsonObj.get("callerIdNumber").isJsonNull()) && !jsonObj.get("callerIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdNumber").toString()));
      }
      if (!jsonObj.get("externalCallerIdNamePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalCallerIdNamePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalCallerIdNamePolicy").toString()));
      }
      // validate the required field `externalCallerIdNamePolicy`
      ExternalCallerIdNamePolicyEnum.validateJsonElement(jsonObj.get("externalCallerIdNamePolicy"));
      if ((jsonObj.get("customExternalCallerIdName") != null && !jsonObj.get("customExternalCallerIdName").isJsonNull()) && !jsonObj.get("customExternalCallerIdName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customExternalCallerIdName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customExternalCallerIdName").toString()));
      }
      // validate the required field `number`
      ReadTheListOfVirtualLines200ResponseVirtualLinesInnerNumber.validateJsonElement(jsonObj.get("number"));
      // validate the required field `location`
      ReadTheListOfVirtualLines200ResponseVirtualLinesInnerLocation.validateJsonElement(jsonObj.get("location"));
      if ((jsonObj.get("billingPlan") != null && !jsonObj.get("billingPlan").isJsonNull()) && !jsonObj.get("billingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPlan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadTheListOfVirtualLines200ResponseVirtualLinesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadTheListOfVirtualLines200ResponseVirtualLinesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadTheListOfVirtualLines200ResponseVirtualLinesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadTheListOfVirtualLines200ResponseVirtualLinesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadTheListOfVirtualLines200ResponseVirtualLinesInner>() {
           @Override
           public void write(JsonWriter out, ReadTheListOfVirtualLines200ResponseVirtualLinesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadTheListOfVirtualLines200ResponseVirtualLinesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadTheListOfVirtualLines200ResponseVirtualLinesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadTheListOfVirtualLines200ResponseVirtualLinesInner
   * @throws IOException if the JSON string is invalid with respect to ReadTheListOfVirtualLines200ResponseVirtualLinesInner
   */
  public static ReadTheListOfVirtualLines200ResponseVirtualLinesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadTheListOfVirtualLines200ResponseVirtualLinesInner.class);
  }

  /**
   * Convert an instance of ReadTheListOfVirtualLines200ResponseVirtualLinesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

