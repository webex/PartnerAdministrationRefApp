// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallQueueQueueSettingsGetObject;
import org.openapitools.client.model.GetCallQueueCallPolicyObject;
import org.openapitools.client.model.GetCallQueueObjectAlternateNumberSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCallQueueObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetCallQueueObject {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_ROUTING_PREFIX = "routingPrefix";
  @SerializedName(SERIALIZED_NAME_ROUTING_PREFIX)
  private String routingPrefix;

  public static final String SERIALIZED_NAME_ESN = "esn";
  @SerializedName(SERIALIZED_NAME_ESN)
  private String esn;

  public static final String SERIALIZED_NAME_TOLL_FREE_NUMBER = "tollFreeNumber";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_NUMBER)
  private Boolean tollFreeNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_FOR_OUTGOING_CALLS_ENABLED = "phoneNumberForOutgoingCallsEnabled";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_FOR_OUTGOING_CALLS_ENABLED)
  private Boolean phoneNumberForOutgoingCallsEnabled;

  /**
   * Which type of Calling Line ID Policy Selected for Call Queue.
   */
  @JsonAdapter(CallingLineIdPolicyEnum.Adapter.class)
  public enum CallingLineIdPolicyEnum {
    DIRECT_LINE("DIRECT_LINE"),
    
    LOCATION_NUMBER("LOCATION_NUMBER"),
    
    CUSTOM("CUSTOM");

    private String value;

    CallingLineIdPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallingLineIdPolicyEnum fromValue(String value) {
      for (CallingLineIdPolicyEnum b : CallingLineIdPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallingLineIdPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallingLineIdPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallingLineIdPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallingLineIdPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallingLineIdPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALLING_LINE_ID_POLICY = "callingLineIdPolicy";
  @SerializedName(SERIALIZED_NAME_CALLING_LINE_ID_POLICY)
  private CallingLineIdPolicyEnum callingLineIdPolicy;

  public static final String SERIALIZED_NAME_CALLING_LINE_ID_PHONE_NUMBER = "callingLineIdPhoneNumber";
  @SerializedName(SERIALIZED_NAME_CALLING_LINE_ID_PHONE_NUMBER)
  private String callingLineIdPhoneNumber;

  public static final String SERIALIZED_NAME_ALTERNATE_NUMBER_SETTINGS = "alternateNumberSettings";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_NUMBER_SETTINGS)
  private GetCallQueueObjectAlternateNumberSettings alternateNumberSettings;

  public static final String SERIALIZED_NAME_CALL_POLICIES = "callPolicies";
  @SerializedName(SERIALIZED_NAME_CALL_POLICIES)
  private GetCallQueueCallPolicyObject callPolicies;

  public static final String SERIALIZED_NAME_QUEUE_SETTINGS = "queueSettings";
  @SerializedName(SERIALIZED_NAME_QUEUE_SETTINGS)
  private CallQueueQueueSettingsGetObject queueSettings;

  public static final String SERIALIZED_NAME_ALLOW_CALL_WAITING_FOR_AGENTS_ENABLED = "allowCallWaitingForAgentsEnabled";
  @SerializedName(SERIALIZED_NAME_ALLOW_CALL_WAITING_FOR_AGENTS_ENABLED)
  private Boolean allowCallWaitingForAgentsEnabled;

  public static final String SERIALIZED_NAME_AGENTS = "agents";
  @SerializedName(SERIALIZED_NAME_AGENTS)
  private List<Object> agents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_AGENT_JOIN_ENABLED = "allowAgentJoinEnabled";
  @SerializedName(SERIALIZED_NAME_ALLOW_AGENT_JOIN_ENABLED)
  private Boolean allowAgentJoinEnabled;

  public GetCallQueueObject() {
  }

  public GetCallQueueObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the call queue.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetCallQueueObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique name for the call queue.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetCallQueueObject enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the call queue is enabled.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetCallQueueObject language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Language for the call queue.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public GetCallQueueObject languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language code.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GetCallQueueObject firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name to be shown when calls are forwarded out of this call queue. Defaults to &#x60;.&#x60;.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public GetCallQueueObject lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name to be shown when calls are forwarded out of this call queue. Defaults to the &#x60;phoneNumber&#x60; if set, otherwise defaults to call group name.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public GetCallQueueObject timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone for the call queue.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public GetCallQueueObject phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Primary phone number of the call queue.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public GetCallQueueObject extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Extension of the call queue.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public GetCallQueueObject routingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
    return this;
  }

  /**
   * Routing prefix of location.
   * @return routingPrefix
   */
  @javax.annotation.Nullable
  public String getRoutingPrefix() {
    return routingPrefix;
  }

  public void setRoutingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
  }


  public GetCallQueueObject esn(String esn) {
    this.esn = esn;
    return this;
  }

  /**
   * Routing prefix + extension of a person or workspace.
   * @return esn
   */
  @javax.annotation.Nullable
  public String getEsn() {
    return esn;
  }

  public void setEsn(String esn) {
    this.esn = esn;
  }


  public GetCallQueueObject tollFreeNumber(Boolean tollFreeNumber) {
    this.tollFreeNumber = tollFreeNumber;
    return this;
  }

  /**
   * Indicate if the number is toll free.
   * @return tollFreeNumber
   */
  @javax.annotation.Nullable
  public Boolean getTollFreeNumber() {
    return tollFreeNumber;
  }

  public void setTollFreeNumber(Boolean tollFreeNumber) {
    this.tollFreeNumber = tollFreeNumber;
  }


  public GetCallQueueObject phoneNumberForOutgoingCallsEnabled(Boolean phoneNumberForOutgoingCallsEnabled) {
    this.phoneNumberForOutgoingCallsEnabled = phoneNumberForOutgoingCallsEnabled;
    return this;
  }

  /**
   * When true, indicates that the agent&#39;s configuration allows them to use the queue&#39;s Caller ID for outgoing calls.
   * @return phoneNumberForOutgoingCallsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPhoneNumberForOutgoingCallsEnabled() {
    return phoneNumberForOutgoingCallsEnabled;
  }

  public void setPhoneNumberForOutgoingCallsEnabled(Boolean phoneNumberForOutgoingCallsEnabled) {
    this.phoneNumberForOutgoingCallsEnabled = phoneNumberForOutgoingCallsEnabled;
  }


  public GetCallQueueObject callingLineIdPolicy(CallingLineIdPolicyEnum callingLineIdPolicy) {
    this.callingLineIdPolicy = callingLineIdPolicy;
    return this;
  }

  /**
   * Which type of Calling Line ID Policy Selected for Call Queue.
   * @return callingLineIdPolicy
   */
  @javax.annotation.Nullable
  public CallingLineIdPolicyEnum getCallingLineIdPolicy() {
    return callingLineIdPolicy;
  }

  public void setCallingLineIdPolicy(CallingLineIdPolicyEnum callingLineIdPolicy) {
    this.callingLineIdPolicy = callingLineIdPolicy;
  }


  public GetCallQueueObject callingLineIdPhoneNumber(String callingLineIdPhoneNumber) {
    this.callingLineIdPhoneNumber = callingLineIdPhoneNumber;
    return this;
  }

  /**
   * Calling line ID Phone number which will be shown if CUSTOM is selected.
   * @return callingLineIdPhoneNumber
   */
  @javax.annotation.Nullable
  public String getCallingLineIdPhoneNumber() {
    return callingLineIdPhoneNumber;
  }

  public void setCallingLineIdPhoneNumber(String callingLineIdPhoneNumber) {
    this.callingLineIdPhoneNumber = callingLineIdPhoneNumber;
  }


  public GetCallQueueObject alternateNumberSettings(GetCallQueueObjectAlternateNumberSettings alternateNumberSettings) {
    this.alternateNumberSettings = alternateNumberSettings;
    return this;
  }

  /**
   * Get alternateNumberSettings
   * @return alternateNumberSettings
   */
  @javax.annotation.Nonnull
  public GetCallQueueObjectAlternateNumberSettings getAlternateNumberSettings() {
    return alternateNumberSettings;
  }

  public void setAlternateNumberSettings(GetCallQueueObjectAlternateNumberSettings alternateNumberSettings) {
    this.alternateNumberSettings = alternateNumberSettings;
  }


  public GetCallQueueObject callPolicies(GetCallQueueCallPolicyObject callPolicies) {
    this.callPolicies = callPolicies;
    return this;
  }

  /**
   * Get callPolicies
   * @return callPolicies
   */
  @javax.annotation.Nonnull
  public GetCallQueueCallPolicyObject getCallPolicies() {
    return callPolicies;
  }

  public void setCallPolicies(GetCallQueueCallPolicyObject callPolicies) {
    this.callPolicies = callPolicies;
  }


  public GetCallQueueObject queueSettings(CallQueueQueueSettingsGetObject queueSettings) {
    this.queueSettings = queueSettings;
    return this;
  }

  /**
   * Get queueSettings
   * @return queueSettings
   */
  @javax.annotation.Nonnull
  public CallQueueQueueSettingsGetObject getQueueSettings() {
    return queueSettings;
  }

  public void setQueueSettings(CallQueueQueueSettingsGetObject queueSettings) {
    this.queueSettings = queueSettings;
  }


  public GetCallQueueObject allowCallWaitingForAgentsEnabled(Boolean allowCallWaitingForAgentsEnabled) {
    this.allowCallWaitingForAgentsEnabled = allowCallWaitingForAgentsEnabled;
    return this;
  }

  /**
   * Flag to indicate whether call waiting is enabled for &#x60;agents&#x60;.
   * @return allowCallWaitingForAgentsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAllowCallWaitingForAgentsEnabled() {
    return allowCallWaitingForAgentsEnabled;
  }

  public void setAllowCallWaitingForAgentsEnabled(Boolean allowCallWaitingForAgentsEnabled) {
    this.allowCallWaitingForAgentsEnabled = allowCallWaitingForAgentsEnabled;
  }


  public GetCallQueueObject agents(List<Object> agents) {
    this.agents = agents;
    return this;
  }

  public GetCallQueueObject addAgentsItem(Object agentsItem) {
    if (this.agents == null) {
      this.agents = new ArrayList<>();
    }
    this.agents.add(agentsItem);
    return this;
  }

  /**
   * People, workspaces and virtual lines that are eligible to receive calls.
   * @return agents
   */
  @javax.annotation.Nonnull
  public List<Object> getAgents() {
    return agents;
  }

  public void setAgents(List<Object> agents) {
    this.agents = agents;
  }


  public GetCallQueueObject allowAgentJoinEnabled(Boolean allowAgentJoinEnabled) {
    this.allowAgentJoinEnabled = allowAgentJoinEnabled;
    return this;
  }

  /**
   * Whether or not to allow agents to join or unjoin a queue.
   * @return allowAgentJoinEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAllowAgentJoinEnabled() {
    return allowAgentJoinEnabled;
  }

  public void setAllowAgentJoinEnabled(Boolean allowAgentJoinEnabled) {
    this.allowAgentJoinEnabled = allowAgentJoinEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCallQueueObject getCallQueueObject = (GetCallQueueObject) o;
    return Objects.equals(this.id, getCallQueueObject.id) &&
        Objects.equals(this.name, getCallQueueObject.name) &&
        Objects.equals(this.enabled, getCallQueueObject.enabled) &&
        Objects.equals(this.language, getCallQueueObject.language) &&
        Objects.equals(this.languageCode, getCallQueueObject.languageCode) &&
        Objects.equals(this.firstName, getCallQueueObject.firstName) &&
        Objects.equals(this.lastName, getCallQueueObject.lastName) &&
        Objects.equals(this.timeZone, getCallQueueObject.timeZone) &&
        Objects.equals(this.phoneNumber, getCallQueueObject.phoneNumber) &&
        Objects.equals(this.extension, getCallQueueObject.extension) &&
        Objects.equals(this.routingPrefix, getCallQueueObject.routingPrefix) &&
        Objects.equals(this.esn, getCallQueueObject.esn) &&
        Objects.equals(this.tollFreeNumber, getCallQueueObject.tollFreeNumber) &&
        Objects.equals(this.phoneNumberForOutgoingCallsEnabled, getCallQueueObject.phoneNumberForOutgoingCallsEnabled) &&
        Objects.equals(this.callingLineIdPolicy, getCallQueueObject.callingLineIdPolicy) &&
        Objects.equals(this.callingLineIdPhoneNumber, getCallQueueObject.callingLineIdPhoneNumber) &&
        Objects.equals(this.alternateNumberSettings, getCallQueueObject.alternateNumberSettings) &&
        Objects.equals(this.callPolicies, getCallQueueObject.callPolicies) &&
        Objects.equals(this.queueSettings, getCallQueueObject.queueSettings) &&
        Objects.equals(this.allowCallWaitingForAgentsEnabled, getCallQueueObject.allowCallWaitingForAgentsEnabled) &&
        Objects.equals(this.agents, getCallQueueObject.agents) &&
        Objects.equals(this.allowAgentJoinEnabled, getCallQueueObject.allowAgentJoinEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, enabled, language, languageCode, firstName, lastName, timeZone, phoneNumber, extension, routingPrefix, esn, tollFreeNumber, phoneNumberForOutgoingCallsEnabled, callingLineIdPolicy, callingLineIdPhoneNumber, alternateNumberSettings, callPolicies, queueSettings, allowCallWaitingForAgentsEnabled, agents, allowAgentJoinEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCallQueueObject {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    routingPrefix: ").append(toIndentedString(routingPrefix)).append("\n");
    sb.append("    esn: ").append(toIndentedString(esn)).append("\n");
    sb.append("    tollFreeNumber: ").append(toIndentedString(tollFreeNumber)).append("\n");
    sb.append("    phoneNumberForOutgoingCallsEnabled: ").append(toIndentedString(phoneNumberForOutgoingCallsEnabled)).append("\n");
    sb.append("    callingLineIdPolicy: ").append(toIndentedString(callingLineIdPolicy)).append("\n");
    sb.append("    callingLineIdPhoneNumber: ").append(toIndentedString(callingLineIdPhoneNumber)).append("\n");
    sb.append("    alternateNumberSettings: ").append(toIndentedString(alternateNumberSettings)).append("\n");
    sb.append("    callPolicies: ").append(toIndentedString(callPolicies)).append("\n");
    sb.append("    queueSettings: ").append(toIndentedString(queueSettings)).append("\n");
    sb.append("    allowCallWaitingForAgentsEnabled: ").append(toIndentedString(allowCallWaitingForAgentsEnabled)).append("\n");
    sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
    sb.append("    allowAgentJoinEnabled: ").append(toIndentedString(allowAgentJoinEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("enabled");
    openapiFields.add("language");
    openapiFields.add("languageCode");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("timeZone");
    openapiFields.add("phoneNumber");
    openapiFields.add("extension");
    openapiFields.add("routingPrefix");
    openapiFields.add("esn");
    openapiFields.add("tollFreeNumber");
    openapiFields.add("phoneNumberForOutgoingCallsEnabled");
    openapiFields.add("callingLineIdPolicy");
    openapiFields.add("callingLineIdPhoneNumber");
    openapiFields.add("alternateNumberSettings");
    openapiFields.add("callPolicies");
    openapiFields.add("queueSettings");
    openapiFields.add("allowCallWaitingForAgentsEnabled");
    openapiFields.add("agents");
    openapiFields.add("allowAgentJoinEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("alternateNumberSettings");
    openapiRequiredFields.add("callPolicies");
    openapiRequiredFields.add("queueSettings");
    openapiRequiredFields.add("agents");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCallQueueObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCallQueueObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCallQueueObject is not found in the empty JSON string", GetCallQueueObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCallQueueObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCallQueueObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCallQueueObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("routingPrefix") != null && !jsonObj.get("routingPrefix").isJsonNull()) && !jsonObj.get("routingPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingPrefix").toString()));
      }
      if ((jsonObj.get("esn") != null && !jsonObj.get("esn").isJsonNull()) && !jsonObj.get("esn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esn").toString()));
      }
      if ((jsonObj.get("callingLineIdPolicy") != null && !jsonObj.get("callingLineIdPolicy").isJsonNull()) && !jsonObj.get("callingLineIdPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingLineIdPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callingLineIdPolicy").toString()));
      }
      // validate the optional field `callingLineIdPolicy`
      if (jsonObj.get("callingLineIdPolicy") != null && !jsonObj.get("callingLineIdPolicy").isJsonNull()) {
        CallingLineIdPolicyEnum.validateJsonElement(jsonObj.get("callingLineIdPolicy"));
      }
      if ((jsonObj.get("callingLineIdPhoneNumber") != null && !jsonObj.get("callingLineIdPhoneNumber").isJsonNull()) && !jsonObj.get("callingLineIdPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingLineIdPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callingLineIdPhoneNumber").toString()));
      }
      // validate the required field `alternateNumberSettings`
      GetCallQueueObjectAlternateNumberSettings.validateJsonElement(jsonObj.get("alternateNumberSettings"));
      // validate the required field `callPolicies`
      GetCallQueueCallPolicyObject.validateJsonElement(jsonObj.get("callPolicies"));
      // validate the required field `queueSettings`
      CallQueueQueueSettingsGetObject.validateJsonElement(jsonObj.get("queueSettings"));
      // ensure the required json array is present
      if (jsonObj.get("agents") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("agents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `agents` to be an array in the JSON string but got `%s`", jsonObj.get("agents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCallQueueObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCallQueueObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCallQueueObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCallQueueObject.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCallQueueObject>() {
           @Override
           public void write(JsonWriter out, GetCallQueueObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCallQueueObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCallQueueObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCallQueueObject
   * @throws IOException if the JSON string is invalid with respect to GetCallQueueObject
   */
  public static GetCallQueueObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCallQueueObject.class);
  }

  /**
   * Convert an instance of GetCallQueueObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

