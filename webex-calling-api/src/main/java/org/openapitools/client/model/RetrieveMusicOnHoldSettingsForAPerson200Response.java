// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetrieveMusicOnHoldSettingsForAPerson200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class RetrieveMusicOnHoldSettingsForAPerson200Response {
  public static final String SERIALIZED_NAME_MOH_ENABLED = "mohEnabled";
  @SerializedName(SERIALIZED_NAME_MOH_ENABLED)
  private Boolean mohEnabled;

  public static final String SERIALIZED_NAME_MOH_LOCATION_ENABLED = "mohLocationEnabled";
  @SerializedName(SERIALIZED_NAME_MOH_LOCATION_ENABLED)
  private Boolean mohLocationEnabled;

  /**
   * Greeting type for the person.
   */
  @JsonAdapter(GreetingEnum.Adapter.class)
  public enum GreetingEnum {
    DEFAULT("DEFAULT"),
    
    CUSTOM("CUSTOM");

    private String value;

    GreetingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GreetingEnum fromValue(String value) {
      for (GreetingEnum b : GreetingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GreetingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GreetingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GreetingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GreetingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GreetingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GREETING = "greeting";
  @SerializedName(SERIALIZED_NAME_GREETING)
  private GreetingEnum greeting;

  public static final String SERIALIZED_NAME_AUDIO_ANNOUNCEMENT_FILE = "audioAnnouncementFile";
  @SerializedName(SERIALIZED_NAME_AUDIO_ANNOUNCEMENT_FILE)
  private RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile audioAnnouncementFile;

  public RetrieveMusicOnHoldSettingsForAPerson200Response() {
  }

  public RetrieveMusicOnHoldSettingsForAPerson200Response mohEnabled(Boolean mohEnabled) {
    this.mohEnabled = mohEnabled;
    return this;
  }

  /**
   * Music on hold enabled or disabled for the person.
   * @return mohEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMohEnabled() {
    return mohEnabled;
  }

  public void setMohEnabled(Boolean mohEnabled) {
    this.mohEnabled = mohEnabled;
  }


  public RetrieveMusicOnHoldSettingsForAPerson200Response mohLocationEnabled(Boolean mohLocationEnabled) {
    this.mohLocationEnabled = mohLocationEnabled;
    return this;
  }

  /**
   * Music on hold enabled or disabled for the location. The music on hold setting returned in the response is used only when music on hold is enabled at the location level. When &#x60;mohLocationEnabled&#x60; is false and &#x60;mohEnabled&#x60; is true, music on hold is disabled for the user. When &#x60;mohLocationEnabled&#x60; is true and &#x60;mohEnabled&#x60; is false, music on hold is turned off for the user. In both cases, music on hold will not be played.
   * @return mohLocationEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMohLocationEnabled() {
    return mohLocationEnabled;
  }

  public void setMohLocationEnabled(Boolean mohLocationEnabled) {
    this.mohLocationEnabled = mohLocationEnabled;
  }


  public RetrieveMusicOnHoldSettingsForAPerson200Response greeting(GreetingEnum greeting) {
    this.greeting = greeting;
    return this;
  }

  /**
   * Greeting type for the person.
   * @return greeting
   */
  @javax.annotation.Nonnull
  public GreetingEnum getGreeting() {
    return greeting;
  }

  public void setGreeting(GreetingEnum greeting) {
    this.greeting = greeting;
  }


  public RetrieveMusicOnHoldSettingsForAPerson200Response audioAnnouncementFile(RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile audioAnnouncementFile) {
    this.audioAnnouncementFile = audioAnnouncementFile;
    return this;
  }

  /**
   * Get audioAnnouncementFile
   * @return audioAnnouncementFile
   */
  @javax.annotation.Nullable
  public RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile getAudioAnnouncementFile() {
    return audioAnnouncementFile;
  }

  public void setAudioAnnouncementFile(RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile audioAnnouncementFile) {
    this.audioAnnouncementFile = audioAnnouncementFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveMusicOnHoldSettingsForAPerson200Response retrieveMusicOnHoldSettingsForAPerson200Response = (RetrieveMusicOnHoldSettingsForAPerson200Response) o;
    return Objects.equals(this.mohEnabled, retrieveMusicOnHoldSettingsForAPerson200Response.mohEnabled) &&
        Objects.equals(this.mohLocationEnabled, retrieveMusicOnHoldSettingsForAPerson200Response.mohLocationEnabled) &&
        Objects.equals(this.greeting, retrieveMusicOnHoldSettingsForAPerson200Response.greeting) &&
        Objects.equals(this.audioAnnouncementFile, retrieveMusicOnHoldSettingsForAPerson200Response.audioAnnouncementFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mohEnabled, mohLocationEnabled, greeting, audioAnnouncementFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveMusicOnHoldSettingsForAPerson200Response {\n");
    sb.append("    mohEnabled: ").append(toIndentedString(mohEnabled)).append("\n");
    sb.append("    mohLocationEnabled: ").append(toIndentedString(mohLocationEnabled)).append("\n");
    sb.append("    greeting: ").append(toIndentedString(greeting)).append("\n");
    sb.append("    audioAnnouncementFile: ").append(toIndentedString(audioAnnouncementFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mohEnabled");
    openapiFields.add("mohLocationEnabled");
    openapiFields.add("greeting");
    openapiFields.add("audioAnnouncementFile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mohEnabled");
    openapiRequiredFields.add("mohLocationEnabled");
    openapiRequiredFields.add("greeting");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveMusicOnHoldSettingsForAPerson200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveMusicOnHoldSettingsForAPerson200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveMusicOnHoldSettingsForAPerson200Response is not found in the empty JSON string", RetrieveMusicOnHoldSettingsForAPerson200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveMusicOnHoldSettingsForAPerson200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveMusicOnHoldSettingsForAPerson200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveMusicOnHoldSettingsForAPerson200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("greeting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greeting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greeting").toString()));
      }
      // validate the required field `greeting`
      GreetingEnum.validateJsonElement(jsonObj.get("greeting"));
      // validate the optional field `audioAnnouncementFile`
      if (jsonObj.get("audioAnnouncementFile") != null && !jsonObj.get("audioAnnouncementFile").isJsonNull()) {
        RetrieveMusicOnHoldSettingsForAPerson200ResponseAudioAnnouncementFile.validateJsonElement(jsonObj.get("audioAnnouncementFile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveMusicOnHoldSettingsForAPerson200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveMusicOnHoldSettingsForAPerson200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveMusicOnHoldSettingsForAPerson200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveMusicOnHoldSettingsForAPerson200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveMusicOnHoldSettingsForAPerson200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveMusicOnHoldSettingsForAPerson200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveMusicOnHoldSettingsForAPerson200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveMusicOnHoldSettingsForAPerson200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveMusicOnHoldSettingsForAPerson200Response
   * @throws IOException if the JSON string is invalid with respect to RetrieveMusicOnHoldSettingsForAPerson200Response
   */
  public static RetrieveMusicOnHoldSettingsForAPerson200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveMusicOnHoldSettingsForAPerson200Response.class);
  }

  /**
   * Convert an instance of RetrieveMusicOnHoldSettingsForAPerson200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

