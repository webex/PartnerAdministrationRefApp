// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAPersonRequestAddressesInner;
import org.openapitools.client.model.CreateAPersonRequestPhoneNumbersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAPersonRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class UpdateAPersonRequest {
  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Object> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<CreateAPersonRequestPhoneNumbersInner> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Object> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<Object> licenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private String manager;

  public static final String SERIALIZED_NAME_MANAGER_ID = "managerId";
  @SerializedName(SERIALIZED_NAME_MANAGER_ID)
  private String managerId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<CreateAPersonRequestAddressesInner> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITE_URLS = "siteUrls";
  @SerializedName(SERIALIZED_NAME_SITE_URLS)
  private List<Object> siteUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGIN_ENABLED = "loginEnabled";
  @SerializedName(SERIALIZED_NAME_LOGIN_ENABLED)
  private Boolean loginEnabled;

  public UpdateAPersonRequest() {
  }

  public UpdateAPersonRequest emails(List<Object> emails) {
    this.emails = emails;
    return this;
  }

  public UpdateAPersonRequest addEmailsItem(Object emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * The email addresses of the person. Only one email address is allowed per person.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<Object> getEmails() {
    return emails;
  }

  public void setEmails(List<Object> emails) {
    this.emails = emails;
  }


  public UpdateAPersonRequest phoneNumbers(List<CreateAPersonRequestPhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public UpdateAPersonRequest addPhoneNumbersItem(CreateAPersonRequestPhoneNumbersInner phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * Phone numbers for the person. Can only be set for Webex Calling. Needs a Webex Calling license.
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<CreateAPersonRequestPhoneNumbersInner> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<CreateAPersonRequestPhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public UpdateAPersonRequest extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Webex Calling extension of the person. This is only settable for a person with a Webex Calling license.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public UpdateAPersonRequest locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The ID of the location for this person.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public UpdateAPersonRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The full name of the person.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateAPersonRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the person.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UpdateAPersonRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the person.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UpdateAPersonRequest nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  /**
   * The nickname of the person if configured. This cannot be overwritten and instead will be set to the firstName automatically in update requests.
   * @return nickName
   */
  @javax.annotation.Nullable
  public String getNickName() {
    return nickName;
  }

  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public UpdateAPersonRequest avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * The URL to the person&#39;s avatar in PNG format.
   * @return avatar
   */
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public UpdateAPersonRequest orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * The ID of the organization to which this person belongs.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public UpdateAPersonRequest roles(List<Object> roles) {
    this.roles = roles;
    return this;
  }

  public UpdateAPersonRequest addRolesItem(Object rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * An array of role strings representing the roles to which this admin user belongs.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Object> getRoles() {
    return roles;
  }

  public void setRoles(List<Object> roles) {
    this.roles = roles;
  }


  public UpdateAPersonRequest licenses(List<Object> licenses) {
    this.licenses = licenses;
    return this;
  }

  public UpdateAPersonRequest addLicensesItem(Object licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

  /**
   * An array of license strings allocated to this person.
   * @return licenses
   */
  @javax.annotation.Nullable
  public List<Object> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<Object> licenses) {
    this.licenses = licenses;
  }


  public UpdateAPersonRequest department(String department) {
    this.department = department;
    return this;
  }

  /**
   * The business department the user belongs to.
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public UpdateAPersonRequest manager(String manager) {
    this.manager = manager;
    return this;
  }

  /**
   * A manager identifier.
   * @return manager
   */
  @javax.annotation.Nullable
  public String getManager() {
    return manager;
  }

  public void setManager(String manager) {
    this.manager = manager;
  }


  public UpdateAPersonRequest managerId(String managerId) {
    this.managerId = managerId;
    return this;
  }

  /**
   * Person ID of the manager.
   * @return managerId
   */
  @javax.annotation.Nullable
  public String getManagerId() {
    return managerId;
  }

  public void setManagerId(String managerId) {
    this.managerId = managerId;
  }


  public UpdateAPersonRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The person&#39;s title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public UpdateAPersonRequest addresses(List<CreateAPersonRequestAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public UpdateAPersonRequest addAddressesItem(CreateAPersonRequestAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * A person&#39;s addresses.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<CreateAPersonRequestAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<CreateAPersonRequestAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public UpdateAPersonRequest siteUrls(List<Object> siteUrls) {
    this.siteUrls = siteUrls;
    return this;
  }

  public UpdateAPersonRequest addSiteUrlsItem(Object siteUrlsItem) {
    if (this.siteUrls == null) {
      this.siteUrls = new ArrayList<>();
    }
    this.siteUrls.add(siteUrlsItem);
    return this;
  }

  /**
   * One or several site names where this user has a role (host or attendee). Append &#x60;#attendee&#x60; to the site name to designate the attendee role on that site.
   * @return siteUrls
   */
  @javax.annotation.Nullable
  public List<Object> getSiteUrls() {
    return siteUrls;
  }

  public void setSiteUrls(List<Object> siteUrls) {
    this.siteUrls = siteUrls;
  }


  public UpdateAPersonRequest loginEnabled(Boolean loginEnabled) {
    this.loginEnabled = loginEnabled;
    return this;
  }

  /**
   * Whether or not the user is allowed to use Webex. This property is only accessible if the authenticated user is an admin user for the person&#39;s organization.
   * @return loginEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLoginEnabled() {
    return loginEnabled;
  }

  public void setLoginEnabled(Boolean loginEnabled) {
    this.loginEnabled = loginEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAPersonRequest updateAPersonRequest = (UpdateAPersonRequest) o;
    return Objects.equals(this.emails, updateAPersonRequest.emails) &&
        Objects.equals(this.phoneNumbers, updateAPersonRequest.phoneNumbers) &&
        Objects.equals(this.extension, updateAPersonRequest.extension) &&
        Objects.equals(this.locationId, updateAPersonRequest.locationId) &&
        Objects.equals(this.displayName, updateAPersonRequest.displayName) &&
        Objects.equals(this.firstName, updateAPersonRequest.firstName) &&
        Objects.equals(this.lastName, updateAPersonRequest.lastName) &&
        Objects.equals(this.nickName, updateAPersonRequest.nickName) &&
        Objects.equals(this.avatar, updateAPersonRequest.avatar) &&
        Objects.equals(this.orgId, updateAPersonRequest.orgId) &&
        Objects.equals(this.roles, updateAPersonRequest.roles) &&
        Objects.equals(this.licenses, updateAPersonRequest.licenses) &&
        Objects.equals(this.department, updateAPersonRequest.department) &&
        Objects.equals(this.manager, updateAPersonRequest.manager) &&
        Objects.equals(this.managerId, updateAPersonRequest.managerId) &&
        Objects.equals(this.title, updateAPersonRequest.title) &&
        Objects.equals(this.addresses, updateAPersonRequest.addresses) &&
        Objects.equals(this.siteUrls, updateAPersonRequest.siteUrls) &&
        Objects.equals(this.loginEnabled, updateAPersonRequest.loginEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emails, phoneNumbers, extension, locationId, displayName, firstName, lastName, nickName, avatar, orgId, roles, licenses, department, manager, managerId, title, addresses, siteUrls, loginEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAPersonRequest {\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    managerId: ").append(toIndentedString(managerId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    siteUrls: ").append(toIndentedString(siteUrls)).append("\n");
    sb.append("    loginEnabled: ").append(toIndentedString(loginEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emails");
    openapiFields.add("phoneNumbers");
    openapiFields.add("extension");
    openapiFields.add("locationId");
    openapiFields.add("displayName");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("nickName");
    openapiFields.add("avatar");
    openapiFields.add("orgId");
    openapiFields.add("roles");
    openapiFields.add("licenses");
    openapiFields.add("department");
    openapiFields.add("manager");
    openapiFields.add("managerId");
    openapiFields.add("title");
    openapiFields.add("addresses");
    openapiFields.add("siteUrls");
    openapiFields.add("loginEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAPersonRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAPersonRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAPersonRequest is not found in the empty JSON string", UpdateAPersonRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAPersonRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAPersonRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAPersonRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            CreateAPersonRequestPhoneNumbersInner.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull() && !jsonObj.get("licenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) && !jsonObj.get("manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      if ((jsonObj.get("managerId") != null && !jsonObj.get("managerId").isJsonNull()) && !jsonObj.get("managerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managerId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            CreateAPersonRequestAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteUrls") != null && !jsonObj.get("siteUrls").isJsonNull() && !jsonObj.get("siteUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteUrls` to be an array in the JSON string but got `%s`", jsonObj.get("siteUrls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAPersonRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAPersonRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAPersonRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAPersonRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAPersonRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAPersonRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAPersonRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAPersonRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAPersonRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAPersonRequest
   */
  public static UpdateAPersonRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAPersonRequest.class);
  }

  /**
   * Convert an instance of UpdateAPersonRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

