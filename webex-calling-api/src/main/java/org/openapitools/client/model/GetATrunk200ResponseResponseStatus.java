// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Present partial error/warning status information included when the http response is 206.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetATrunk200ResponseResponseStatus {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private BigDecimal code;

  /**
   * Status type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ERROR("ERROR"),
    
    WARNING("WARNING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SUMMARY_ENGLISH = "summaryEnglish";
  @SerializedName(SERIALIZED_NAME_SUMMARY_ENGLISH)
  private String summaryEnglish;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private List<Object> detail = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public GetATrunk200ResponseResponseStatus() {
  }

  public GetATrunk200ResponseResponseStatus code(BigDecimal code) {
    this.code = code;
    return this;
  }

  /**
   * Error Code. 25013 for error retrieving the outbound proxy. 25014 for error retrieving the status
   * @return code
   */
  @javax.annotation.Nonnull
  public BigDecimal getCode() {
    return code;
  }

  public void setCode(BigDecimal code) {
    this.code = code;
  }


  public GetATrunk200ResponseResponseStatus type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Status type.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetATrunk200ResponseResponseStatus summaryEnglish(String summaryEnglish) {
    this.summaryEnglish = summaryEnglish;
    return this;
  }

  /**
   * Error summary in English.
   * @return summaryEnglish
   */
  @javax.annotation.Nonnull
  public String getSummaryEnglish() {
    return summaryEnglish;
  }

  public void setSummaryEnglish(String summaryEnglish) {
    this.summaryEnglish = summaryEnglish;
  }


  public GetATrunk200ResponseResponseStatus detail(List<Object> detail) {
    this.detail = detail;
    return this;
  }

  public GetATrunk200ResponseResponseStatus addDetailItem(Object detailItem) {
    if (this.detail == null) {
      this.detail = new ArrayList<>();
    }
    this.detail.add(detailItem);
    return this;
  }

  /**
   * Error Details.
   * @return detail
   */
  @javax.annotation.Nonnull
  public List<Object> getDetail() {
    return detail;
  }

  public void setDetail(List<Object> detail) {
    this.detail = detail;
  }


  public GetATrunk200ResponseResponseStatus trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * Error Tracking ID.
   * @return trackingId
   */
  @javax.annotation.Nonnull
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetATrunk200ResponseResponseStatus getATrunk200ResponseResponseStatus = (GetATrunk200ResponseResponseStatus) o;
    return Objects.equals(this.code, getATrunk200ResponseResponseStatus.code) &&
        Objects.equals(this.type, getATrunk200ResponseResponseStatus.type) &&
        Objects.equals(this.summaryEnglish, getATrunk200ResponseResponseStatus.summaryEnglish) &&
        Objects.equals(this.detail, getATrunk200ResponseResponseStatus.detail) &&
        Objects.equals(this.trackingId, getATrunk200ResponseResponseStatus.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, type, summaryEnglish, detail, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetATrunk200ResponseResponseStatus {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    summaryEnglish: ").append(toIndentedString(summaryEnglish)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("type");
    openapiFields.add("summaryEnglish");
    openapiFields.add("detail");
    openapiFields.add("trackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("summaryEnglish");
    openapiRequiredFields.add("detail");
    openapiRequiredFields.add("trackingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetATrunk200ResponseResponseStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetATrunk200ResponseResponseStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetATrunk200ResponseResponseStatus is not found in the empty JSON string", GetATrunk200ResponseResponseStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetATrunk200ResponseResponseStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetATrunk200ResponseResponseStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetATrunk200ResponseResponseStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("summaryEnglish").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryEnglish` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryEnglish").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("detail") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("detail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be an array in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if (!jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetATrunk200ResponseResponseStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetATrunk200ResponseResponseStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetATrunk200ResponseResponseStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetATrunk200ResponseResponseStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GetATrunk200ResponseResponseStatus>() {
           @Override
           public void write(JsonWriter out, GetATrunk200ResponseResponseStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetATrunk200ResponseResponseStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetATrunk200ResponseResponseStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetATrunk200ResponseResponseStatus
   * @throws IOException if the JSON string is invalid with respect to GetATrunk200ResponseResponseStatus
   */
  public static GetATrunk200ResponseResponseStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetATrunk200ResponseResponseStatus.class);
  }

  /**
   * Convert an instance of GetATrunk200ResponseResponseStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

