// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetReportDetails200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetReportDetails200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_SITE_LIST = "siteList";
  @SerializedName(SERIALIZED_NAME_SITE_LIST)
  private String siteList;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_SCHEDULED_FROM = "scheduledFrom";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_FROM)
  private String scheduledFrom;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DOWNLOAD_U_R_L = "downloadURL";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_U_R_L)
  private String downloadURL;

  public GetReportDetails200Response() {
  }

  public GetReportDetails200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the report.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetReportDetails200Response title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Name of the template to which this report belongs.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetReportDetails200Response service(String service) {
    this.service = service;
    return this;
  }

  /**
   * The service to which the report belongs.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public GetReportDetails200Response startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The data in this report belongs to dates greater than or equal to this.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public GetReportDetails200Response endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The data in this report belongs to dates smaller than or equal to this.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public GetReportDetails200Response siteList(String siteList) {
    this.siteList = siteList;
    return this;
  }

  /**
   * The site to which this report belongs to. This only exists if the report belongs to service &#x60;Webex&#x60;.
   * @return siteList
   */
  @javax.annotation.Nullable
  public String getSiteList() {
    return siteList;
  }

  public void setSiteList(String siteList) {
    this.siteList = siteList;
  }


  public GetReportDetails200Response created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Time of creation for this report.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public GetReportDetails200Response createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The person who created the report.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public GetReportDetails200Response scheduledFrom(String scheduledFrom) {
    this.scheduledFrom = scheduledFrom;
    return this;
  }

  /**
   * Whether this report was scheduled from API or Control Hub.
   * @return scheduledFrom
   */
  @javax.annotation.Nullable
  public String getScheduledFrom() {
    return scheduledFrom;
  }

  public void setScheduledFrom(String scheduledFrom) {
    this.scheduledFrom = scheduledFrom;
  }


  public GetReportDetails200Response status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Completion status of this report.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GetReportDetails200Response downloadURL(String downloadURL) {
    this.downloadURL = downloadURL;
    return this;
  }

  /**
   * The link from which the report can be downloaded.
   * @return downloadURL
   */
  @javax.annotation.Nullable
  public String getDownloadURL() {
    return downloadURL;
  }

  public void setDownloadURL(String downloadURL) {
    this.downloadURL = downloadURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetReportDetails200Response getReportDetails200Response = (GetReportDetails200Response) o;
    return Objects.equals(this.id, getReportDetails200Response.id) &&
        Objects.equals(this.title, getReportDetails200Response.title) &&
        Objects.equals(this.service, getReportDetails200Response.service) &&
        Objects.equals(this.startDate, getReportDetails200Response.startDate) &&
        Objects.equals(this.endDate, getReportDetails200Response.endDate) &&
        Objects.equals(this.siteList, getReportDetails200Response.siteList) &&
        Objects.equals(this.created, getReportDetails200Response.created) &&
        Objects.equals(this.createdBy, getReportDetails200Response.createdBy) &&
        Objects.equals(this.scheduledFrom, getReportDetails200Response.scheduledFrom) &&
        Objects.equals(this.status, getReportDetails200Response.status) &&
        Objects.equals(this.downloadURL, getReportDetails200Response.downloadURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, service, startDate, endDate, siteList, created, createdBy, scheduledFrom, status, downloadURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetReportDetails200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    siteList: ").append(toIndentedString(siteList)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    scheduledFrom: ").append(toIndentedString(scheduledFrom)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    downloadURL: ").append(toIndentedString(downloadURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("service");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("siteList");
    openapiFields.add("created");
    openapiFields.add("createdBy");
    openapiFields.add("scheduledFrom");
    openapiFields.add("status");
    openapiFields.add("downloadURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetReportDetails200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetReportDetails200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetReportDetails200Response is not found in the empty JSON string", GetReportDetails200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetReportDetails200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetReportDetails200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("siteList") != null && !jsonObj.get("siteList").isJsonNull()) && !jsonObj.get("siteList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteList").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("scheduledFrom") != null && !jsonObj.get("scheduledFrom").isJsonNull()) && !jsonObj.get("scheduledFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledFrom").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("downloadURL") != null && !jsonObj.get("downloadURL").isJsonNull()) && !jsonObj.get("downloadURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetReportDetails200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetReportDetails200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetReportDetails200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetReportDetails200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetReportDetails200Response>() {
           @Override
           public void write(JsonWriter out, GetReportDetails200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetReportDetails200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetReportDetails200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetReportDetails200Response
   * @throws IOException if the JSON string is invalid with respect to GetReportDetails200Response
   */
  public static GetReportDetails200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetReportDetails200Response.class);
  }

  /**
   * Convert an instance of GetReportDetails200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

