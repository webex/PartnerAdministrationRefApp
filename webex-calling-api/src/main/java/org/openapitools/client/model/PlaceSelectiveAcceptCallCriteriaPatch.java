// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlaceScheduleLevel;
import org.openapitools.client.model.ScheduleTypeSelection;
import org.openapitools.client.model.SelectiveAcceptCallCallsFromType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlaceSelectiveAcceptCallCriteriaPatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class PlaceSelectiveAcceptCallCriteriaPatch {
  public static final String SERIALIZED_NAME_SCHEDULE_NAME = "scheduleName";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_NAME)
  private String scheduleName;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ScheduleTypeSelection scheduleType;

  public static final String SERIALIZED_NAME_SCHEDULE_LEVEL = "scheduleLevel";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_LEVEL)
  private PlaceScheduleLevel scheduleLevel;

  public static final String SERIALIZED_NAME_CALLS_FROM = "callsFrom";
  @SerializedName(SERIALIZED_NAME_CALLS_FROM)
  private SelectiveAcceptCallCallsFromType callsFrom;

  public static final String SERIALIZED_NAME_ANONYMOUS_CALLERS_ENABLED = "anonymousCallersEnabled";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_CALLERS_ENABLED)
  private Boolean anonymousCallersEnabled;

  public static final String SERIALIZED_NAME_UNAVAILABLE_CALLERS_ENABLED = "unavailableCallersEnabled";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_CALLERS_ENABLED)
  private Boolean unavailableCallersEnabled;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<Object> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCEPT_ENABLED = "acceptEnabled";
  @SerializedName(SERIALIZED_NAME_ACCEPT_ENABLED)
  private Boolean acceptEnabled;

  public PlaceSelectiveAcceptCallCriteriaPatch() {
  }

  public PlaceSelectiveAcceptCallCriteriaPatch scheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
    return this;
  }

  /**
   * Name of the location&#39;s schedule which determines when the selective accept is in effect.
   * @return scheduleName
   */
  @javax.annotation.Nullable
  public String getScheduleName() {
    return scheduleName;
  }

  public void setScheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch scheduleType(ScheduleTypeSelection scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * Get scheduleType
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public ScheduleTypeSelection getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ScheduleTypeSelection scheduleType) {
    this.scheduleType = scheduleType;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch scheduleLevel(PlaceScheduleLevel scheduleLevel) {
    this.scheduleLevel = scheduleLevel;
    return this;
  }

  /**
   * Get scheduleLevel
   * @return scheduleLevel
   */
  @javax.annotation.Nullable
  public PlaceScheduleLevel getScheduleLevel() {
    return scheduleLevel;
  }

  public void setScheduleLevel(PlaceScheduleLevel scheduleLevel) {
    this.scheduleLevel = scheduleLevel;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch callsFrom(SelectiveAcceptCallCallsFromType callsFrom) {
    this.callsFrom = callsFrom;
    return this;
  }

  /**
   * Get callsFrom
   * @return callsFrom
   */
  @javax.annotation.Nullable
  public SelectiveAcceptCallCallsFromType getCallsFrom() {
    return callsFrom;
  }

  public void setCallsFrom(SelectiveAcceptCallCallsFromType callsFrom) {
    this.callsFrom = callsFrom;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch anonymousCallersEnabled(Boolean anonymousCallersEnabled) {
    this.anonymousCallersEnabled = anonymousCallersEnabled;
    return this;
  }

  /**
   * When &#x60;true&#x60;, enables calls from anonymous callers.
   * @return anonymousCallersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousCallersEnabled() {
    return anonymousCallersEnabled;
  }

  public void setAnonymousCallersEnabled(Boolean anonymousCallersEnabled) {
    this.anonymousCallersEnabled = anonymousCallersEnabled;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch unavailableCallersEnabled(Boolean unavailableCallersEnabled) {
    this.unavailableCallersEnabled = unavailableCallersEnabled;
    return this;
  }

  /**
   * When &#x60;true&#x60;, enables calls even if callers are unavailable.
   * @return unavailableCallersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUnavailableCallersEnabled() {
    return unavailableCallersEnabled;
  }

  public void setUnavailableCallersEnabled(Boolean unavailableCallersEnabled) {
    this.unavailableCallersEnabled = unavailableCallersEnabled;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch phoneNumbers(List<Object> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public PlaceSelectiveAcceptCallCriteriaPatch addPhoneNumbersItem(Object phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * the list of phone numbers that will checked against incoming calls for a match.
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<Object> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<Object> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public PlaceSelectiveAcceptCallCriteriaPatch acceptEnabled(Boolean acceptEnabled) {
    this.acceptEnabled = acceptEnabled;
    return this;
  }

  /**
   * Choose to accept (if &#x60;acceptEnabled&#x60; &#x3D; &#x60;true&#x60;) or not to accept (if &#x60;acceptEnabled&#x60; &#x3D; &#x60;false&#x60;) the calls that fit within these parameters.
   * @return acceptEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAcceptEnabled() {
    return acceptEnabled;
  }

  public void setAcceptEnabled(Boolean acceptEnabled) {
    this.acceptEnabled = acceptEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceSelectiveAcceptCallCriteriaPatch placeSelectiveAcceptCallCriteriaPatch = (PlaceSelectiveAcceptCallCriteriaPatch) o;
    return Objects.equals(this.scheduleName, placeSelectiveAcceptCallCriteriaPatch.scheduleName) &&
        Objects.equals(this.scheduleType, placeSelectiveAcceptCallCriteriaPatch.scheduleType) &&
        Objects.equals(this.scheduleLevel, placeSelectiveAcceptCallCriteriaPatch.scheduleLevel) &&
        Objects.equals(this.callsFrom, placeSelectiveAcceptCallCriteriaPatch.callsFrom) &&
        Objects.equals(this.anonymousCallersEnabled, placeSelectiveAcceptCallCriteriaPatch.anonymousCallersEnabled) &&
        Objects.equals(this.unavailableCallersEnabled, placeSelectiveAcceptCallCriteriaPatch.unavailableCallersEnabled) &&
        Objects.equals(this.phoneNumbers, placeSelectiveAcceptCallCriteriaPatch.phoneNumbers) &&
        Objects.equals(this.acceptEnabled, placeSelectiveAcceptCallCriteriaPatch.acceptEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduleName, scheduleType, scheduleLevel, callsFrom, anonymousCallersEnabled, unavailableCallersEnabled, phoneNumbers, acceptEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceSelectiveAcceptCallCriteriaPatch {\n");
    sb.append("    scheduleName: ").append(toIndentedString(scheduleName)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    scheduleLevel: ").append(toIndentedString(scheduleLevel)).append("\n");
    sb.append("    callsFrom: ").append(toIndentedString(callsFrom)).append("\n");
    sb.append("    anonymousCallersEnabled: ").append(toIndentedString(anonymousCallersEnabled)).append("\n");
    sb.append("    unavailableCallersEnabled: ").append(toIndentedString(unavailableCallersEnabled)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    acceptEnabled: ").append(toIndentedString(acceptEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduleName");
    openapiFields.add("scheduleType");
    openapiFields.add("scheduleLevel");
    openapiFields.add("callsFrom");
    openapiFields.add("anonymousCallersEnabled");
    openapiFields.add("unavailableCallersEnabled");
    openapiFields.add("phoneNumbers");
    openapiFields.add("acceptEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaceSelectiveAcceptCallCriteriaPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaceSelectiveAcceptCallCriteriaPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaceSelectiveAcceptCallCriteriaPatch is not found in the empty JSON string", PlaceSelectiveAcceptCallCriteriaPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaceSelectiveAcceptCallCriteriaPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaceSelectiveAcceptCallCriteriaPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scheduleName") != null && !jsonObj.get("scheduleName").isJsonNull()) && !jsonObj.get("scheduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleName").toString()));
      }
      // validate the optional field `scheduleType`
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) {
        ScheduleTypeSelection.validateJsonElement(jsonObj.get("scheduleType"));
      }
      // validate the optional field `scheduleLevel`
      if (jsonObj.get("scheduleLevel") != null && !jsonObj.get("scheduleLevel").isJsonNull()) {
        PlaceScheduleLevel.validateJsonElement(jsonObj.get("scheduleLevel"));
      }
      // validate the optional field `callsFrom`
      if (jsonObj.get("callsFrom") != null && !jsonObj.get("callsFrom").isJsonNull()) {
        SelectiveAcceptCallCallsFromType.validateJsonElement(jsonObj.get("callsFrom"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull() && !jsonObj.get("phoneNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaceSelectiveAcceptCallCriteriaPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaceSelectiveAcceptCallCriteriaPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaceSelectiveAcceptCallCriteriaPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaceSelectiveAcceptCallCriteriaPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaceSelectiveAcceptCallCriteriaPatch>() {
           @Override
           public void write(JsonWriter out, PlaceSelectiveAcceptCallCriteriaPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaceSelectiveAcceptCallCriteriaPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaceSelectiveAcceptCallCriteriaPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaceSelectiveAcceptCallCriteriaPatch
   * @throws IOException if the JSON string is invalid with respect to PlaceSelectiveAcceptCallCriteriaPatch
   */
  public static PlaceSelectiveAcceptCallCriteriaPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaceSelectiveAcceptCallCriteriaPatch.class);
  }

  /**
   * Convert an instance of PlaceSelectiveAcceptCallCriteriaPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

