// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Notify the caller with either their estimated wait time or position in the queue. If this option is enabled, it plays after the welcome message and before the comfort message. By default, it is not enabled.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CreateACallQueueRequestQueueSettingsWaitMessage {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * Estimated wait message operating mode. Supported values &#x60;TIME&#x60; and &#x60;POSITION&#x60;.
   */
  @JsonAdapter(WaitModeEnum.Adapter.class)
  public enum WaitModeEnum {
    TIME("TIME"),
    
    POSITION("POSITION");

    private String value;

    WaitModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaitModeEnum fromValue(String value) {
      for (WaitModeEnum b : WaitModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaitModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaitModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaitModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaitModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaitModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAIT_MODE = "waitMode";
  @SerializedName(SERIALIZED_NAME_WAIT_MODE)
  private WaitModeEnum waitMode;

  public static final String SERIALIZED_NAME_HANDLING_TIME = "handlingTime";
  @SerializedName(SERIALIZED_NAME_HANDLING_TIME)
  private BigDecimal handlingTime;

  public static final String SERIALIZED_NAME_DEFAULT_HANDLING_TIME = "defaultHandlingTime";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HANDLING_TIME)
  private BigDecimal defaultHandlingTime;

  public static final String SERIALIZED_NAME_QUEUE_POSITION = "queuePosition";
  @SerializedName(SERIALIZED_NAME_QUEUE_POSITION)
  private BigDecimal queuePosition;

  public static final String SERIALIZED_NAME_HIGH_VOLUME_MESSAGE_ENABLED = "highVolumeMessageEnabled";
  @SerializedName(SERIALIZED_NAME_HIGH_VOLUME_MESSAGE_ENABLED)
  private Boolean highVolumeMessageEnabled;

  public static final String SERIALIZED_NAME_ESTIMATED_WAITING_TIME = "estimatedWaitingTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_WAITING_TIME)
  private BigDecimal estimatedWaitingTime;

  public static final String SERIALIZED_NAME_CALLBACK_OPTION_ENABLED = "callbackOptionEnabled";
  @SerializedName(SERIALIZED_NAME_CALLBACK_OPTION_ENABLED)
  private Boolean callbackOptionEnabled;

  public static final String SERIALIZED_NAME_MINIMUM_ESTIMATED_CALLBACK_TIME = "minimumEstimatedCallbackTime";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ESTIMATED_CALLBACK_TIME)
  private BigDecimal minimumEstimatedCallbackTime;

  public static final String SERIALIZED_NAME_INTERNATIONAL_CALLBACK_ENABLED = "internationalCallbackEnabled";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_CALLBACK_ENABLED)
  private Boolean internationalCallbackEnabled;

  public static final String SERIALIZED_NAME_PLAY_UPDATED_ESTIMATED_WAIT_MESSAGE = "playUpdatedEstimatedWaitMessage";
  @SerializedName(SERIALIZED_NAME_PLAY_UPDATED_ESTIMATED_WAIT_MESSAGE)
  private Boolean playUpdatedEstimatedWaitMessage;

  public CreateACallQueueRequestQueueSettingsWaitMessage() {
  }

  public CreateACallQueueRequestQueueSettingsWaitMessage enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If enabled play Wait Message.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage waitMode(WaitModeEnum waitMode) {
    this.waitMode = waitMode;
    return this;
  }

  /**
   * Estimated wait message operating mode. Supported values &#x60;TIME&#x60; and &#x60;POSITION&#x60;.
   * @return waitMode
   */
  @javax.annotation.Nonnull
  public WaitModeEnum getWaitMode() {
    return waitMode;
  }

  public void setWaitMode(WaitModeEnum waitMode) {
    this.waitMode = waitMode;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage handlingTime(BigDecimal handlingTime) {
    this.handlingTime = handlingTime;
    return this;
  }

  /**
   * The number of minutes for which the estimated wait is played. The minimum time is 10 minutes. The maximum time is 100 minutes.
   * @return handlingTime
   */
  @javax.annotation.Nullable
  public BigDecimal getHandlingTime() {
    return handlingTime;
  }

  public void setHandlingTime(BigDecimal handlingTime) {
    this.handlingTime = handlingTime;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage defaultHandlingTime(BigDecimal defaultHandlingTime) {
    this.defaultHandlingTime = defaultHandlingTime;
    return this;
  }

  /**
   * The default number of call handling minutes. The minimum time is 1 minutes, The maximum time is 100 minutes.
   * @return defaultHandlingTime
   */
  @javax.annotation.Nullable
  public BigDecimal getDefaultHandlingTime() {
    return defaultHandlingTime;
  }

  public void setDefaultHandlingTime(BigDecimal defaultHandlingTime) {
    this.defaultHandlingTime = defaultHandlingTime;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage queuePosition(BigDecimal queuePosition) {
    this.queuePosition = queuePosition;
    return this;
  }

  /**
   * The number of the position for which the estimated wait is played. The minimum positions are 10, The maximum positions are 100.
   * @return queuePosition
   */
  @javax.annotation.Nullable
  public BigDecimal getQueuePosition() {
    return queuePosition;
  }

  public void setQueuePosition(BigDecimal queuePosition) {
    this.queuePosition = queuePosition;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage highVolumeMessageEnabled(Boolean highVolumeMessageEnabled) {
    this.highVolumeMessageEnabled = highVolumeMessageEnabled;
    return this;
  }

  /**
   * Play time / Play position High Volume.
   * @return highVolumeMessageEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHighVolumeMessageEnabled() {
    return highVolumeMessageEnabled;
  }

  public void setHighVolumeMessageEnabled(Boolean highVolumeMessageEnabled) {
    this.highVolumeMessageEnabled = highVolumeMessageEnabled;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage estimatedWaitingTime(BigDecimal estimatedWaitingTime) {
    this.estimatedWaitingTime = estimatedWaitingTime;
    return this;
  }

  /**
   * The number of estimated waiting times in seconds. The minimum time is 10 seconds. The maximum time is 600 seconds.
   * @return estimatedWaitingTime
   */
  @javax.annotation.Nullable
  public BigDecimal getEstimatedWaitingTime() {
    return estimatedWaitingTime;
  }

  public void setEstimatedWaitingTime(BigDecimal estimatedWaitingTime) {
    this.estimatedWaitingTime = estimatedWaitingTime;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage callbackOptionEnabled(Boolean callbackOptionEnabled) {
    this.callbackOptionEnabled = callbackOptionEnabled;
    return this;
  }

  /**
   * Callback options enabled/disabled. Default value is false.
   * @return callbackOptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCallbackOptionEnabled() {
    return callbackOptionEnabled;
  }

  public void setCallbackOptionEnabled(Boolean callbackOptionEnabled) {
    this.callbackOptionEnabled = callbackOptionEnabled;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage minimumEstimatedCallbackTime(BigDecimal minimumEstimatedCallbackTime) {
    this.minimumEstimatedCallbackTime = minimumEstimatedCallbackTime;
    return this;
  }

  /**
   * The minimum estimated callback times in minutes. The default value is 30.
   * @return minimumEstimatedCallbackTime
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimumEstimatedCallbackTime() {
    return minimumEstimatedCallbackTime;
  }

  public void setMinimumEstimatedCallbackTime(BigDecimal minimumEstimatedCallbackTime) {
    this.minimumEstimatedCallbackTime = minimumEstimatedCallbackTime;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage internationalCallbackEnabled(Boolean internationalCallbackEnabled) {
    this.internationalCallbackEnabled = internationalCallbackEnabled;
    return this;
  }

  /**
   * The international numbers for callback is enabled/disabled. The default value is &#x60;false&#x60;.
   * @return internationalCallbackEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInternationalCallbackEnabled() {
    return internationalCallbackEnabled;
  }

  public void setInternationalCallbackEnabled(Boolean internationalCallbackEnabled) {
    this.internationalCallbackEnabled = internationalCallbackEnabled;
  }


  public CreateACallQueueRequestQueueSettingsWaitMessage playUpdatedEstimatedWaitMessage(Boolean playUpdatedEstimatedWaitMessage) {
    this.playUpdatedEstimatedWaitMessage = playUpdatedEstimatedWaitMessage;
    return this;
  }

  /**
   * Play updated estimated wait message.
   * @return playUpdatedEstimatedWaitMessage
   */
  @javax.annotation.Nullable
  public Boolean getPlayUpdatedEstimatedWaitMessage() {
    return playUpdatedEstimatedWaitMessage;
  }

  public void setPlayUpdatedEstimatedWaitMessage(Boolean playUpdatedEstimatedWaitMessage) {
    this.playUpdatedEstimatedWaitMessage = playUpdatedEstimatedWaitMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateACallQueueRequestQueueSettingsWaitMessage createACallQueueRequestQueueSettingsWaitMessage = (CreateACallQueueRequestQueueSettingsWaitMessage) o;
    return Objects.equals(this.enabled, createACallQueueRequestQueueSettingsWaitMessage.enabled) &&
        Objects.equals(this.waitMode, createACallQueueRequestQueueSettingsWaitMessage.waitMode) &&
        Objects.equals(this.handlingTime, createACallQueueRequestQueueSettingsWaitMessage.handlingTime) &&
        Objects.equals(this.defaultHandlingTime, createACallQueueRequestQueueSettingsWaitMessage.defaultHandlingTime) &&
        Objects.equals(this.queuePosition, createACallQueueRequestQueueSettingsWaitMessage.queuePosition) &&
        Objects.equals(this.highVolumeMessageEnabled, createACallQueueRequestQueueSettingsWaitMessage.highVolumeMessageEnabled) &&
        Objects.equals(this.estimatedWaitingTime, createACallQueueRequestQueueSettingsWaitMessage.estimatedWaitingTime) &&
        Objects.equals(this.callbackOptionEnabled, createACallQueueRequestQueueSettingsWaitMessage.callbackOptionEnabled) &&
        Objects.equals(this.minimumEstimatedCallbackTime, createACallQueueRequestQueueSettingsWaitMessage.minimumEstimatedCallbackTime) &&
        Objects.equals(this.internationalCallbackEnabled, createACallQueueRequestQueueSettingsWaitMessage.internationalCallbackEnabled) &&
        Objects.equals(this.playUpdatedEstimatedWaitMessage, createACallQueueRequestQueueSettingsWaitMessage.playUpdatedEstimatedWaitMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, waitMode, handlingTime, defaultHandlingTime, queuePosition, highVolumeMessageEnabled, estimatedWaitingTime, callbackOptionEnabled, minimumEstimatedCallbackTime, internationalCallbackEnabled, playUpdatedEstimatedWaitMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateACallQueueRequestQueueSettingsWaitMessage {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    waitMode: ").append(toIndentedString(waitMode)).append("\n");
    sb.append("    handlingTime: ").append(toIndentedString(handlingTime)).append("\n");
    sb.append("    defaultHandlingTime: ").append(toIndentedString(defaultHandlingTime)).append("\n");
    sb.append("    queuePosition: ").append(toIndentedString(queuePosition)).append("\n");
    sb.append("    highVolumeMessageEnabled: ").append(toIndentedString(highVolumeMessageEnabled)).append("\n");
    sb.append("    estimatedWaitingTime: ").append(toIndentedString(estimatedWaitingTime)).append("\n");
    sb.append("    callbackOptionEnabled: ").append(toIndentedString(callbackOptionEnabled)).append("\n");
    sb.append("    minimumEstimatedCallbackTime: ").append(toIndentedString(minimumEstimatedCallbackTime)).append("\n");
    sb.append("    internationalCallbackEnabled: ").append(toIndentedString(internationalCallbackEnabled)).append("\n");
    sb.append("    playUpdatedEstimatedWaitMessage: ").append(toIndentedString(playUpdatedEstimatedWaitMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("waitMode");
    openapiFields.add("handlingTime");
    openapiFields.add("defaultHandlingTime");
    openapiFields.add("queuePosition");
    openapiFields.add("highVolumeMessageEnabled");
    openapiFields.add("estimatedWaitingTime");
    openapiFields.add("callbackOptionEnabled");
    openapiFields.add("minimumEstimatedCallbackTime");
    openapiFields.add("internationalCallbackEnabled");
    openapiFields.add("playUpdatedEstimatedWaitMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("waitMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateACallQueueRequestQueueSettingsWaitMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateACallQueueRequestQueueSettingsWaitMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateACallQueueRequestQueueSettingsWaitMessage is not found in the empty JSON string", CreateACallQueueRequestQueueSettingsWaitMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateACallQueueRequestQueueSettingsWaitMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateACallQueueRequestQueueSettingsWaitMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateACallQueueRequestQueueSettingsWaitMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("waitMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waitMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waitMode").toString()));
      }
      // validate the required field `waitMode`
      WaitModeEnum.validateJsonElement(jsonObj.get("waitMode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateACallQueueRequestQueueSettingsWaitMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateACallQueueRequestQueueSettingsWaitMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateACallQueueRequestQueueSettingsWaitMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateACallQueueRequestQueueSettingsWaitMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateACallQueueRequestQueueSettingsWaitMessage>() {
           @Override
           public void write(JsonWriter out, CreateACallQueueRequestQueueSettingsWaitMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateACallQueueRequestQueueSettingsWaitMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateACallQueueRequestQueueSettingsWaitMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateACallQueueRequestQueueSettingsWaitMessage
   * @throws IOException if the JSON string is invalid with respect to CreateACallQueueRequestQueueSettingsWaitMessage
   */
  public static CreateACallQueueRequestQueueSettingsWaitMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateACallQueueRequestQueueSettingsWaitMessage.class);
  }

  /**
   * Convert an instance of CreateACallQueueRequestQueueSettingsWaitMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

