// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDetailsForAVirtualLine200ResponseLocation;
import org.openapitools.client.model.GetDetailsForAVirtualLine200ResponseNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDetailsForAVirtualLine200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetDetailsForAVirtualLine200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DIRECTORY_SEARCH_ENABLED = "directorySearchEnabled";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SEARCH_ENABLED)
  private Boolean directorySearchEnabled;

  public static final String SERIALIZED_NAME_ANNOUNCEMENT_LANGUAGE = "announcementLanguage";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_LANGUAGE)
  private String announcementLanguage;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private GetDetailsForAVirtualLine200ResponseNumber number;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<Object> devices = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GetDetailsForAVirtualLine200ResponseLocation location;

  public GetDetailsForAVirtualLine200Response() {
  }

  public GetDetailsForAVirtualLine200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the virtual line.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetDetailsForAVirtualLine200Response firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name defined for a virtual line. Minimum length is 1. Maximum length is 64.
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public GetDetailsForAVirtualLine200Response lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name defined for a virtual line. Minimum length is 1. Maximum length is 64.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public GetDetailsForAVirtualLine200Response displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name defined for a virtual line.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GetDetailsForAVirtualLine200Response directorySearchEnabled(Boolean directorySearchEnabled) {
    this.directorySearchEnabled = directorySearchEnabled;
    return this;
  }

  /**
   * Flag to indicate a directory search.
   * @return directorySearchEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getDirectorySearchEnabled() {
    return directorySearchEnabled;
  }

  public void setDirectorySearchEnabled(Boolean directorySearchEnabled) {
    this.directorySearchEnabled = directorySearchEnabled;
  }


  public GetDetailsForAVirtualLine200Response announcementLanguage(String announcementLanguage) {
    this.announcementLanguage = announcementLanguage;
    return this;
  }

  /**
   * Virtual Line&#39;s announcement language.
   * @return announcementLanguage
   */
  @javax.annotation.Nonnull
  public String getAnnouncementLanguage() {
    return announcementLanguage;
  }

  public void setAnnouncementLanguage(String announcementLanguage) {
    this.announcementLanguage = announcementLanguage;
  }


  public GetDetailsForAVirtualLine200Response timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone defined for the virtual line.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public GetDetailsForAVirtualLine200Response number(GetDetailsForAVirtualLine200ResponseNumber number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nonnull
  public GetDetailsForAVirtualLine200ResponseNumber getNumber() {
    return number;
  }

  public void setNumber(GetDetailsForAVirtualLine200ResponseNumber number) {
    this.number = number;
  }


  public GetDetailsForAVirtualLine200Response devices(List<Object> devices) {
    this.devices = devices;
    return this;
  }

  public GetDetailsForAVirtualLine200Response addDevicesItem(Object devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * List of devices assigned to a virtual line.
   * @return devices
   */
  @javax.annotation.Nullable
  public List<Object> getDevices() {
    return devices;
  }

  public void setDevices(List<Object> devices) {
    this.devices = devices;
  }


  public GetDetailsForAVirtualLine200Response location(GetDetailsForAVirtualLine200ResponseLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public GetDetailsForAVirtualLine200ResponseLocation getLocation() {
    return location;
  }

  public void setLocation(GetDetailsForAVirtualLine200ResponseLocation location) {
    this.location = location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDetailsForAVirtualLine200Response getDetailsForAVirtualLine200Response = (GetDetailsForAVirtualLine200Response) o;
    return Objects.equals(this.id, getDetailsForAVirtualLine200Response.id) &&
        Objects.equals(this.firstName, getDetailsForAVirtualLine200Response.firstName) &&
        Objects.equals(this.lastName, getDetailsForAVirtualLine200Response.lastName) &&
        Objects.equals(this.displayName, getDetailsForAVirtualLine200Response.displayName) &&
        Objects.equals(this.directorySearchEnabled, getDetailsForAVirtualLine200Response.directorySearchEnabled) &&
        Objects.equals(this.announcementLanguage, getDetailsForAVirtualLine200Response.announcementLanguage) &&
        Objects.equals(this.timeZone, getDetailsForAVirtualLine200Response.timeZone) &&
        Objects.equals(this.number, getDetailsForAVirtualLine200Response.number) &&
        Objects.equals(this.devices, getDetailsForAVirtualLine200Response.devices) &&
        Objects.equals(this.location, getDetailsForAVirtualLine200Response.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, displayName, directorySearchEnabled, announcementLanguage, timeZone, number, devices, location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDetailsForAVirtualLine200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    directorySearchEnabled: ").append(toIndentedString(directorySearchEnabled)).append("\n");
    sb.append("    announcementLanguage: ").append(toIndentedString(announcementLanguage)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("displayName");
    openapiFields.add("directorySearchEnabled");
    openapiFields.add("announcementLanguage");
    openapiFields.add("timeZone");
    openapiFields.add("number");
    openapiFields.add("devices");
    openapiFields.add("location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("directorySearchEnabled");
    openapiRequiredFields.add("announcementLanguage");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDetailsForAVirtualLine200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDetailsForAVirtualLine200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDetailsForAVirtualLine200Response is not found in the empty JSON string", GetDetailsForAVirtualLine200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDetailsForAVirtualLine200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDetailsForAVirtualLine200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDetailsForAVirtualLine200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("announcementLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `announcementLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("announcementLanguage").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // validate the required field `number`
      GetDetailsForAVirtualLine200ResponseNumber.validateJsonElement(jsonObj.get("number"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull() && !jsonObj.get("devices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
      }
      // validate the required field `location`
      GetDetailsForAVirtualLine200ResponseLocation.validateJsonElement(jsonObj.get("location"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDetailsForAVirtualLine200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDetailsForAVirtualLine200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDetailsForAVirtualLine200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDetailsForAVirtualLine200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDetailsForAVirtualLine200Response>() {
           @Override
           public void write(JsonWriter out, GetDetailsForAVirtualLine200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDetailsForAVirtualLine200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDetailsForAVirtualLine200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDetailsForAVirtualLine200Response
   * @throws IOException if the JSON string is invalid with respect to GetDetailsForAVirtualLine200Response
   */
  public static GetDetailsForAVirtualLine200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDetailsForAVirtualLine200Response.class);
  }

  /**
   * Convert an instance of GetDetailsForAVirtualLine200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

