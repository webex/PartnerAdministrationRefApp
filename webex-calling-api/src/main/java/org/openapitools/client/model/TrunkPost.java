// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TrunkType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrunkPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class TrunkPost {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_DUAL_IDENTITY_SUPPORT_ENABLED = "dualIdentitySupportEnabled";
  @SerializedName(SERIALIZED_NAME_DUAL_IDENTITY_SUPPORT_ENABLED)
  private Boolean dualIdentitySupportEnabled;

  public static final String SERIALIZED_NAME_TRUNK_TYPE = "trunkType";
  @SerializedName(SERIALIZED_NAME_TRUNK_TYPE)
  private TrunkType trunkType;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private BigDecimal port;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_CALLS = "maxConcurrentCalls";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_CALLS)
  private BigDecimal maxConcurrentCalls;

  public TrunkPost() {
  }

  public TrunkPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique name for the trunk.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TrunkPost locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * ID of location associated with the trunk.
   * @return locationId
   */
  @javax.annotation.Nonnull
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public TrunkPost password(String password) {
    this.password = password;
    return this;
  }

  /**
   * A password to use on the trunk.
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public TrunkPost dualIdentitySupportEnabled(Boolean dualIdentitySupportEnabled) {
    this.dualIdentitySupportEnabled = dualIdentitySupportEnabled;
    return this;
  }

  /**
   * Dual Identity Support setting impacts the handling of the From header and P-Asserted-Identity header when sending an initial SIP &#x60;INVITE&#x60; to the trunk for an outbound call.
   * @return dualIdentitySupportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDualIdentitySupportEnabled() {
    return dualIdentitySupportEnabled;
  }

  public void setDualIdentitySupportEnabled(Boolean dualIdentitySupportEnabled) {
    this.dualIdentitySupportEnabled = dualIdentitySupportEnabled;
  }


  public TrunkPost trunkType(TrunkType trunkType) {
    this.trunkType = trunkType;
    return this;
  }

  /**
   * Get trunkType
   * @return trunkType
   */
  @javax.annotation.Nonnull
  public TrunkType getTrunkType() {
    return trunkType;
  }

  public void setTrunkType(TrunkType trunkType) {
    this.trunkType = trunkType;
  }


  public TrunkPost deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Device type assosiated with trunk.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public TrunkPost address(String address) {
    this.address = address;
    return this;
  }

  /**
   * FQDN or SRV address. Required to create a static certificate-based trunk.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TrunkPost domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name. Required to create a static certificate based trunk.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public TrunkPost port(BigDecimal port) {
    this.port = port;
    return this;
  }

  /**
   * FQDN port. Required to create a static certificate-based trunk.
   * @return port
   */
  @javax.annotation.Nullable
  public BigDecimal getPort() {
    return port;
  }

  public void setPort(BigDecimal port) {
    this.port = port;
  }


  public TrunkPost maxConcurrentCalls(BigDecimal maxConcurrentCalls) {
    this.maxConcurrentCalls = maxConcurrentCalls;
    return this;
  }

  /**
   * Max Concurrent call. Required to create a static certificate based trunk.
   * @return maxConcurrentCalls
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxConcurrentCalls() {
    return maxConcurrentCalls;
  }

  public void setMaxConcurrentCalls(BigDecimal maxConcurrentCalls) {
    this.maxConcurrentCalls = maxConcurrentCalls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrunkPost trunkPost = (TrunkPost) o;
    return Objects.equals(this.name, trunkPost.name) &&
        Objects.equals(this.locationId, trunkPost.locationId) &&
        Objects.equals(this.password, trunkPost.password) &&
        Objects.equals(this.dualIdentitySupportEnabled, trunkPost.dualIdentitySupportEnabled) &&
        Objects.equals(this.trunkType, trunkPost.trunkType) &&
        Objects.equals(this.deviceType, trunkPost.deviceType) &&
        Objects.equals(this.address, trunkPost.address) &&
        Objects.equals(this.domain, trunkPost.domain) &&
        Objects.equals(this.port, trunkPost.port) &&
        Objects.equals(this.maxConcurrentCalls, trunkPost.maxConcurrentCalls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, locationId, password, dualIdentitySupportEnabled, trunkType, deviceType, address, domain, port, maxConcurrentCalls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrunkPost {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    dualIdentitySupportEnabled: ").append(toIndentedString(dualIdentitySupportEnabled)).append("\n");
    sb.append("    trunkType: ").append(toIndentedString(trunkType)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    maxConcurrentCalls: ").append(toIndentedString(maxConcurrentCalls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("locationId");
    openapiFields.add("password");
    openapiFields.add("dualIdentitySupportEnabled");
    openapiFields.add("trunkType");
    openapiFields.add("deviceType");
    openapiFields.add("address");
    openapiFields.add("domain");
    openapiFields.add("port");
    openapiFields.add("maxConcurrentCalls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("locationId");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("trunkType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrunkPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrunkPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrunkPost is not found in the empty JSON string", TrunkPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrunkPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrunkPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrunkPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the required field `trunkType`
      TrunkType.validateJsonElement(jsonObj.get("trunkType"));
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrunkPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrunkPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrunkPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrunkPost.class));

       return (TypeAdapter<T>) new TypeAdapter<TrunkPost>() {
           @Override
           public void write(JsonWriter out, TrunkPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrunkPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrunkPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrunkPost
   * @throws IOException if the JSON string is invalid with respect to TrunkPost
   */
  public static TrunkPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrunkPost.class);
  }

  /**
   * Convert an instance of TrunkPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

