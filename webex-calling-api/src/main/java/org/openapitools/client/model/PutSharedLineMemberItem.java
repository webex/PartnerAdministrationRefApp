// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.LineType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSharedLineMemberItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class PutSharedLineMemberItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private BigDecimal port;

  public static final String SERIALIZED_NAME_T38_FAX_COMPRESSION_ENABLED_BACKTICK_TRUE_BACKTICK = "t38FaxCompressionEnabled &#x60;true&#x60;";
  @SerializedName(SERIALIZED_NAME_T38_FAX_COMPRESSION_ENABLED_BACKTICK_TRUE_BACKTICK)
  private Boolean t38FaxCompressionEnabledBacktickTrueBacktick;

  public static final String SERIALIZED_NAME_PRIMARY_OWNER = "primaryOwner";
  @SerializedName(SERIALIZED_NAME_PRIMARY_OWNER)
  private String primaryOwner;

  public static final String SERIALIZED_NAME_LINE_TYPE = "lineType";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE)
  private LineType lineType;

  public static final String SERIALIZED_NAME_LINE_WEIGHT = "lineWeight";
  @SerializedName(SERIALIZED_NAME_LINE_WEIGHT)
  private BigDecimal lineWeight;

  public static final String SERIALIZED_NAME_HOTLINE_ENABLED = "hotlineEnabled";
  @SerializedName(SERIALIZED_NAME_HOTLINE_ENABLED)
  private Boolean hotlineEnabled;

  public static final String SERIALIZED_NAME_HOTLINE_DESTINATION = "hotlineDestination";
  @SerializedName(SERIALIZED_NAME_HOTLINE_DESTINATION)
  private String hotlineDestination;

  public static final String SERIALIZED_NAME_ALLOW_CALL_DECLINE_ENABLED = "allowCallDeclineEnabled";
  @SerializedName(SERIALIZED_NAME_ALLOW_CALL_DECLINE_ENABLED)
  private Boolean allowCallDeclineEnabled;

  public static final String SERIALIZED_NAME_LINE_LABEL = "lineLabel";
  @SerializedName(SERIALIZED_NAME_LINE_LABEL)
  private String lineLabel;

  public PutSharedLineMemberItem() {
  }

  public PutSharedLineMemberItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the person or workspace.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PutSharedLineMemberItem port(BigDecimal port) {
    this.port = port;
    return this;
  }

  /**
   * Device port number assigned to person or workspace.
   * @return port
   */
  @javax.annotation.Nonnull
  public BigDecimal getPort() {
    return port;
  }

  public void setPort(BigDecimal port) {
    this.port = port;
  }


  public PutSharedLineMemberItem t38FaxCompressionEnabledBacktickTrueBacktick(Boolean t38FaxCompressionEnabledBacktickTrueBacktick) {
    this.t38FaxCompressionEnabledBacktickTrueBacktick = t38FaxCompressionEnabledBacktickTrueBacktick;
    return this;
  }

  /**
   * T.38 Fax Compression setting. Valid only for ATA Devices. Overrides user level compression options.
   * @return t38FaxCompressionEnabledBacktickTrueBacktick
   */
  @javax.annotation.Nullable
  public Boolean getT38FaxCompressionEnabledBacktickTrueBacktick() {
    return t38FaxCompressionEnabledBacktickTrueBacktick;
  }

  public void setT38FaxCompressionEnabledBacktickTrueBacktick(Boolean t38FaxCompressionEnabledBacktickTrueBacktick) {
    this.t38FaxCompressionEnabledBacktickTrueBacktick = t38FaxCompressionEnabledBacktickTrueBacktick;
  }


  public PutSharedLineMemberItem primaryOwner(String primaryOwner) {
    this.primaryOwner = primaryOwner;
    return this;
  }

  /**
   * If &#x60;true&#x60; the person or the workspace is the owner of the device. Points to primary line/port of the device.
   * @return primaryOwner
   */
  @javax.annotation.Nonnull
  public String getPrimaryOwner() {
    return primaryOwner;
  }

  public void setPrimaryOwner(String primaryOwner) {
    this.primaryOwner = primaryOwner;
  }


  public PutSharedLineMemberItem lineType(LineType lineType) {
    this.lineType = lineType;
    return this;
  }

  /**
   * Indicates if the line is acting as a primary line or a shared line for this device.
   * @return lineType
   */
  @javax.annotation.Nonnull
  public LineType getLineType() {
    return lineType;
  }

  public void setLineType(LineType lineType) {
    this.lineType = lineType;
  }


  public PutSharedLineMemberItem lineWeight(BigDecimal lineWeight) {
    this.lineWeight = lineWeight;
    return this;
  }

  /**
   * Number of lines that have been configured for the person on the device.
   * @return lineWeight
   */
  @javax.annotation.Nonnull
  public BigDecimal getLineWeight() {
    return lineWeight;
  }

  public void setLineWeight(BigDecimal lineWeight) {
    this.lineWeight = lineWeight;
  }


  public PutSharedLineMemberItem hotlineEnabled(Boolean hotlineEnabled) {
    this.hotlineEnabled = hotlineEnabled;
    return this;
  }

  /**
   * Configure this line to automatically call a predefined number whenever taken off-hook. Once enabled, the line can only make calls to the predefined number set in &#x60;hotlineDestination&#x60;.
   * @return hotlineEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getHotlineEnabled() {
    return hotlineEnabled;
  }

  public void setHotlineEnabled(Boolean hotlineEnabled) {
    this.hotlineEnabled = hotlineEnabled;
  }


  public PutSharedLineMemberItem hotlineDestination(String hotlineDestination) {
    this.hotlineDestination = hotlineDestination;
    return this;
  }

  /**
   * Preconfigured number for the hotline. Required only if &#x60;hotlineEnabled&#x60; is set to &#x60;true&#x60;.
   * @return hotlineDestination
   */
  @javax.annotation.Nonnull
  public String getHotlineDestination() {
    return hotlineDestination;
  }

  public void setHotlineDestination(String hotlineDestination) {
    this.hotlineDestination = hotlineDestination;
  }


  public PutSharedLineMemberItem allowCallDeclineEnabled(Boolean allowCallDeclineEnabled) {
    this.allowCallDeclineEnabled = allowCallDeclineEnabled;
    return this;
  }

  /**
   * Set how a device behaves when a call is declined. When set to &#x60;true&#x60;, a call decline request is extended to all the endpoints on the device. When set to &#x60;false&#x60;, a call decline request is only declined at the current endpoint.
   * @return allowCallDeclineEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getAllowCallDeclineEnabled() {
    return allowCallDeclineEnabled;
  }

  public void setAllowCallDeclineEnabled(Boolean allowCallDeclineEnabled) {
    this.allowCallDeclineEnabled = allowCallDeclineEnabled;
  }


  public PutSharedLineMemberItem lineLabel(String lineLabel) {
    this.lineLabel = lineLabel;
    return this;
  }

  /**
   * Device line label.
   * @return lineLabel
   */
  @javax.annotation.Nullable
  public String getLineLabel() {
    return lineLabel;
  }

  public void setLineLabel(String lineLabel) {
    this.lineLabel = lineLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSharedLineMemberItem putSharedLineMemberItem = (PutSharedLineMemberItem) o;
    return Objects.equals(this.id, putSharedLineMemberItem.id) &&
        Objects.equals(this.port, putSharedLineMemberItem.port) &&
        Objects.equals(this.t38FaxCompressionEnabledBacktickTrueBacktick, putSharedLineMemberItem.t38FaxCompressionEnabledBacktickTrueBacktick) &&
        Objects.equals(this.primaryOwner, putSharedLineMemberItem.primaryOwner) &&
        Objects.equals(this.lineType, putSharedLineMemberItem.lineType) &&
        Objects.equals(this.lineWeight, putSharedLineMemberItem.lineWeight) &&
        Objects.equals(this.hotlineEnabled, putSharedLineMemberItem.hotlineEnabled) &&
        Objects.equals(this.hotlineDestination, putSharedLineMemberItem.hotlineDestination) &&
        Objects.equals(this.allowCallDeclineEnabled, putSharedLineMemberItem.allowCallDeclineEnabled) &&
        Objects.equals(this.lineLabel, putSharedLineMemberItem.lineLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, port, t38FaxCompressionEnabledBacktickTrueBacktick, primaryOwner, lineType, lineWeight, hotlineEnabled, hotlineDestination, allowCallDeclineEnabled, lineLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSharedLineMemberItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    t38FaxCompressionEnabledBacktickTrueBacktick: ").append(toIndentedString(t38FaxCompressionEnabledBacktickTrueBacktick)).append("\n");
    sb.append("    primaryOwner: ").append(toIndentedString(primaryOwner)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("    lineWeight: ").append(toIndentedString(lineWeight)).append("\n");
    sb.append("    hotlineEnabled: ").append(toIndentedString(hotlineEnabled)).append("\n");
    sb.append("    hotlineDestination: ").append(toIndentedString(hotlineDestination)).append("\n");
    sb.append("    allowCallDeclineEnabled: ").append(toIndentedString(allowCallDeclineEnabled)).append("\n");
    sb.append("    lineLabel: ").append(toIndentedString(lineLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("port");
    openapiFields.add("t38FaxCompressionEnabled &#x60;true&#x60;");
    openapiFields.add("primaryOwner");
    openapiFields.add("lineType");
    openapiFields.add("lineWeight");
    openapiFields.add("hotlineEnabled");
    openapiFields.add("hotlineDestination");
    openapiFields.add("allowCallDeclineEnabled");
    openapiFields.add("lineLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("primaryOwner");
    openapiRequiredFields.add("lineType");
    openapiRequiredFields.add("lineWeight");
    openapiRequiredFields.add("hotlineEnabled");
    openapiRequiredFields.add("hotlineDestination");
    openapiRequiredFields.add("allowCallDeclineEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSharedLineMemberItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSharedLineMemberItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSharedLineMemberItem is not found in the empty JSON string", PutSharedLineMemberItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSharedLineMemberItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSharedLineMemberItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutSharedLineMemberItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("primaryOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryOwner").toString()));
      }
      // validate the required field `lineType`
      LineType.validateJsonElement(jsonObj.get("lineType"));
      if (!jsonObj.get("hotlineDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotlineDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotlineDestination").toString()));
      }
      if ((jsonObj.get("lineLabel") != null && !jsonObj.get("lineLabel").isJsonNull()) && !jsonObj.get("lineLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSharedLineMemberItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSharedLineMemberItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSharedLineMemberItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSharedLineMemberItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSharedLineMemberItem>() {
           @Override
           public void write(JsonWriter out, PutSharedLineMemberItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSharedLineMemberItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSharedLineMemberItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSharedLineMemberItem
   * @throws IOException if the JSON string is invalid with respect to PutSharedLineMemberItem
   */
  public static PutSharedLineMemberItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSharedLineMemberItem.class);
  }

  /**
   * Convert an instance of PutSharedLineMemberItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

