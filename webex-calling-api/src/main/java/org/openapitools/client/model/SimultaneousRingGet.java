// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimultaneousRingCriteria;
import org.openapitools.client.model.SimultaneousRingNumberGet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimultaneousRingGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class SimultaneousRingGet {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DO_NOT_RING_IF_ON_CALL_ENABLED = "doNotRingIfOnCallEnabled";
  @SerializedName(SERIALIZED_NAME_DO_NOT_RING_IF_ON_CALL_ENABLED)
  private Boolean doNotRingIfOnCallEnabled;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<SimultaneousRingNumberGet> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private List<SimultaneousRingCriteria> criteria = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITERIAS_ENABLED = "criteriasEnabled";
  @SerializedName(SERIALIZED_NAME_CRITERIAS_ENABLED)
  private Boolean criteriasEnabled;

  public SimultaneousRingGet() {
  }

  public SimultaneousRingGet enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Simultaneous Ring is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SimultaneousRingGet doNotRingIfOnCallEnabled(Boolean doNotRingIfOnCallEnabled) {
    this.doNotRingIfOnCallEnabled = doNotRingIfOnCallEnabled;
    return this;
  }

  /**
   * When set to &#x60;true&#x60;, the configured phone numbers won&#39;t ring when on a call.
   * @return doNotRingIfOnCallEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getDoNotRingIfOnCallEnabled() {
    return doNotRingIfOnCallEnabled;
  }

  public void setDoNotRingIfOnCallEnabled(Boolean doNotRingIfOnCallEnabled) {
    this.doNotRingIfOnCallEnabled = doNotRingIfOnCallEnabled;
  }


  public SimultaneousRingGet phoneNumbers(List<SimultaneousRingNumberGet> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public SimultaneousRingGet addPhoneNumbersItem(SimultaneousRingNumberGet phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * Enter up to 10 phone numbers to ring simultaneously when a workspace phone receives an incoming call.
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<SimultaneousRingNumberGet> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<SimultaneousRingNumberGet> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public SimultaneousRingGet criteria(List<SimultaneousRingCriteria> criteria) {
    this.criteria = criteria;
    return this;
  }

  public SimultaneousRingGet addCriteriaItem(SimultaneousRingCriteria criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new ArrayList<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

  /**
   * A list of criteria specifying conditions when simultaneous ring is in effect.
   * @return criteria
   */
  @javax.annotation.Nullable
  public List<SimultaneousRingCriteria> getCriteria() {
    return criteria;
  }

  public void setCriteria(List<SimultaneousRingCriteria> criteria) {
    this.criteria = criteria;
  }


  public SimultaneousRingGet criteriasEnabled(Boolean criteriasEnabled) {
    this.criteriasEnabled = criteriasEnabled;
    return this;
  }

  /**
   * When &#x60;true&#x60;, enables the selected schedule for simultaneous ring.
   * @return criteriasEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getCriteriasEnabled() {
    return criteriasEnabled;
  }

  public void setCriteriasEnabled(Boolean criteriasEnabled) {
    this.criteriasEnabled = criteriasEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimultaneousRingGet simultaneousRingGet = (SimultaneousRingGet) o;
    return Objects.equals(this.enabled, simultaneousRingGet.enabled) &&
        Objects.equals(this.doNotRingIfOnCallEnabled, simultaneousRingGet.doNotRingIfOnCallEnabled) &&
        Objects.equals(this.phoneNumbers, simultaneousRingGet.phoneNumbers) &&
        Objects.equals(this.criteria, simultaneousRingGet.criteria) &&
        Objects.equals(this.criteriasEnabled, simultaneousRingGet.criteriasEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, doNotRingIfOnCallEnabled, phoneNumbers, criteria, criteriasEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimultaneousRingGet {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    doNotRingIfOnCallEnabled: ").append(toIndentedString(doNotRingIfOnCallEnabled)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    criteriasEnabled: ").append(toIndentedString(criteriasEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("doNotRingIfOnCallEnabled");
    openapiFields.add("phoneNumbers");
    openapiFields.add("criteria");
    openapiFields.add("criteriasEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("doNotRingIfOnCallEnabled");
    openapiRequiredFields.add("criteriasEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimultaneousRingGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimultaneousRingGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimultaneousRingGet is not found in the empty JSON string", SimultaneousRingGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimultaneousRingGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimultaneousRingGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimultaneousRingGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            SimultaneousRingNumberGet.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if (jsonObj.get("criteria") != null && !jsonObj.get("criteria").isJsonNull()) {
        JsonArray jsonArraycriteria = jsonObj.getAsJsonArray("criteria");
        if (jsonArraycriteria != null) {
          // ensure the json data is an array
          if (!jsonObj.get("criteria").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `criteria` to be an array in the JSON string but got `%s`", jsonObj.get("criteria").toString()));
          }

          // validate the optional field `criteria` (array)
          for (int i = 0; i < jsonArraycriteria.size(); i++) {
            SimultaneousRingCriteria.validateJsonElement(jsonArraycriteria.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimultaneousRingGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimultaneousRingGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimultaneousRingGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimultaneousRingGet.class));

       return (TypeAdapter<T>) new TypeAdapter<SimultaneousRingGet>() {
           @Override
           public void write(JsonWriter out, SimultaneousRingGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimultaneousRingGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimultaneousRingGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimultaneousRingGet
   * @throws IOException if the JSON string is invalid with respect to SimultaneousRingGet
   */
  public static SimultaneousRingGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimultaneousRingGet.class);
  }

  /**
   * Convert an instance of SimultaneousRingGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

