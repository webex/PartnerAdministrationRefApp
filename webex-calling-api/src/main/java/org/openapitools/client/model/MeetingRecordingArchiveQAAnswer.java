// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeetingRecordingArchiveQAAnswer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class MeetingRecordingArchiveQAAnswer {
  public static final String SERIALIZED_NAME_RESPONSE_MODE = "responseMode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODE)
  private String responseMode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private BigDecimal correlationId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ANSWER_TIME = "answerTime";
  @SerializedName(SERIALIZED_NAME_ANSWER_TIME)
  private String answerTime;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public MeetingRecordingArchiveQAAnswer() {
  }

  public MeetingRecordingArchiveQAAnswer responseMode(String responseMode) {
    this.responseMode = responseMode;
    return this;
  }

  /**
   * The answer&#39;s response mode.
   * @return responseMode
   */
  @javax.annotation.Nullable
  public String getResponseMode() {
    return responseMode;
  }

  public void setResponseMode(String responseMode) {
    this.responseMode = responseMode;
  }


  public MeetingRecordingArchiveQAAnswer displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the person who answered the question.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MeetingRecordingArchiveQAAnswer correlationId(BigDecimal correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * An internal ID that is associated with the answer&#39;s each join.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public BigDecimal getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(BigDecimal correlationId) {
    this.correlationId = correlationId;
  }


  public MeetingRecordingArchiveQAAnswer email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the person who answered the question.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public MeetingRecordingArchiveQAAnswer answerTime(String answerTime) {
    this.answerTime = answerTime;
    return this;
  }

  /**
   * The date and time the question answered in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant format.
   * @return answerTime
   */
  @javax.annotation.Nullable
  public String getAnswerTime() {
    return answerTime;
  }

  public void setAnswerTime(String answerTime) {
    this.answerTime = answerTime;
  }


  public MeetingRecordingArchiveQAAnswer text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text of the answer.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingRecordingArchiveQAAnswer meetingRecordingArchiveQAAnswer = (MeetingRecordingArchiveQAAnswer) o;
    return Objects.equals(this.responseMode, meetingRecordingArchiveQAAnswer.responseMode) &&
        Objects.equals(this.displayName, meetingRecordingArchiveQAAnswer.displayName) &&
        Objects.equals(this.correlationId, meetingRecordingArchiveQAAnswer.correlationId) &&
        Objects.equals(this.email, meetingRecordingArchiveQAAnswer.email) &&
        Objects.equals(this.answerTime, meetingRecordingArchiveQAAnswer.answerTime) &&
        Objects.equals(this.text, meetingRecordingArchiveQAAnswer.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseMode, displayName, correlationId, email, answerTime, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingRecordingArchiveQAAnswer {\n");
    sb.append("    responseMode: ").append(toIndentedString(responseMode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    answerTime: ").append(toIndentedString(answerTime)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseMode");
    openapiFields.add("displayName");
    openapiFields.add("correlationId");
    openapiFields.add("email");
    openapiFields.add("answerTime");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingRecordingArchiveQAAnswer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingRecordingArchiveQAAnswer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingRecordingArchiveQAAnswer is not found in the empty JSON string", MeetingRecordingArchiveQAAnswer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingRecordingArchiveQAAnswer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingRecordingArchiveQAAnswer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseMode") != null && !jsonObj.get("responseMode").isJsonNull()) && !jsonObj.get("responseMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseMode").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("answerTime") != null && !jsonObj.get("answerTime").isJsonNull()) && !jsonObj.get("answerTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerTime").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingRecordingArchiveQAAnswer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingRecordingArchiveQAAnswer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingRecordingArchiveQAAnswer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingRecordingArchiveQAAnswer.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingRecordingArchiveQAAnswer>() {
           @Override
           public void write(JsonWriter out, MeetingRecordingArchiveQAAnswer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingRecordingArchiveQAAnswer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingRecordingArchiveQAAnswer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingRecordingArchiveQAAnswer
   * @throws IOException if the JSON string is invalid with respect to MeetingRecordingArchiveQAAnswer
   */
  public static MeetingRecordingArchiveQAAnswer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingRecordingArchiveQAAnswer.class);
  }

  /**
   * Convert an instance of MeetingRecordingArchiveQAAnswer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

