// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataCallActivityInner;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataCallingParty;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataRecordingActionsInner;
import org.openapitools.client.model.GetRecordingMetadata200ResponseServiceDataSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRecordingMetadata200ResponseServiceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetRecordingMetadata200ResponseServiceData {
  public static final String SERIALIZED_NAME_CALL_RECORDING_ID = "callRecordingId";
  @SerializedName(SERIALIZED_NAME_CALL_RECORDING_ID)
  private String callRecordingId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_CALL_SESSION_ID = "callSessionId";
  @SerializedName(SERIALIZED_NAME_CALL_SESSION_ID)
  private String callSessionId;

  public static final String SERIALIZED_NAME_PERSONALITY = "personality";
  @SerializedName(SERIALIZED_NAME_PERSONALITY)
  private String personality;

  public static final String SERIALIZED_NAME_CALLING_PARTY = "callingParty";
  @SerializedName(SERIALIZED_NAME_CALLING_PARTY)
  private GetRecordingMetadata200ResponseServiceDataCallingParty callingParty;

  public static final String SERIALIZED_NAME_CALLED_PARTY = "calledParty";
  @SerializedName(SERIALIZED_NAME_CALLED_PARTY)
  private GetRecordingMetadata200ResponseServiceDataCallingParty calledParty;

  public static final String SERIALIZED_NAME_CALL_ID = "callId";
  @SerializedName(SERIALIZED_NAME_CALL_ID)
  private String callId;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private GetRecordingMetadata200ResponseServiceDataSession session;

  public static final String SERIALIZED_NAME_RECORDING_TYPE = "recordingType";
  @SerializedName(SERIALIZED_NAME_RECORDING_TYPE)
  private String recordingType;

  public static final String SERIALIZED_NAME_ANSWERER_INFO = "answererInfo";
  @SerializedName(SERIALIZED_NAME_ANSWERER_INFO)
  private GetRecordingMetadata200ResponseServiceDataCallingParty answererInfo;

  public static final String SERIALIZED_NAME_RECORDING_ACTIONS = "recordingActions";
  @SerializedName(SERIALIZED_NAME_RECORDING_ACTIONS)
  private List<GetRecordingMetadata200ResponseServiceDataRecordingActionsInner> recordingActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALL_ACTIVITY = "callActivity";
  @SerializedName(SERIALIZED_NAME_CALL_ACTIVITY)
  private List<GetRecordingMetadata200ResponseServiceDataCallActivityInner> callActivity = new ArrayList<>();

  public GetRecordingMetadata200ResponseServiceData() {
  }

  public GetRecordingMetadata200ResponseServiceData callRecordingId(String callRecordingId) {
    this.callRecordingId = callRecordingId;
    return this;
  }

  /**
   * Get callRecordingId
   * @return callRecordingId
   */
  @javax.annotation.Nullable
  public String getCallRecordingId() {
    return callRecordingId;
  }

  public void setCallRecordingId(String callRecordingId) {
    this.callRecordingId = callRecordingId;
  }


  public GetRecordingMetadata200ResponseServiceData locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Get locationId
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public GetRecordingMetadata200ResponseServiceData callSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
    return this;
  }

  /**
   * Get callSessionId
   * @return callSessionId
   */
  @javax.annotation.Nullable
  public String getCallSessionId() {
    return callSessionId;
  }

  public void setCallSessionId(String callSessionId) {
    this.callSessionId = callSessionId;
  }


  public GetRecordingMetadata200ResponseServiceData personality(String personality) {
    this.personality = personality;
    return this;
  }

  /**
   * Get personality
   * @return personality
   */
  @javax.annotation.Nullable
  public String getPersonality() {
    return personality;
  }

  public void setPersonality(String personality) {
    this.personality = personality;
  }


  public GetRecordingMetadata200ResponseServiceData callingParty(GetRecordingMetadata200ResponseServiceDataCallingParty callingParty) {
    this.callingParty = callingParty;
    return this;
  }

  /**
   * Get callingParty
   * @return callingParty
   */
  @javax.annotation.Nullable
  public GetRecordingMetadata200ResponseServiceDataCallingParty getCallingParty() {
    return callingParty;
  }

  public void setCallingParty(GetRecordingMetadata200ResponseServiceDataCallingParty callingParty) {
    this.callingParty = callingParty;
  }


  public GetRecordingMetadata200ResponseServiceData calledParty(GetRecordingMetadata200ResponseServiceDataCallingParty calledParty) {
    this.calledParty = calledParty;
    return this;
  }

  /**
   * Get calledParty
   * @return calledParty
   */
  @javax.annotation.Nullable
  public GetRecordingMetadata200ResponseServiceDataCallingParty getCalledParty() {
    return calledParty;
  }

  public void setCalledParty(GetRecordingMetadata200ResponseServiceDataCallingParty calledParty) {
    this.calledParty = calledParty;
  }


  public GetRecordingMetadata200ResponseServiceData callId(String callId) {
    this.callId = callId;
    return this;
  }

  /**
   * Get callId
   * @return callId
   */
  @javax.annotation.Nullable
  public String getCallId() {
    return callId;
  }

  public void setCallId(String callId) {
    this.callId = callId;
  }


  public GetRecordingMetadata200ResponseServiceData session(GetRecordingMetadata200ResponseServiceDataSession session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public GetRecordingMetadata200ResponseServiceDataSession getSession() {
    return session;
  }

  public void setSession(GetRecordingMetadata200ResponseServiceDataSession session) {
    this.session = session;
  }


  public GetRecordingMetadata200ResponseServiceData recordingType(String recordingType) {
    this.recordingType = recordingType;
    return this;
  }

  /**
   * Get recordingType
   * @return recordingType
   */
  @javax.annotation.Nullable
  public String getRecordingType() {
    return recordingType;
  }

  public void setRecordingType(String recordingType) {
    this.recordingType = recordingType;
  }


  public GetRecordingMetadata200ResponseServiceData answererInfo(GetRecordingMetadata200ResponseServiceDataCallingParty answererInfo) {
    this.answererInfo = answererInfo;
    return this;
  }

  /**
   * Get answererInfo
   * @return answererInfo
   */
  @javax.annotation.Nullable
  public GetRecordingMetadata200ResponseServiceDataCallingParty getAnswererInfo() {
    return answererInfo;
  }

  public void setAnswererInfo(GetRecordingMetadata200ResponseServiceDataCallingParty answererInfo) {
    this.answererInfo = answererInfo;
  }


  public GetRecordingMetadata200ResponseServiceData recordingActions(List<GetRecordingMetadata200ResponseServiceDataRecordingActionsInner> recordingActions) {
    this.recordingActions = recordingActions;
    return this;
  }

  public GetRecordingMetadata200ResponseServiceData addRecordingActionsItem(GetRecordingMetadata200ResponseServiceDataRecordingActionsInner recordingActionsItem) {
    if (this.recordingActions == null) {
      this.recordingActions = new ArrayList<>();
    }
    this.recordingActions.add(recordingActionsItem);
    return this;
  }

  /**
   * Get recordingActions
   * @return recordingActions
   */
  @javax.annotation.Nullable
  public List<GetRecordingMetadata200ResponseServiceDataRecordingActionsInner> getRecordingActions() {
    return recordingActions;
  }

  public void setRecordingActions(List<GetRecordingMetadata200ResponseServiceDataRecordingActionsInner> recordingActions) {
    this.recordingActions = recordingActions;
  }


  public GetRecordingMetadata200ResponseServiceData callActivity(List<GetRecordingMetadata200ResponseServiceDataCallActivityInner> callActivity) {
    this.callActivity = callActivity;
    return this;
  }

  public GetRecordingMetadata200ResponseServiceData addCallActivityItem(GetRecordingMetadata200ResponseServiceDataCallActivityInner callActivityItem) {
    if (this.callActivity == null) {
      this.callActivity = new ArrayList<>();
    }
    this.callActivity.add(callActivityItem);
    return this;
  }

  /**
   * Get callActivity
   * @return callActivity
   */
  @javax.annotation.Nullable
  public List<GetRecordingMetadata200ResponseServiceDataCallActivityInner> getCallActivity() {
    return callActivity;
  }

  public void setCallActivity(List<GetRecordingMetadata200ResponseServiceDataCallActivityInner> callActivity) {
    this.callActivity = callActivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecordingMetadata200ResponseServiceData getRecordingMetadata200ResponseServiceData = (GetRecordingMetadata200ResponseServiceData) o;
    return Objects.equals(this.callRecordingId, getRecordingMetadata200ResponseServiceData.callRecordingId) &&
        Objects.equals(this.locationId, getRecordingMetadata200ResponseServiceData.locationId) &&
        Objects.equals(this.callSessionId, getRecordingMetadata200ResponseServiceData.callSessionId) &&
        Objects.equals(this.personality, getRecordingMetadata200ResponseServiceData.personality) &&
        Objects.equals(this.callingParty, getRecordingMetadata200ResponseServiceData.callingParty) &&
        Objects.equals(this.calledParty, getRecordingMetadata200ResponseServiceData.calledParty) &&
        Objects.equals(this.callId, getRecordingMetadata200ResponseServiceData.callId) &&
        Objects.equals(this.session, getRecordingMetadata200ResponseServiceData.session) &&
        Objects.equals(this.recordingType, getRecordingMetadata200ResponseServiceData.recordingType) &&
        Objects.equals(this.answererInfo, getRecordingMetadata200ResponseServiceData.answererInfo) &&
        Objects.equals(this.recordingActions, getRecordingMetadata200ResponseServiceData.recordingActions) &&
        Objects.equals(this.callActivity, getRecordingMetadata200ResponseServiceData.callActivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callRecordingId, locationId, callSessionId, personality, callingParty, calledParty, callId, session, recordingType, answererInfo, recordingActions, callActivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecordingMetadata200ResponseServiceData {\n");
    sb.append("    callRecordingId: ").append(toIndentedString(callRecordingId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    callSessionId: ").append(toIndentedString(callSessionId)).append("\n");
    sb.append("    personality: ").append(toIndentedString(personality)).append("\n");
    sb.append("    callingParty: ").append(toIndentedString(callingParty)).append("\n");
    sb.append("    calledParty: ").append(toIndentedString(calledParty)).append("\n");
    sb.append("    callId: ").append(toIndentedString(callId)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    recordingType: ").append(toIndentedString(recordingType)).append("\n");
    sb.append("    answererInfo: ").append(toIndentedString(answererInfo)).append("\n");
    sb.append("    recordingActions: ").append(toIndentedString(recordingActions)).append("\n");
    sb.append("    callActivity: ").append(toIndentedString(callActivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callRecordingId");
    openapiFields.add("locationId");
    openapiFields.add("callSessionId");
    openapiFields.add("personality");
    openapiFields.add("callingParty");
    openapiFields.add("calledParty");
    openapiFields.add("callId");
    openapiFields.add("session");
    openapiFields.add("recordingType");
    openapiFields.add("answererInfo");
    openapiFields.add("recordingActions");
    openapiFields.add("callActivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecordingMetadata200ResponseServiceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecordingMetadata200ResponseServiceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecordingMetadata200ResponseServiceData is not found in the empty JSON string", GetRecordingMetadata200ResponseServiceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecordingMetadata200ResponseServiceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecordingMetadata200ResponseServiceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callRecordingId") != null && !jsonObj.get("callRecordingId").isJsonNull()) && !jsonObj.get("callRecordingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callRecordingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callRecordingId").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("callSessionId") != null && !jsonObj.get("callSessionId").isJsonNull()) && !jsonObj.get("callSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callSessionId").toString()));
      }
      if ((jsonObj.get("personality") != null && !jsonObj.get("personality").isJsonNull()) && !jsonObj.get("personality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personality").toString()));
      }
      // validate the optional field `callingParty`
      if (jsonObj.get("callingParty") != null && !jsonObj.get("callingParty").isJsonNull()) {
        GetRecordingMetadata200ResponseServiceDataCallingParty.validateJsonElement(jsonObj.get("callingParty"));
      }
      // validate the optional field `calledParty`
      if (jsonObj.get("calledParty") != null && !jsonObj.get("calledParty").isJsonNull()) {
        GetRecordingMetadata200ResponseServiceDataCallingParty.validateJsonElement(jsonObj.get("calledParty"));
      }
      if ((jsonObj.get("callId") != null && !jsonObj.get("callId").isJsonNull()) && !jsonObj.get("callId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callId").toString()));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        GetRecordingMetadata200ResponseServiceDataSession.validateJsonElement(jsonObj.get("session"));
      }
      if ((jsonObj.get("recordingType") != null && !jsonObj.get("recordingType").isJsonNull()) && !jsonObj.get("recordingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordingType").toString()));
      }
      // validate the optional field `answererInfo`
      if (jsonObj.get("answererInfo") != null && !jsonObj.get("answererInfo").isJsonNull()) {
        GetRecordingMetadata200ResponseServiceDataCallingParty.validateJsonElement(jsonObj.get("answererInfo"));
      }
      if (jsonObj.get("recordingActions") != null && !jsonObj.get("recordingActions").isJsonNull()) {
        JsonArray jsonArrayrecordingActions = jsonObj.getAsJsonArray("recordingActions");
        if (jsonArrayrecordingActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordingActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordingActions` to be an array in the JSON string but got `%s`", jsonObj.get("recordingActions").toString()));
          }

          // validate the optional field `recordingActions` (array)
          for (int i = 0; i < jsonArrayrecordingActions.size(); i++) {
            GetRecordingMetadata200ResponseServiceDataRecordingActionsInner.validateJsonElement(jsonArrayrecordingActions.get(i));
          };
        }
      }
      if (jsonObj.get("callActivity") != null && !jsonObj.get("callActivity").isJsonNull()) {
        JsonArray jsonArraycallActivity = jsonObj.getAsJsonArray("callActivity");
        if (jsonArraycallActivity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("callActivity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `callActivity` to be an array in the JSON string but got `%s`", jsonObj.get("callActivity").toString()));
          }

          // validate the optional field `callActivity` (array)
          for (int i = 0; i < jsonArraycallActivity.size(); i++) {
            GetRecordingMetadata200ResponseServiceDataCallActivityInner.validateJsonElement(jsonArraycallActivity.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecordingMetadata200ResponseServiceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecordingMetadata200ResponseServiceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecordingMetadata200ResponseServiceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecordingMetadata200ResponseServiceData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecordingMetadata200ResponseServiceData>() {
           @Override
           public void write(JsonWriter out, GetRecordingMetadata200ResponseServiceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecordingMetadata200ResponseServiceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecordingMetadata200ResponseServiceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecordingMetadata200ResponseServiceData
   * @throws IOException if the JSON string is invalid with respect to GetRecordingMetadata200ResponseServiceData
   */
  public static GetRecordingMetadata200ResponseServiceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecordingMetadata200ResponseServiceData.class);
  }

  /**
   * Convert an instance of GetRecordingMetadata200ResponseServiceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

