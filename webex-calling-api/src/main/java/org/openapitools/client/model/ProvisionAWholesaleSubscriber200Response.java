// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProvisionAWholesaleSubscriber200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ProvisionAWholesaleSubscriber200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "externalCustomerId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  /**
   * The Webex Wholesale Package assigned to the subscriber.
   */
  @JsonAdapter(PackageEnum.Adapter.class)
  public enum PackageEnum {
    WEBEX_CALLING("webex_calling"),
    
    WEBEX_MEETINGS("webex_meetings"),
    
    WEBEX_SUITE("webex_suite"),
    
    WEBEX_VOICE("webex_voice"),
    
    CX_ESSENTIALS("cx_essentials");

    private String value;

    PackageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageEnum fromValue(String value) {
      for (PackageEnum b : PackageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private PackageEnum _package;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<Object> packages = new ArrayList<>();

  /**
   * The provisioning status of the user.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROVISIONED("provisioned"),
    
    PENDING_USER_MIGRATION("pending_user_migration");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Object> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_LAST_STATUS_CHANGE = "lastStatusChange";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_CHANGE)
  private String lastStatusChange;

  public ProvisionAWholesaleSubscriber200Response() {
  }

  public ProvisionAWholesaleSubscriber200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique Cisco identifier for the subscriber.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProvisionAWholesaleSubscriber200Response personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * The person id of the subscriber used in the /people API. Only presented when status is &#x60;provisioned&#x60;.
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public ProvisionAWholesaleSubscriber200Response email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the subscriber.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ProvisionAWholesaleSubscriber200Response customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * A unique identifier for the customer.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public ProvisionAWholesaleSubscriber200Response externalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
    return this;
  }

  /**
   * External ID of the Wholesale customer.
   * @return externalCustomerId
   */
  @javax.annotation.Nullable
  public String getExternalCustomerId() {
    return externalCustomerId;
  }

  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public ProvisionAWholesaleSubscriber200Response _package(PackageEnum _package) {
    this._package = _package;
    return this;
  }

  /**
   * The Webex Wholesale Package assigned to the subscriber.
   * @return _package
   */
  @javax.annotation.Nullable
  public PackageEnum getPackage() {
    return _package;
  }

  public void setPackage(PackageEnum _package) {
    this._package = _package;
  }


  public ProvisionAWholesaleSubscriber200Response packages(List<Object> packages) {
    this.packages = packages;
    return this;
  }

  public ProvisionAWholesaleSubscriber200Response addPackagesItem(Object packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The list of Webex Wholesale packages assigned to the subscriber.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<Object> getPackages() {
    return packages;
  }

  public void setPackages(List<Object> packages) {
    this.packages = packages;
  }


  public ProvisionAWholesaleSubscriber200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The provisioning status of the user.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ProvisionAWholesaleSubscriber200Response errors(List<Object> errors) {
    this.errors = errors;
    return this;
  }

  public ProvisionAWholesaleSubscriber200Response addErrorsItem(Object errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * List of errors that occurred during that last attempt to provision/update this subscriber.   *Note:*  + This list captures errors that occurred during provisioning of the subscriber.  + Any errors that occur during initial API request validation will be captured directly in error response with appropriate HTTP status code.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Object> getErrors() {
    return errors;
  }

  public void setErrors(List<Object> errors) {
    this.errors = errors;
  }


  public ProvisionAWholesaleSubscriber200Response created(String created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time the subscriber was provisioned.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public ProvisionAWholesaleSubscriber200Response lastStatusChange(String lastStatusChange) {
    this.lastStatusChange = lastStatusChange;
    return this;
  }

  /**
   * The date and time the provisioning status of the subscriber last changed.
   * @return lastStatusChange
   */
  @javax.annotation.Nullable
  public String getLastStatusChange() {
    return lastStatusChange;
  }

  public void setLastStatusChange(String lastStatusChange) {
    this.lastStatusChange = lastStatusChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionAWholesaleSubscriber200Response provisionAWholesaleSubscriber200Response = (ProvisionAWholesaleSubscriber200Response) o;
    return Objects.equals(this.id, provisionAWholesaleSubscriber200Response.id) &&
        Objects.equals(this.personId, provisionAWholesaleSubscriber200Response.personId) &&
        Objects.equals(this.email, provisionAWholesaleSubscriber200Response.email) &&
        Objects.equals(this.customerId, provisionAWholesaleSubscriber200Response.customerId) &&
        Objects.equals(this.externalCustomerId, provisionAWholesaleSubscriber200Response.externalCustomerId) &&
        Objects.equals(this._package, provisionAWholesaleSubscriber200Response._package) &&
        Objects.equals(this.packages, provisionAWholesaleSubscriber200Response.packages) &&
        Objects.equals(this.status, provisionAWholesaleSubscriber200Response.status) &&
        Objects.equals(this.errors, provisionAWholesaleSubscriber200Response.errors) &&
        Objects.equals(this.created, provisionAWholesaleSubscriber200Response.created) &&
        Objects.equals(this.lastStatusChange, provisionAWholesaleSubscriber200Response.lastStatusChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, personId, email, customerId, externalCustomerId, _package, packages, status, errors, created, lastStatusChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionAWholesaleSubscriber200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastStatusChange: ").append(toIndentedString(lastStatusChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("personId");
    openapiFields.add("email");
    openapiFields.add("customerId");
    openapiFields.add("externalCustomerId");
    openapiFields.add("package");
    openapiFields.add("packages");
    openapiFields.add("status");
    openapiFields.add("errors");
    openapiFields.add("created");
    openapiFields.add("lastStatusChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionAWholesaleSubscriber200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionAWholesaleSubscriber200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionAWholesaleSubscriber200Response is not found in the empty JSON string", ProvisionAWholesaleSubscriber200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionAWholesaleSubscriber200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionAWholesaleSubscriber200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("externalCustomerId") != null && !jsonObj.get("externalCustomerId").isJsonNull()) && !jsonObj.get("externalCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalCustomerId").toString()));
      }
      if ((jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) && !jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        PackageEnum.validateJsonElement(jsonObj.get("package"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull() && !jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull() && !jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("lastStatusChange") != null && !jsonObj.get("lastStatusChange").isJsonNull()) && !jsonObj.get("lastStatusChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastStatusChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastStatusChange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionAWholesaleSubscriber200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionAWholesaleSubscriber200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionAWholesaleSubscriber200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionAWholesaleSubscriber200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionAWholesaleSubscriber200Response>() {
           @Override
           public void write(JsonWriter out, ProvisionAWholesaleSubscriber200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionAWholesaleSubscriber200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionAWholesaleSubscriber200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionAWholesaleSubscriber200Response
   * @throws IOException if the JSON string is invalid with respect to ProvisionAWholesaleSubscriber200Response
   */
  public static ProvisionAWholesaleSubscriber200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionAWholesaleSubscriber200Response.class);
  }

  /**
   * Convert an instance of ProvisionAWholesaleSubscriber200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

