// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestCallRouting200ResponseCallSourceInfo;
import org.openapitools.client.model.TestCallRouting200ResponseEmergency;
import org.openapitools.client.model.TestCallRouting200ResponseFeatureAccessCode;
import org.openapitools.client.model.TestCallRouting200ResponseHostedAgent;
import org.openapitools.client.model.TestCallRouting200ResponseHostedFeature;
import org.openapitools.client.model.TestCallRouting200ResponsePbxUser;
import org.openapitools.client.model.TestCallRouting200ResponsePstnNumber;
import org.openapitools.client.model.TestCallRouting200ResponseRepair;
import org.openapitools.client.model.TestCallRouting200ResponseRouteList;
import org.openapitools.client.model.TestCallRouting200ResponseUnknownExtension;
import org.openapitools.client.model.TestCallRouting200ResponseUnknownNumber;
import org.openapitools.client.model.TestCallRouting200ResponseVirtualExtension;
import org.openapitools.client.model.TestCallRouting200ResponseVirtualExtensionRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestCallRouting200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class TestCallRouting200Response {
  public static final String SERIALIZED_NAME_CALL_SOURCE_INFO = "callSourceInfo";
  @SerializedName(SERIALIZED_NAME_CALL_SOURCE_INFO)
  private TestCallRouting200ResponseCallSourceInfo callSourceInfo;

  /**
   * Destination type for the call.
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    HOSTED_AGENT("HOSTED_AGENT"),
    
    HOSTED_FEATURE("HOSTED_FEATURE"),
    
    PBX_USER("PBX_USER"),
    
    PSTN_NUMBER("PSTN_NUMBER"),
    
    VIRTUAL_EXTENSION("VIRTUAL_EXTENSION"),
    
    VIRTUAL_EXTENSION_RANGE("VIRTUAL_EXTENSION_RANGE"),
    
    ROUTE_LIST("ROUTE_LIST"),
    
    FAC("FAC"),
    
    EMERGENCY("EMERGENCY"),
    
    REPAIR("REPAIR"),
    
    UNKNOWN_EXTENSION("UNKNOWN_EXTENSION"),
    
    UNKNOWN_NUMBER("UNKNOWN_NUMBER"),
    
    HOSTED_AGENT2("HOSTED_AGENT");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destinationType";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType;

  public static final String SERIALIZED_NAME_ROUTING_ADDRESS = "routingAddress";
  @SerializedName(SERIALIZED_NAME_ROUTING_ADDRESS)
  private String routingAddress;

  public static final String SERIALIZED_NAME_OUTSIDE_ACCESS_CODE = "outsideAccessCode";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_ACCESS_CODE)
  private String outsideAccessCode;

  public static final String SERIALIZED_NAME_IS_REJECTED = "isRejected";
  @SerializedName(SERIALIZED_NAME_IS_REJECTED)
  private Boolean isRejected;

  public static final String SERIALIZED_NAME_CALLING_LINE_I_D = "callingLineID";
  @SerializedName(SERIALIZED_NAME_CALLING_LINE_I_D)
  private String callingLineID;

  public static final String SERIALIZED_NAME_ROUTING_PROFILE = "routingProfile";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILE)
  private String routingProfile;

  public static final String SERIALIZED_NAME_HOSTED_AGENT = "hostedAgent";
  @SerializedName(SERIALIZED_NAME_HOSTED_AGENT)
  private TestCallRouting200ResponseHostedAgent hostedAgent;

  public static final String SERIALIZED_NAME_HOSTED_FEATURE = "hostedFeature";
  @SerializedName(SERIALIZED_NAME_HOSTED_FEATURE)
  private TestCallRouting200ResponseHostedFeature hostedFeature;

  public static final String SERIALIZED_NAME_PBX_USER = "pbxUser";
  @SerializedName(SERIALIZED_NAME_PBX_USER)
  private TestCallRouting200ResponsePbxUser pbxUser;

  public static final String SERIALIZED_NAME_PSTN_NUMBER = "pstnNumber";
  @SerializedName(SERIALIZED_NAME_PSTN_NUMBER)
  private TestCallRouting200ResponsePstnNumber pstnNumber;

  public static final String SERIALIZED_NAME_VIRTUAL_EXTENSION = "virtualExtension";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_EXTENSION)
  private TestCallRouting200ResponseVirtualExtension virtualExtension;

  public static final String SERIALIZED_NAME_VIRTUAL_EXTENSION_RANGE = "virtualExtensionRange";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_EXTENSION_RANGE)
  private TestCallRouting200ResponseVirtualExtensionRange virtualExtensionRange;

  public static final String SERIALIZED_NAME_ROUTE_LIST = "routeList";
  @SerializedName(SERIALIZED_NAME_ROUTE_LIST)
  private TestCallRouting200ResponseRouteList routeList;

  public static final String SERIALIZED_NAME_FEATURE_ACCESS_CODE = "featureAccessCode";
  @SerializedName(SERIALIZED_NAME_FEATURE_ACCESS_CODE)
  private TestCallRouting200ResponseFeatureAccessCode featureAccessCode;

  public static final String SERIALIZED_NAME_EMERGENCY = "emergency";
  @SerializedName(SERIALIZED_NAME_EMERGENCY)
  private TestCallRouting200ResponseEmergency emergency;

  public static final String SERIALIZED_NAME_REPAIR = "repair";
  @SerializedName(SERIALIZED_NAME_REPAIR)
  private TestCallRouting200ResponseRepair repair;

  public static final String SERIALIZED_NAME_UNKNOWN_EXTENSION = "unknownExtension";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_EXTENSION)
  private TestCallRouting200ResponseUnknownExtension unknownExtension;

  public static final String SERIALIZED_NAME_UNKNOWN_NUMBER = "unknownNumber";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_NUMBER)
  private TestCallRouting200ResponseUnknownNumber unknownNumber;

  public static final String SERIALIZED_NAME_APPLIED_SERVICES = "appliedServices";
  @SerializedName(SERIALIZED_NAME_APPLIED_SERVICES)
  private List<Object> appliedServices = new ArrayList<>();

  public TestCallRouting200Response() {
  }

  public TestCallRouting200Response callSourceInfo(TestCallRouting200ResponseCallSourceInfo callSourceInfo) {
    this.callSourceInfo = callSourceInfo;
    return this;
  }

  /**
   * Get callSourceInfo
   * @return callSourceInfo
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseCallSourceInfo getCallSourceInfo() {
    return callSourceInfo;
  }

  public void setCallSourceInfo(TestCallRouting200ResponseCallSourceInfo callSourceInfo) {
    this.callSourceInfo = callSourceInfo;
  }


  public TestCallRouting200Response destinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * Destination type for the call.
   * @return destinationType
   */
  @javax.annotation.Nonnull
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public TestCallRouting200Response routingAddress(String routingAddress) {
    this.routingAddress = routingAddress;
    return this;
  }

  /**
   * FAC code if &#x60;destinationType&#x60; is FAC. The routing address will be returned for all other destination types.
   * @return routingAddress
   */
  @javax.annotation.Nonnull
  public String getRoutingAddress() {
    return routingAddress;
  }

  public void setRoutingAddress(String routingAddress) {
    this.routingAddress = routingAddress;
  }


  public TestCallRouting200Response outsideAccessCode(String outsideAccessCode) {
    this.outsideAccessCode = outsideAccessCode;
    return this;
  }

  /**
   * Outside access code.
   * @return outsideAccessCode
   */
  @javax.annotation.Nullable
  public String getOutsideAccessCode() {
    return outsideAccessCode;
  }

  public void setOutsideAccessCode(String outsideAccessCode) {
    this.outsideAccessCode = outsideAccessCode;
  }


  public TestCallRouting200Response isRejected(Boolean isRejected) {
    this.isRejected = isRejected;
    return this;
  }

  /**
   * &#x60;true&#x60; if the call would be rejected.
   * @return isRejected
   */
  @javax.annotation.Nonnull
  public Boolean getIsRejected() {
    return isRejected;
  }

  public void setIsRejected(Boolean isRejected) {
    this.isRejected = isRejected;
  }


  public TestCallRouting200Response callingLineID(String callingLineID) {
    this.callingLineID = callingLineID;
    return this;
  }

  /**
   * Calling line ID (CLID) configured for the calling user.
   * @return callingLineID
   */
  @javax.annotation.Nullable
  public String getCallingLineID() {
    return callingLineID;
  }

  public void setCallingLineID(String callingLineID) {
    this.callingLineID = callingLineID;
  }


  public TestCallRouting200Response routingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
    return this;
  }

  /**
   * Routing profile that is used to route network calls.
   * @return routingProfile
   */
  @javax.annotation.Nullable
  public String getRoutingProfile() {
    return routingProfile;
  }

  public void setRoutingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
  }


  public TestCallRouting200Response hostedAgent(TestCallRouting200ResponseHostedAgent hostedAgent) {
    this.hostedAgent = hostedAgent;
    return this;
  }

  /**
   * Get hostedAgent
   * @return hostedAgent
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseHostedAgent getHostedAgent() {
    return hostedAgent;
  }

  public void setHostedAgent(TestCallRouting200ResponseHostedAgent hostedAgent) {
    this.hostedAgent = hostedAgent;
  }


  public TestCallRouting200Response hostedFeature(TestCallRouting200ResponseHostedFeature hostedFeature) {
    this.hostedFeature = hostedFeature;
    return this;
  }

  /**
   * Get hostedFeature
   * @return hostedFeature
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseHostedFeature getHostedFeature() {
    return hostedFeature;
  }

  public void setHostedFeature(TestCallRouting200ResponseHostedFeature hostedFeature) {
    this.hostedFeature = hostedFeature;
  }


  public TestCallRouting200Response pbxUser(TestCallRouting200ResponsePbxUser pbxUser) {
    this.pbxUser = pbxUser;
    return this;
  }

  /**
   * Get pbxUser
   * @return pbxUser
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponsePbxUser getPbxUser() {
    return pbxUser;
  }

  public void setPbxUser(TestCallRouting200ResponsePbxUser pbxUser) {
    this.pbxUser = pbxUser;
  }


  public TestCallRouting200Response pstnNumber(TestCallRouting200ResponsePstnNumber pstnNumber) {
    this.pstnNumber = pstnNumber;
    return this;
  }

  /**
   * Get pstnNumber
   * @return pstnNumber
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponsePstnNumber getPstnNumber() {
    return pstnNumber;
  }

  public void setPstnNumber(TestCallRouting200ResponsePstnNumber pstnNumber) {
    this.pstnNumber = pstnNumber;
  }


  public TestCallRouting200Response virtualExtension(TestCallRouting200ResponseVirtualExtension virtualExtension) {
    this.virtualExtension = virtualExtension;
    return this;
  }

  /**
   * Get virtualExtension
   * @return virtualExtension
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseVirtualExtension getVirtualExtension() {
    return virtualExtension;
  }

  public void setVirtualExtension(TestCallRouting200ResponseVirtualExtension virtualExtension) {
    this.virtualExtension = virtualExtension;
  }


  public TestCallRouting200Response virtualExtensionRange(TestCallRouting200ResponseVirtualExtensionRange virtualExtensionRange) {
    this.virtualExtensionRange = virtualExtensionRange;
    return this;
  }

  /**
   * Get virtualExtensionRange
   * @return virtualExtensionRange
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseVirtualExtensionRange getVirtualExtensionRange() {
    return virtualExtensionRange;
  }

  public void setVirtualExtensionRange(TestCallRouting200ResponseVirtualExtensionRange virtualExtensionRange) {
    this.virtualExtensionRange = virtualExtensionRange;
  }


  public TestCallRouting200Response routeList(TestCallRouting200ResponseRouteList routeList) {
    this.routeList = routeList;
    return this;
  }

  /**
   * Get routeList
   * @return routeList
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseRouteList getRouteList() {
    return routeList;
  }

  public void setRouteList(TestCallRouting200ResponseRouteList routeList) {
    this.routeList = routeList;
  }


  public TestCallRouting200Response featureAccessCode(TestCallRouting200ResponseFeatureAccessCode featureAccessCode) {
    this.featureAccessCode = featureAccessCode;
    return this;
  }

  /**
   * Get featureAccessCode
   * @return featureAccessCode
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseFeatureAccessCode getFeatureAccessCode() {
    return featureAccessCode;
  }

  public void setFeatureAccessCode(TestCallRouting200ResponseFeatureAccessCode featureAccessCode) {
    this.featureAccessCode = featureAccessCode;
  }


  public TestCallRouting200Response emergency(TestCallRouting200ResponseEmergency emergency) {
    this.emergency = emergency;
    return this;
  }

  /**
   * Get emergency
   * @return emergency
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseEmergency getEmergency() {
    return emergency;
  }

  public void setEmergency(TestCallRouting200ResponseEmergency emergency) {
    this.emergency = emergency;
  }


  public TestCallRouting200Response repair(TestCallRouting200ResponseRepair repair) {
    this.repair = repair;
    return this;
  }

  /**
   * Get repair
   * @return repair
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseRepair getRepair() {
    return repair;
  }

  public void setRepair(TestCallRouting200ResponseRepair repair) {
    this.repair = repair;
  }


  public TestCallRouting200Response unknownExtension(TestCallRouting200ResponseUnknownExtension unknownExtension) {
    this.unknownExtension = unknownExtension;
    return this;
  }

  /**
   * Get unknownExtension
   * @return unknownExtension
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseUnknownExtension getUnknownExtension() {
    return unknownExtension;
  }

  public void setUnknownExtension(TestCallRouting200ResponseUnknownExtension unknownExtension) {
    this.unknownExtension = unknownExtension;
  }


  public TestCallRouting200Response unknownNumber(TestCallRouting200ResponseUnknownNumber unknownNumber) {
    this.unknownNumber = unknownNumber;
    return this;
  }

  /**
   * Get unknownNumber
   * @return unknownNumber
   */
  @javax.annotation.Nullable
  public TestCallRouting200ResponseUnknownNumber getUnknownNumber() {
    return unknownNumber;
  }

  public void setUnknownNumber(TestCallRouting200ResponseUnknownNumber unknownNumber) {
    this.unknownNumber = unknownNumber;
  }


  public TestCallRouting200Response appliedServices(List<Object> appliedServices) {
    this.appliedServices = appliedServices;
    return this;
  }

  public TestCallRouting200Response addAppliedServicesItem(Object appliedServicesItem) {
    if (this.appliedServices == null) {
      this.appliedServices = new ArrayList<>();
    }
    this.appliedServices.add(appliedServicesItem);
    return this;
  }

  /**
   * Returned if any origin is configured with intercept details, outgoing permissions by type, or translation pattern.
   * @return appliedServices
   */
  @javax.annotation.Nullable
  public List<Object> getAppliedServices() {
    return appliedServices;
  }

  public void setAppliedServices(List<Object> appliedServices) {
    this.appliedServices = appliedServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCallRouting200Response testCallRouting200Response = (TestCallRouting200Response) o;
    return Objects.equals(this.callSourceInfo, testCallRouting200Response.callSourceInfo) &&
        Objects.equals(this.destinationType, testCallRouting200Response.destinationType) &&
        Objects.equals(this.routingAddress, testCallRouting200Response.routingAddress) &&
        Objects.equals(this.outsideAccessCode, testCallRouting200Response.outsideAccessCode) &&
        Objects.equals(this.isRejected, testCallRouting200Response.isRejected) &&
        Objects.equals(this.callingLineID, testCallRouting200Response.callingLineID) &&
        Objects.equals(this.routingProfile, testCallRouting200Response.routingProfile) &&
        Objects.equals(this.hostedAgent, testCallRouting200Response.hostedAgent) &&
        Objects.equals(this.hostedFeature, testCallRouting200Response.hostedFeature) &&
        Objects.equals(this.pbxUser, testCallRouting200Response.pbxUser) &&
        Objects.equals(this.pstnNumber, testCallRouting200Response.pstnNumber) &&
        Objects.equals(this.virtualExtension, testCallRouting200Response.virtualExtension) &&
        Objects.equals(this.virtualExtensionRange, testCallRouting200Response.virtualExtensionRange) &&
        Objects.equals(this.routeList, testCallRouting200Response.routeList) &&
        Objects.equals(this.featureAccessCode, testCallRouting200Response.featureAccessCode) &&
        Objects.equals(this.emergency, testCallRouting200Response.emergency) &&
        Objects.equals(this.repair, testCallRouting200Response.repair) &&
        Objects.equals(this.unknownExtension, testCallRouting200Response.unknownExtension) &&
        Objects.equals(this.unknownNumber, testCallRouting200Response.unknownNumber) &&
        Objects.equals(this.appliedServices, testCallRouting200Response.appliedServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callSourceInfo, destinationType, routingAddress, outsideAccessCode, isRejected, callingLineID, routingProfile, hostedAgent, hostedFeature, pbxUser, pstnNumber, virtualExtension, virtualExtensionRange, routeList, featureAccessCode, emergency, repair, unknownExtension, unknownNumber, appliedServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCallRouting200Response {\n");
    sb.append("    callSourceInfo: ").append(toIndentedString(callSourceInfo)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    routingAddress: ").append(toIndentedString(routingAddress)).append("\n");
    sb.append("    outsideAccessCode: ").append(toIndentedString(outsideAccessCode)).append("\n");
    sb.append("    isRejected: ").append(toIndentedString(isRejected)).append("\n");
    sb.append("    callingLineID: ").append(toIndentedString(callingLineID)).append("\n");
    sb.append("    routingProfile: ").append(toIndentedString(routingProfile)).append("\n");
    sb.append("    hostedAgent: ").append(toIndentedString(hostedAgent)).append("\n");
    sb.append("    hostedFeature: ").append(toIndentedString(hostedFeature)).append("\n");
    sb.append("    pbxUser: ").append(toIndentedString(pbxUser)).append("\n");
    sb.append("    pstnNumber: ").append(toIndentedString(pstnNumber)).append("\n");
    sb.append("    virtualExtension: ").append(toIndentedString(virtualExtension)).append("\n");
    sb.append("    virtualExtensionRange: ").append(toIndentedString(virtualExtensionRange)).append("\n");
    sb.append("    routeList: ").append(toIndentedString(routeList)).append("\n");
    sb.append("    featureAccessCode: ").append(toIndentedString(featureAccessCode)).append("\n");
    sb.append("    emergency: ").append(toIndentedString(emergency)).append("\n");
    sb.append("    repair: ").append(toIndentedString(repair)).append("\n");
    sb.append("    unknownExtension: ").append(toIndentedString(unknownExtension)).append("\n");
    sb.append("    unknownNumber: ").append(toIndentedString(unknownNumber)).append("\n");
    sb.append("    appliedServices: ").append(toIndentedString(appliedServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callSourceInfo");
    openapiFields.add("destinationType");
    openapiFields.add("routingAddress");
    openapiFields.add("outsideAccessCode");
    openapiFields.add("isRejected");
    openapiFields.add("callingLineID");
    openapiFields.add("routingProfile");
    openapiFields.add("hostedAgent");
    openapiFields.add("hostedFeature");
    openapiFields.add("pbxUser");
    openapiFields.add("pstnNumber");
    openapiFields.add("virtualExtension");
    openapiFields.add("virtualExtensionRange");
    openapiFields.add("routeList");
    openapiFields.add("featureAccessCode");
    openapiFields.add("emergency");
    openapiFields.add("repair");
    openapiFields.add("unknownExtension");
    openapiFields.add("unknownNumber");
    openapiFields.add("appliedServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationType");
    openapiRequiredFields.add("routingAddress");
    openapiRequiredFields.add("isRejected");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCallRouting200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCallRouting200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCallRouting200Response is not found in the empty JSON string", TestCallRouting200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCallRouting200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCallRouting200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCallRouting200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callSourceInfo`
      if (jsonObj.get("callSourceInfo") != null && !jsonObj.get("callSourceInfo").isJsonNull()) {
        TestCallRouting200ResponseCallSourceInfo.validateJsonElement(jsonObj.get("callSourceInfo"));
      }
      if (!jsonObj.get("destinationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationType").toString()));
      }
      // validate the required field `destinationType`
      DestinationTypeEnum.validateJsonElement(jsonObj.get("destinationType"));
      if (!jsonObj.get("routingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingAddress").toString()));
      }
      if ((jsonObj.get("outsideAccessCode") != null && !jsonObj.get("outsideAccessCode").isJsonNull()) && !jsonObj.get("outsideAccessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outsideAccessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outsideAccessCode").toString()));
      }
      if ((jsonObj.get("callingLineID") != null && !jsonObj.get("callingLineID").isJsonNull()) && !jsonObj.get("callingLineID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingLineID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callingLineID").toString()));
      }
      if ((jsonObj.get("routingProfile") != null && !jsonObj.get("routingProfile").isJsonNull()) && !jsonObj.get("routingProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingProfile").toString()));
      }
      // validate the optional field `hostedAgent`
      if (jsonObj.get("hostedAgent") != null && !jsonObj.get("hostedAgent").isJsonNull()) {
        TestCallRouting200ResponseHostedAgent.validateJsonElement(jsonObj.get("hostedAgent"));
      }
      // validate the optional field `hostedFeature`
      if (jsonObj.get("hostedFeature") != null && !jsonObj.get("hostedFeature").isJsonNull()) {
        TestCallRouting200ResponseHostedFeature.validateJsonElement(jsonObj.get("hostedFeature"));
      }
      // validate the optional field `pbxUser`
      if (jsonObj.get("pbxUser") != null && !jsonObj.get("pbxUser").isJsonNull()) {
        TestCallRouting200ResponsePbxUser.validateJsonElement(jsonObj.get("pbxUser"));
      }
      // validate the optional field `pstnNumber`
      if (jsonObj.get("pstnNumber") != null && !jsonObj.get("pstnNumber").isJsonNull()) {
        TestCallRouting200ResponsePstnNumber.validateJsonElement(jsonObj.get("pstnNumber"));
      }
      // validate the optional field `virtualExtension`
      if (jsonObj.get("virtualExtension") != null && !jsonObj.get("virtualExtension").isJsonNull()) {
        TestCallRouting200ResponseVirtualExtension.validateJsonElement(jsonObj.get("virtualExtension"));
      }
      // validate the optional field `virtualExtensionRange`
      if (jsonObj.get("virtualExtensionRange") != null && !jsonObj.get("virtualExtensionRange").isJsonNull()) {
        TestCallRouting200ResponseVirtualExtensionRange.validateJsonElement(jsonObj.get("virtualExtensionRange"));
      }
      // validate the optional field `routeList`
      if (jsonObj.get("routeList") != null && !jsonObj.get("routeList").isJsonNull()) {
        TestCallRouting200ResponseRouteList.validateJsonElement(jsonObj.get("routeList"));
      }
      // validate the optional field `featureAccessCode`
      if (jsonObj.get("featureAccessCode") != null && !jsonObj.get("featureAccessCode").isJsonNull()) {
        TestCallRouting200ResponseFeatureAccessCode.validateJsonElement(jsonObj.get("featureAccessCode"));
      }
      // validate the optional field `emergency`
      if (jsonObj.get("emergency") != null && !jsonObj.get("emergency").isJsonNull()) {
        TestCallRouting200ResponseEmergency.validateJsonElement(jsonObj.get("emergency"));
      }
      // validate the optional field `repair`
      if (jsonObj.get("repair") != null && !jsonObj.get("repair").isJsonNull()) {
        TestCallRouting200ResponseRepair.validateJsonElement(jsonObj.get("repair"));
      }
      // validate the optional field `unknownExtension`
      if (jsonObj.get("unknownExtension") != null && !jsonObj.get("unknownExtension").isJsonNull()) {
        TestCallRouting200ResponseUnknownExtension.validateJsonElement(jsonObj.get("unknownExtension"));
      }
      // validate the optional field `unknownNumber`
      if (jsonObj.get("unknownNumber") != null && !jsonObj.get("unknownNumber").isJsonNull()) {
        TestCallRouting200ResponseUnknownNumber.validateJsonElement(jsonObj.get("unknownNumber"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appliedServices") != null && !jsonObj.get("appliedServices").isJsonNull() && !jsonObj.get("appliedServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedServices` to be an array in the JSON string but got `%s`", jsonObj.get("appliedServices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCallRouting200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCallRouting200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCallRouting200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCallRouting200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCallRouting200Response>() {
           @Override
           public void write(JsonWriter out, TestCallRouting200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCallRouting200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCallRouting200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCallRouting200Response
   * @throws IOException if the JSON string is invalid with respect to TestCallRouting200Response
   */
  public static TestCallRouting200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCallRouting200Response.class);
  }

  /**
   * Convert an instance of TestCallRouting200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

