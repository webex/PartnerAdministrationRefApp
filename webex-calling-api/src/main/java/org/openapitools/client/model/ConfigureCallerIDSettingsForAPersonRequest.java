// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigureCallerIDSettingsForAPersonRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ConfigureCallerIDSettingsForAPersonRequest {
  /**
   * Which type of outgoing Caller ID will be used. This setting is for the number portion.
   */
  @JsonAdapter(SelectedEnum.Adapter.class)
  public enum SelectedEnum {
    DIRECT_LINE("DIRECT_LINE"),
    
    LOCATION_NUMBER("LOCATION_NUMBER"),
    
    CUSTOM("CUSTOM");

    private String value;

    SelectedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelectedEnum fromValue(String value) {
      for (SelectedEnum b : SelectedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelectedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelectedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelectedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private SelectedEnum selected;

  public static final String SERIALIZED_NAME_CUSTOM_NUMBER = "customNumber";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NUMBER)
  private String customNumber;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_BLOCK_IN_FORWARD_CALLS_ENABLED = "blockInForwardCallsEnabled";
  @SerializedName(SERIALIZED_NAME_BLOCK_IN_FORWARD_CALLS_ENABLED)
  private Boolean blockInForwardCallsEnabled;

  /**
   * Designates which type of External Caller Id Name policy is used. Default is &#x60;DIRECT_LINE&#x60;.
   */
  @JsonAdapter(ExternalCallerIdNamePolicyEnum.Adapter.class)
  public enum ExternalCallerIdNamePolicyEnum {
    DIRECT_LINE("DIRECT_LINE"),
    
    LOCATION("LOCATION"),
    
    OTHER("OTHER");

    private String value;

    ExternalCallerIdNamePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalCallerIdNamePolicyEnum fromValue(String value) {
      for (ExternalCallerIdNamePolicyEnum b : ExternalCallerIdNamePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalCallerIdNamePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalCallerIdNamePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalCallerIdNamePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalCallerIdNamePolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalCallerIdNamePolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_CALLER_ID_NAME_POLICY = "externalCallerIdNamePolicy";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CALLER_ID_NAME_POLICY)
  private ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy;

  public static final String SERIALIZED_NAME_CUSTOM_EXTERNAL_CALLER_ID_NAME = "customExternalCallerIdName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EXTERNAL_CALLER_ID_NAME)
  private String customExternalCallerIdName;

  public static final String SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_DIRECT_LINE_ENABLED = "additionalExternalCallerIdDirectLineEnabled";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_DIRECT_LINE_ENABLED)
  private Boolean additionalExternalCallerIdDirectLineEnabled;

  public static final String SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_LOCATION_NUMBER_ENABLED = "additionalExternalCallerIdLocationNumberEnabled";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_LOCATION_NUMBER_ENABLED)
  private Boolean additionalExternalCallerIdLocationNumberEnabled;

  public static final String SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_CUSTOM_NUMBER = "additionalExternalCallerIdCustomNumber";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXTERNAL_CALLER_ID_CUSTOM_NUMBER)
  private String additionalExternalCallerIdCustomNumber;

  public ConfigureCallerIDSettingsForAPersonRequest() {
  }

  public ConfigureCallerIDSettingsForAPersonRequest selected(SelectedEnum selected) {
    this.selected = selected;
    return this;
  }

  /**
   * Which type of outgoing Caller ID will be used. This setting is for the number portion.
   * @return selected
   */
  @javax.annotation.Nonnull
  public SelectedEnum getSelected() {
    return selected;
  }

  public void setSelected(SelectedEnum selected) {
    this.selected = selected;
  }


  public ConfigureCallerIDSettingsForAPersonRequest customNumber(String customNumber) {
    this.customNumber = customNumber;
    return this;
  }

  /**
   * Custom number which will be shown if CUSTOM is selected. This value must be a number from the person&#39;s location or from another location with the same country, PSTN provider, and zone (only applicable for India locations) as the person&#39;s location.
   * @return customNumber
   */
  @javax.annotation.Nullable
  public String getCustomNumber() {
    return customNumber;
  }

  public void setCustomNumber(String customNumber) {
    this.customNumber = customNumber;
  }


  public ConfigureCallerIDSettingsForAPersonRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Person&#39;s Caller ID first name.  Characters of &#x60;%&#x60;,  &#x60;+&#x60;, &#x60;&#x60;, &#x60;\&quot;&#x60; and Unicode characters are not allowed.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ConfigureCallerIDSettingsForAPersonRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Person&#39;s Caller ID last name.  Characters of &#x60;%&#x60;,  &#x60;+&#x60;, &#x60;&#x60;, &#x60;\&quot;&#x60; and Unicode characters are not allowed.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ConfigureCallerIDSettingsForAPersonRequest blockInForwardCallsEnabled(Boolean blockInForwardCallsEnabled) {
    this.blockInForwardCallsEnabled = blockInForwardCallsEnabled;
    return this;
  }

  /**
   * Block this person&#39;s identity when receiving a call.
   * @return blockInForwardCallsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBlockInForwardCallsEnabled() {
    return blockInForwardCallsEnabled;
  }

  public void setBlockInForwardCallsEnabled(Boolean blockInForwardCallsEnabled) {
    this.blockInForwardCallsEnabled = blockInForwardCallsEnabled;
  }


  public ConfigureCallerIDSettingsForAPersonRequest externalCallerIdNamePolicy(ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy) {
    this.externalCallerIdNamePolicy = externalCallerIdNamePolicy;
    return this;
  }

  /**
   * Designates which type of External Caller Id Name policy is used. Default is &#x60;DIRECT_LINE&#x60;.
   * @return externalCallerIdNamePolicy
   */
  @javax.annotation.Nullable
  public ExternalCallerIdNamePolicyEnum getExternalCallerIdNamePolicy() {
    return externalCallerIdNamePolicy;
  }

  public void setExternalCallerIdNamePolicy(ExternalCallerIdNamePolicyEnum externalCallerIdNamePolicy) {
    this.externalCallerIdNamePolicy = externalCallerIdNamePolicy;
  }


  public ConfigureCallerIDSettingsForAPersonRequest customExternalCallerIdName(String customExternalCallerIdName) {
    this.customExternalCallerIdName = customExternalCallerIdName;
    return this;
  }

  /**
   * Custom external caller ID name which will be shown if external caller ID name policy is &#x60;OTHER&#x60;.
   * @return customExternalCallerIdName
   */
  @javax.annotation.Nullable
  public String getCustomExternalCallerIdName() {
    return customExternalCallerIdName;
  }

  public void setCustomExternalCallerIdName(String customExternalCallerIdName) {
    this.customExternalCallerIdName = customExternalCallerIdName;
  }


  public ConfigureCallerIDSettingsForAPersonRequest additionalExternalCallerIdDirectLineEnabled(Boolean additionalExternalCallerIdDirectLineEnabled) {
    this.additionalExternalCallerIdDirectLineEnabled = additionalExternalCallerIdDirectLineEnabled;
    return this;
  }

  /**
   * To set the person&#39;s direct line number as additional external caller ID.
   * @return additionalExternalCallerIdDirectLineEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdditionalExternalCallerIdDirectLineEnabled() {
    return additionalExternalCallerIdDirectLineEnabled;
  }

  public void setAdditionalExternalCallerIdDirectLineEnabled(Boolean additionalExternalCallerIdDirectLineEnabled) {
    this.additionalExternalCallerIdDirectLineEnabled = additionalExternalCallerIdDirectLineEnabled;
  }


  public ConfigureCallerIDSettingsForAPersonRequest additionalExternalCallerIdLocationNumberEnabled(Boolean additionalExternalCallerIdLocationNumberEnabled) {
    this.additionalExternalCallerIdLocationNumberEnabled = additionalExternalCallerIdLocationNumberEnabled;
    return this;
  }

  /**
   * To set the Location main number as additional external caller ID for the person.
   * @return additionalExternalCallerIdLocationNumberEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdditionalExternalCallerIdLocationNumberEnabled() {
    return additionalExternalCallerIdLocationNumberEnabled;
  }

  public void setAdditionalExternalCallerIdLocationNumberEnabled(Boolean additionalExternalCallerIdLocationNumberEnabled) {
    this.additionalExternalCallerIdLocationNumberEnabled = additionalExternalCallerIdLocationNumberEnabled;
  }


  public ConfigureCallerIDSettingsForAPersonRequest additionalExternalCallerIdCustomNumber(String additionalExternalCallerIdCustomNumber) {
    this.additionalExternalCallerIdCustomNumber = additionalExternalCallerIdCustomNumber;
    return this;
  }

  /**
   * To set a custom number as additional external caller ID for the person. This value must be a number from the person&#39;s location or from another location with the same country, PSTN provider, and zone (only applicable for India locations) as the person&#39;s location.
   * @return additionalExternalCallerIdCustomNumber
   */
  @javax.annotation.Nullable
  public String getAdditionalExternalCallerIdCustomNumber() {
    return additionalExternalCallerIdCustomNumber;
  }

  public void setAdditionalExternalCallerIdCustomNumber(String additionalExternalCallerIdCustomNumber) {
    this.additionalExternalCallerIdCustomNumber = additionalExternalCallerIdCustomNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureCallerIDSettingsForAPersonRequest configureCallerIDSettingsForAPersonRequest = (ConfigureCallerIDSettingsForAPersonRequest) o;
    return Objects.equals(this.selected, configureCallerIDSettingsForAPersonRequest.selected) &&
        Objects.equals(this.customNumber, configureCallerIDSettingsForAPersonRequest.customNumber) &&
        Objects.equals(this.firstName, configureCallerIDSettingsForAPersonRequest.firstName) &&
        Objects.equals(this.lastName, configureCallerIDSettingsForAPersonRequest.lastName) &&
        Objects.equals(this.blockInForwardCallsEnabled, configureCallerIDSettingsForAPersonRequest.blockInForwardCallsEnabled) &&
        Objects.equals(this.externalCallerIdNamePolicy, configureCallerIDSettingsForAPersonRequest.externalCallerIdNamePolicy) &&
        Objects.equals(this.customExternalCallerIdName, configureCallerIDSettingsForAPersonRequest.customExternalCallerIdName) &&
        Objects.equals(this.additionalExternalCallerIdDirectLineEnabled, configureCallerIDSettingsForAPersonRequest.additionalExternalCallerIdDirectLineEnabled) &&
        Objects.equals(this.additionalExternalCallerIdLocationNumberEnabled, configureCallerIDSettingsForAPersonRequest.additionalExternalCallerIdLocationNumberEnabled) &&
        Objects.equals(this.additionalExternalCallerIdCustomNumber, configureCallerIDSettingsForAPersonRequest.additionalExternalCallerIdCustomNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selected, customNumber, firstName, lastName, blockInForwardCallsEnabled, externalCallerIdNamePolicy, customExternalCallerIdName, additionalExternalCallerIdDirectLineEnabled, additionalExternalCallerIdLocationNumberEnabled, additionalExternalCallerIdCustomNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureCallerIDSettingsForAPersonRequest {\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    customNumber: ").append(toIndentedString(customNumber)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    blockInForwardCallsEnabled: ").append(toIndentedString(blockInForwardCallsEnabled)).append("\n");
    sb.append("    externalCallerIdNamePolicy: ").append(toIndentedString(externalCallerIdNamePolicy)).append("\n");
    sb.append("    customExternalCallerIdName: ").append(toIndentedString(customExternalCallerIdName)).append("\n");
    sb.append("    additionalExternalCallerIdDirectLineEnabled: ").append(toIndentedString(additionalExternalCallerIdDirectLineEnabled)).append("\n");
    sb.append("    additionalExternalCallerIdLocationNumberEnabled: ").append(toIndentedString(additionalExternalCallerIdLocationNumberEnabled)).append("\n");
    sb.append("    additionalExternalCallerIdCustomNumber: ").append(toIndentedString(additionalExternalCallerIdCustomNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("selected");
    openapiFields.add("customNumber");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("blockInForwardCallsEnabled");
    openapiFields.add("externalCallerIdNamePolicy");
    openapiFields.add("customExternalCallerIdName");
    openapiFields.add("additionalExternalCallerIdDirectLineEnabled");
    openapiFields.add("additionalExternalCallerIdLocationNumberEnabled");
    openapiFields.add("additionalExternalCallerIdCustomNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("selected");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigureCallerIDSettingsForAPersonRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigureCallerIDSettingsForAPersonRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigureCallerIDSettingsForAPersonRequest is not found in the empty JSON string", ConfigureCallerIDSettingsForAPersonRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigureCallerIDSettingsForAPersonRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigureCallerIDSettingsForAPersonRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigureCallerIDSettingsForAPersonRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("selected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selected").toString()));
      }
      // validate the required field `selected`
      SelectedEnum.validateJsonElement(jsonObj.get("selected"));
      if ((jsonObj.get("customNumber") != null && !jsonObj.get("customNumber").isJsonNull()) && !jsonObj.get("customNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customNumber").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("externalCallerIdNamePolicy") != null && !jsonObj.get("externalCallerIdNamePolicy").isJsonNull()) && !jsonObj.get("externalCallerIdNamePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalCallerIdNamePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalCallerIdNamePolicy").toString()));
      }
      // validate the optional field `externalCallerIdNamePolicy`
      if (jsonObj.get("externalCallerIdNamePolicy") != null && !jsonObj.get("externalCallerIdNamePolicy").isJsonNull()) {
        ExternalCallerIdNamePolicyEnum.validateJsonElement(jsonObj.get("externalCallerIdNamePolicy"));
      }
      if ((jsonObj.get("customExternalCallerIdName") != null && !jsonObj.get("customExternalCallerIdName").isJsonNull()) && !jsonObj.get("customExternalCallerIdName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customExternalCallerIdName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customExternalCallerIdName").toString()));
      }
      if ((jsonObj.get("additionalExternalCallerIdCustomNumber") != null && !jsonObj.get("additionalExternalCallerIdCustomNumber").isJsonNull()) && !jsonObj.get("additionalExternalCallerIdCustomNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalExternalCallerIdCustomNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalExternalCallerIdCustomNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigureCallerIDSettingsForAPersonRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigureCallerIDSettingsForAPersonRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigureCallerIDSettingsForAPersonRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigureCallerIDSettingsForAPersonRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigureCallerIDSettingsForAPersonRequest>() {
           @Override
           public void write(JsonWriter out, ConfigureCallerIDSettingsForAPersonRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigureCallerIDSettingsForAPersonRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigureCallerIDSettingsForAPersonRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigureCallerIDSettingsForAPersonRequest
   * @throws IOException if the JSON string is invalid with respect to ConfigureCallerIDSettingsForAPersonRequest
   */
  public static ConfigureCallerIDSettingsForAPersonRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigureCallerIDSettingsForAPersonRequest.class);
  }

  /**
   * Convert an instance of ConfigureCallerIDSettingsForAPersonRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

