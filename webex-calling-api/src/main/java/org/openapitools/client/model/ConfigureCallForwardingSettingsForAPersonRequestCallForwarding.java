// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways;
import org.openapitools.client.model.ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy;
import org.openapitools.client.model.ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings related to \&quot;Always\&quot;, \&quot;Busy\&quot;, and \&quot;No Answer\&quot; call forwarding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ConfigureCallForwardingSettingsForAPersonRequestCallForwarding {
  public static final String SERIALIZED_NAME_ALWAYS = "always";
  @SerializedName(SERIALIZED_NAME_ALWAYS)
  private ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways always;

  public static final String SERIALIZED_NAME_BUSY = "busy";
  @SerializedName(SERIALIZED_NAME_BUSY)
  private ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy busy;

  public static final String SERIALIZED_NAME_NO_ANSWER = "noAnswer";
  @SerializedName(SERIALIZED_NAME_NO_ANSWER)
  private ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer noAnswer;

  public ConfigureCallForwardingSettingsForAPersonRequestCallForwarding() {
  }

  public ConfigureCallForwardingSettingsForAPersonRequestCallForwarding always(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways always) {
    this.always = always;
    return this;
  }

  /**
   * Get always
   * @return always
   */
  @javax.annotation.Nullable
  public ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways getAlways() {
    return always;
  }

  public void setAlways(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways always) {
    this.always = always;
  }


  public ConfigureCallForwardingSettingsForAPersonRequestCallForwarding busy(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy busy) {
    this.busy = busy;
    return this;
  }

  /**
   * Get busy
   * @return busy
   */
  @javax.annotation.Nullable
  public ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy getBusy() {
    return busy;
  }

  public void setBusy(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy busy) {
    this.busy = busy;
  }


  public ConfigureCallForwardingSettingsForAPersonRequestCallForwarding noAnswer(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer noAnswer) {
    this.noAnswer = noAnswer;
    return this;
  }

  /**
   * Get noAnswer
   * @return noAnswer
   */
  @javax.annotation.Nullable
  public ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer getNoAnswer() {
    return noAnswer;
  }

  public void setNoAnswer(ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer noAnswer) {
    this.noAnswer = noAnswer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureCallForwardingSettingsForAPersonRequestCallForwarding configureCallForwardingSettingsForAPersonRequestCallForwarding = (ConfigureCallForwardingSettingsForAPersonRequestCallForwarding) o;
    return Objects.equals(this.always, configureCallForwardingSettingsForAPersonRequestCallForwarding.always) &&
        Objects.equals(this.busy, configureCallForwardingSettingsForAPersonRequestCallForwarding.busy) &&
        Objects.equals(this.noAnswer, configureCallForwardingSettingsForAPersonRequestCallForwarding.noAnswer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(always, busy, noAnswer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureCallForwardingSettingsForAPersonRequestCallForwarding {\n");
    sb.append("    always: ").append(toIndentedString(always)).append("\n");
    sb.append("    busy: ").append(toIndentedString(busy)).append("\n");
    sb.append("    noAnswer: ").append(toIndentedString(noAnswer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always");
    openapiFields.add("busy");
    openapiFields.add("noAnswer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigureCallForwardingSettingsForAPersonRequestCallForwarding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigureCallForwardingSettingsForAPersonRequestCallForwarding is not found in the empty JSON string", ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigureCallForwardingSettingsForAPersonRequestCallForwarding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `always`
      if (jsonObj.get("always") != null && !jsonObj.get("always").isJsonNull()) {
        ConfigureCallForwardingSettingsForAPersonRequestCallForwardingAlways.validateJsonElement(jsonObj.get("always"));
      }
      // validate the optional field `busy`
      if (jsonObj.get("busy") != null && !jsonObj.get("busy").isJsonNull()) {
        ConfigureCallForwardingSettingsForAPersonRequestCallForwardingBusy.validateJsonElement(jsonObj.get("busy"));
      }
      // validate the optional field `noAnswer`
      if (jsonObj.get("noAnswer") != null && !jsonObj.get("noAnswer").isJsonNull()) {
        ConfigureCallForwardingSettingsForAPersonRequestCallForwardingNoAnswer.validateJsonElement(jsonObj.get("noAnswer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigureCallForwardingSettingsForAPersonRequestCallForwarding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigureCallForwardingSettingsForAPersonRequestCallForwarding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigureCallForwardingSettingsForAPersonRequestCallForwarding>() {
           @Override
           public void write(JsonWriter out, ConfigureCallForwardingSettingsForAPersonRequestCallForwarding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigureCallForwardingSettingsForAPersonRequestCallForwarding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigureCallForwardingSettingsForAPersonRequestCallForwarding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigureCallForwardingSettingsForAPersonRequestCallForwarding
   * @throws IOException if the JSON string is invalid with respect to ConfigureCallForwardingSettingsForAPersonRequestCallForwarding
   */
  public static ConfigureCallForwardingSettingsForAPersonRequestCallForwarding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigureCallForwardingSettingsForAPersonRequestCallForwarding.class);
  }

  /**
   * Convert an instance of ConfigureCallForwardingSettingsForAPersonRequestCallForwarding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

