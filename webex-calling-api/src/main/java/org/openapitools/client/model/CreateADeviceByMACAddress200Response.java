// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateADeviceByMACAddress200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CreateADeviceByMACAddress200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<Object> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<Object> permissions = new ArrayList<>();

  /**
   * The connection status of the device.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    CONNECTED("connected"),
    
    DISCONNECTED("disconnected"),
    
    CONNECTED_WITH_ISSUES("connected_with_issues"),
    
    OFFLINE_EXPIRED("offline_expired"),
    
    ACTIVATING("activating"),
    
    UNKNOWN("unknown"),
    
    CONNECTED2("connected");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  /**
   * The current network connectivty for the device.
   */
  @JsonAdapter(ActiveInterfaceEnum.Adapter.class)
  public enum ActiveInterfaceEnum {
    WIRED("wired"),
    
    WIRED2("wired");

    private String value;

    ActiveInterfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveInterfaceEnum fromValue(String value) {
      for (ActiveInterfaceEnum b : ActiveInterfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveInterfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveInterfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveInterfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveInterfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActiveInterfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_INTERFACE = "activeInterface";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INTERFACE)
  private ActiveInterfaceEnum activeInterface;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_PRIMARY_SIP_URL = "primarySipUrl";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SIP_URL)
  private String primarySipUrl;

  public static final String SERIALIZED_NAME_SIP_URLS = "sipUrls";
  @SerializedName(SERIALIZED_NAME_SIP_URLS)
  private List<Object> sipUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_SOFTWARE = "software";
  @SerializedName(SERIALIZED_NAME_SOFTWARE)
  private String software;

  public static final String SERIALIZED_NAME_UPGRADE_CHANNEL = "upgradeChannel";
  @SerializedName(SERIALIZED_NAME_UPGRADE_CHANNEL)
  private String upgradeChannel;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_WORKSPACE_LOCATION_ID = "workspaceLocationId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_LOCATION_ID)
  private String workspaceLocationId;

  public static final String SERIALIZED_NAME_ERROR_CODES = "errorCodes";
  @SerializedName(SERIALIZED_NAME_ERROR_CODES)
  private List<Object> errorCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_SEEN = "firstSeen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  @JsonAdapter(EolStage.Adapter.class)
  public enum EolStage {
    UNKNOWN("UNKNOWN"),
    ACTIVE("ACTIVE"),
    END_OF_SALE("END_OF_SALE"),
    END_OF_MAINTENANCE("END_OF_MAINTENANCE"),
    END_OF_SERVICE("END_OF_SERVICE"),
    UPCOMING_END_OF_SUPPORT("UPCOMING_END_OF_SUPPORT"),
    END_OF_SUPPORT("END_OF_SUPPORT");

    private String value;

    EolStage(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EolStage fromValue(String value) {
      for (EolStage b : EolStage.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EolStage> {
      @Override
      public void write(final JsonWriter jsonWriter, final EolStage enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EolStage read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EolStage.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EolStage.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE = "lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private EolStage lifecycle;

  /**
   * Entity managing the device configuration.
   */
  @JsonAdapter(ManagedByEnum.Adapter.class)
  public enum ManagedByEnum {
    CISCO("CISCO"),
    
    CUSTOMER("CUSTOMER"),
    
    PARTNER("PARTNER"),
    
    CISCO2("CISCO");

    private String value;

    ManagedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedByEnum fromValue(String value) {
      for (ManagedByEnum b : ManagedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_BY = "managedBy";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY)
  private ManagedByEnum managedBy;

  /**
   * The device platform.
   */
  @JsonAdapter(DevicePlatformEnum.Adapter.class)
  public enum DevicePlatformEnum {
    CISCO("cisco"),
    
    MICROSOFT_TEAMS_ROOM("microsoftTeamsRoom"),
    
    CISCO2("cisco");

    private String value;

    DevicePlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DevicePlatformEnum fromValue(String value) {
      for (DevicePlatformEnum b : DevicePlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DevicePlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DevicePlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DevicePlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DevicePlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DevicePlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_PLATFORM = "devicePlatform";
  @SerializedName(SERIALIZED_NAME_DEVICE_PLATFORM)
  private DevicePlatformEnum devicePlatform;

  public CreateADeviceByMACAddress200Response() {
  }

  public CreateADeviceByMACAddress200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for the device.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateADeviceByMACAddress200Response displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A friendly name for the device.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateADeviceByMACAddress200Response placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * The placeId field has been deprecated. Please use workspaceId instead.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public CreateADeviceByMACAddress200Response workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace associated with the device.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public CreateADeviceByMACAddress200Response personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * The person associated with the device.
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public CreateADeviceByMACAddress200Response orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * The organization associated with the device.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public CreateADeviceByMACAddress200Response capabilities(List<Object> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public CreateADeviceByMACAddress200Response addCapabilitiesItem(Object capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The capabilities of the device.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<Object> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<Object> capabilities) {
    this.capabilities = capabilities;
  }


  public CreateADeviceByMACAddress200Response permissions(List<Object> permissions) {
    this.permissions = permissions;
    return this;
  }

  public CreateADeviceByMACAddress200Response addPermissionsItem(Object permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions the user has for this device. For example, &#x60;xapi&#x60; means this user is entitled to using the &#x60;xapi&#x60; against this device.
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<Object> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<Object> permissions) {
    this.permissions = permissions;
  }


  public CreateADeviceByMACAddress200Response connectionStatus(ConnectionStatusEnum connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * The connection status of the device.
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(ConnectionStatusEnum connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public CreateADeviceByMACAddress200Response product(String product) {
    this.product = product;
    return this;
  }

  /**
   * The product name. A display friendly version of the device&#39;s &#x60;model&#x60;.
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }


  public CreateADeviceByMACAddress200Response type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The product type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CreateADeviceByMACAddress200Response tags(List<Object> tags) {
    this.tags = tags;
    return this;
  }

  public CreateADeviceByMACAddress200Response addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags assigned to the device.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Object> getTags() {
    return tags;
  }

  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public CreateADeviceByMACAddress200Response ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The current IP address of the device.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public CreateADeviceByMACAddress200Response activeInterface(ActiveInterfaceEnum activeInterface) {
    this.activeInterface = activeInterface;
    return this;
  }

  /**
   * The current network connectivty for the device.
   * @return activeInterface
   */
  @javax.annotation.Nullable
  public ActiveInterfaceEnum getActiveInterface() {
    return activeInterface;
  }

  public void setActiveInterface(ActiveInterfaceEnum activeInterface) {
    this.activeInterface = activeInterface;
  }


  public CreateADeviceByMACAddress200Response mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The unique address for the network adapter.
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }


  public CreateADeviceByMACAddress200Response primarySipUrl(String primarySipUrl) {
    this.primarySipUrl = primarySipUrl;
    return this;
  }

  /**
   * The primary SIP address to dial this device.
   * @return primarySipUrl
   */
  @javax.annotation.Nullable
  public String getPrimarySipUrl() {
    return primarySipUrl;
  }

  public void setPrimarySipUrl(String primarySipUrl) {
    this.primarySipUrl = primarySipUrl;
  }


  public CreateADeviceByMACAddress200Response sipUrls(List<Object> sipUrls) {
    this.sipUrls = sipUrls;
    return this;
  }

  public CreateADeviceByMACAddress200Response addSipUrlsItem(Object sipUrlsItem) {
    if (this.sipUrls == null) {
      this.sipUrls = new ArrayList<>();
    }
    this.sipUrls.add(sipUrlsItem);
    return this;
  }

  /**
   * All SIP addresses to dial this device.
   * @return sipUrls
   */
  @javax.annotation.Nullable
  public List<Object> getSipUrls() {
    return sipUrls;
  }

  public void setSipUrls(List<Object> sipUrls) {
    this.sipUrls = sipUrls;
  }


  public CreateADeviceByMACAddress200Response serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Serial number for the device.
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public CreateADeviceByMACAddress200Response software(String software) {
    this.software = software;
    return this;
  }

  /**
   * The operating system name data and version tag.
   * @return software
   */
  @javax.annotation.Nullable
  public String getSoftware() {
    return software;
  }

  public void setSoftware(String software) {
    this.software = software;
  }


  public CreateADeviceByMACAddress200Response upgradeChannel(String upgradeChannel) {
    this.upgradeChannel = upgradeChannel;
    return this;
  }

  /**
   * The upgrade channel the device is assigned to.
   * @return upgradeChannel
   */
  @javax.annotation.Nullable
  public String getUpgradeChannel() {
    return upgradeChannel;
  }

  public void setUpgradeChannel(String upgradeChannel) {
    this.upgradeChannel = upgradeChannel;
  }


  public CreateADeviceByMACAddress200Response created(String created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time that the device was registered, in ISO8601 format.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public CreateADeviceByMACAddress200Response locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location associated with the device.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public CreateADeviceByMACAddress200Response workspaceLocationId(String workspaceLocationId) {
    this.workspaceLocationId = workspaceLocationId;
    return this;
  }

  /**
   * The workspace location associated with the device. Deprecated, prefer &#x60;locationId&#x60;.
   * @return workspaceLocationId
   */
  @javax.annotation.Nullable
  public String getWorkspaceLocationId() {
    return workspaceLocationId;
  }

  public void setWorkspaceLocationId(String workspaceLocationId) {
    this.workspaceLocationId = workspaceLocationId;
  }


  public CreateADeviceByMACAddress200Response errorCodes(List<Object> errorCodes) {
    this.errorCodes = errorCodes;
    return this;
  }

  public CreateADeviceByMACAddress200Response addErrorCodesItem(Object errorCodesItem) {
    if (this.errorCodes == null) {
      this.errorCodes = new ArrayList<>();
    }
    this.errorCodes.add(errorCodesItem);
    return this;
  }

  /**
   * Error codes coming from the device.
   * @return errorCodes
   */
  @javax.annotation.Nullable
  public List<Object> getErrorCodes() {
    return errorCodes;
  }

  public void setErrorCodes(List<Object> errorCodes) {
    this.errorCodes = errorCodes;
  }


  public CreateADeviceByMACAddress200Response firstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

  /**
   * Timestamp of the first time device sent a status post.
   * @return firstSeen
   */
  @javax.annotation.Nullable
  public String getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public CreateADeviceByMACAddress200Response lastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Timestamp of the last time device sent a status post.
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public String getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }

  public CreateADeviceByMACAddress200Response lifestyle(EolStage lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  @javax.annotation.Nullable
  public EolStage getLifecycle() { return lifecycle; }

  public void setLifecycle(EolStage lifecycle) { this.lifecycle = lifecycle; }

  public CreateADeviceByMACAddress200Response managedBy(ManagedByEnum managedBy) {
    this.managedBy = managedBy;
    return this;
  }

  /**
   * Entity managing the device configuration.
   * @return managedBy
   */
  @javax.annotation.Nullable
  public ManagedByEnum getManagedBy() {
    return managedBy;
  }

  public void setManagedBy(ManagedByEnum managedBy) {
    this.managedBy = managedBy;
  }


  public CreateADeviceByMACAddress200Response devicePlatform(DevicePlatformEnum devicePlatform) {
    this.devicePlatform = devicePlatform;
    return this;
  }

  /**
   * The device platform.
   * @return devicePlatform
   */
  @javax.annotation.Nullable
  public DevicePlatformEnum getDevicePlatform() {
    return devicePlatform;
  }

  public void setDevicePlatform(DevicePlatformEnum devicePlatform) {
    this.devicePlatform = devicePlatform;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateADeviceByMACAddress200Response createADeviceByMACAddress200Response = (CreateADeviceByMACAddress200Response) o;
    return Objects.equals(this.id, createADeviceByMACAddress200Response.id) &&
        Objects.equals(this.displayName, createADeviceByMACAddress200Response.displayName) &&
        Objects.equals(this.placeId, createADeviceByMACAddress200Response.placeId) &&
        Objects.equals(this.workspaceId, createADeviceByMACAddress200Response.workspaceId) &&
        Objects.equals(this.personId, createADeviceByMACAddress200Response.personId) &&
        Objects.equals(this.orgId, createADeviceByMACAddress200Response.orgId) &&
        Objects.equals(this.capabilities, createADeviceByMACAddress200Response.capabilities) &&
        Objects.equals(this.permissions, createADeviceByMACAddress200Response.permissions) &&
        Objects.equals(this.connectionStatus, createADeviceByMACAddress200Response.connectionStatus) &&
        Objects.equals(this.product, createADeviceByMACAddress200Response.product) &&
        Objects.equals(this.type, createADeviceByMACAddress200Response.type) &&
        Objects.equals(this.tags, createADeviceByMACAddress200Response.tags) &&
        Objects.equals(this.ip, createADeviceByMACAddress200Response.ip) &&
        Objects.equals(this.activeInterface, createADeviceByMACAddress200Response.activeInterface) &&
        Objects.equals(this.mac, createADeviceByMACAddress200Response.mac) &&
        Objects.equals(this.primarySipUrl, createADeviceByMACAddress200Response.primarySipUrl) &&
        Objects.equals(this.sipUrls, createADeviceByMACAddress200Response.sipUrls) &&
        Objects.equals(this.serial, createADeviceByMACAddress200Response.serial) &&
        Objects.equals(this.software, createADeviceByMACAddress200Response.software) &&
        Objects.equals(this.upgradeChannel, createADeviceByMACAddress200Response.upgradeChannel) &&
        Objects.equals(this.created, createADeviceByMACAddress200Response.created) &&
        Objects.equals(this.locationId, createADeviceByMACAddress200Response.locationId) &&
        Objects.equals(this.workspaceLocationId, createADeviceByMACAddress200Response.workspaceLocationId) &&
        Objects.equals(this.errorCodes, createADeviceByMACAddress200Response.errorCodes) &&
        Objects.equals(this.firstSeen, createADeviceByMACAddress200Response.firstSeen) &&
        Objects.equals(this.lastSeen, createADeviceByMACAddress200Response.lastSeen) &&
        Objects.equals(this.lifecycle, createADeviceByMACAddress200Response.lifecycle) &&
        Objects.equals(this.managedBy, createADeviceByMACAddress200Response.managedBy) &&
        Objects.equals(this.devicePlatform, createADeviceByMACAddress200Response.devicePlatform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, placeId, workspaceId, personId, orgId, capabilities, permissions, connectionStatus, product, type, tags, ip, activeInterface, mac, primarySipUrl, sipUrls, serial, software, upgradeChannel, created, locationId, workspaceLocationId, errorCodes, firstSeen, lastSeen, lifecycle, managedBy, devicePlatform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateADeviceByMACAddress200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    activeInterface: ").append(toIndentedString(activeInterface)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    primarySipUrl: ").append(toIndentedString(primarySipUrl)).append("\n");
    sb.append("    sipUrls: ").append(toIndentedString(sipUrls)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    upgradeChannel: ").append(toIndentedString(upgradeChannel)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    workspaceLocationId: ").append(toIndentedString(workspaceLocationId)).append("\n");
    sb.append("    errorCodes: ").append(toIndentedString(errorCodes)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    managedBy: ").append(toIndentedString(managedBy)).append("\n");
    sb.append("    devicePlatform: ").append(toIndentedString(devicePlatform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("placeId");
    openapiFields.add("workspaceId");
    openapiFields.add("personId");
    openapiFields.add("orgId");
    openapiFields.add("capabilities");
    openapiFields.add("permissions");
    openapiFields.add("connectionStatus");
    openapiFields.add("product");
    openapiFields.add("type");
    openapiFields.add("tags");
    openapiFields.add("ip");
    openapiFields.add("activeInterface");
    openapiFields.add("mac");
    openapiFields.add("primarySipUrl");
    openapiFields.add("sipUrls");
    openapiFields.add("serial");
    openapiFields.add("software");
    openapiFields.add("upgradeChannel");
    openapiFields.add("created");
    openapiFields.add("locationId");
    openapiFields.add("workspaceLocationId");
    openapiFields.add("errorCodes");
    openapiFields.add("firstSeen");
    openapiFields.add("lastSeen");
    openapiFields.add("lifecycle");
    openapiFields.add("managedBy");
    openapiFields.add("devicePlatform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateADeviceByMACAddress200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateADeviceByMACAddress200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateADeviceByMACAddress200Response is not found in the empty JSON string", CreateADeviceByMACAddress200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateADeviceByMACAddress200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateADeviceByMACAddress200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateADeviceByMACAddress200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) && !jsonObj.get("connectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStatus").toString()));
      }
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("activeInterface") != null && !jsonObj.get("activeInterface").isJsonNull()) && !jsonObj.get("activeInterface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeInterface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeInterface").toString()));
      }
      // validate the optional field `activeInterface`
      if (jsonObj.get("activeInterface") != null && !jsonObj.get("activeInterface").isJsonNull()) {
        ActiveInterfaceEnum.validateJsonElement(jsonObj.get("activeInterface"));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("primarySipUrl") != null && !jsonObj.get("primarySipUrl").isJsonNull()) && !jsonObj.get("primarySipUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primarySipUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primarySipUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sipUrls") != null && !jsonObj.get("sipUrls").isJsonNull() && !jsonObj.get("sipUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sipUrls` to be an array in the JSON string but got `%s`", jsonObj.get("sipUrls").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      if ((jsonObj.get("software") != null && !jsonObj.get("software").isJsonNull()) && !jsonObj.get("software").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software").toString()));
      }
      if ((jsonObj.get("upgradeChannel") != null && !jsonObj.get("upgradeChannel").isJsonNull()) && !jsonObj.get("upgradeChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeChannel").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("workspaceLocationId") != null && !jsonObj.get("workspaceLocationId").isJsonNull()) && !jsonObj.get("workspaceLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceLocationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorCodes") != null && !jsonObj.get("errorCodes").isJsonNull() && !jsonObj.get("errorCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCodes` to be an array in the JSON string but got `%s`", jsonObj.get("errorCodes").toString()));
      }
      if ((jsonObj.get("firstSeen") != null && !jsonObj.get("firstSeen").isJsonNull()) && !jsonObj.get("firstSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstSeen").toString()));
      }
      if ((jsonObj.get("lastSeen") != null && !jsonObj.get("lastSeen").isJsonNull()) && !jsonObj.get("lastSeen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSeen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSeen").toString()));
      }
      if ((jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonNull()) && !jsonObj.get("lifecycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifecycle").toString()));
      }
      // validate the optional field `lifecycle`
      if (jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonNull()) {
        EolStage.validateJsonElement(jsonObj.get("lifecycle"));
      }
      if ((jsonObj.get("managedBy") != null && !jsonObj.get("managedBy").isJsonNull()) && !jsonObj.get("managedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedBy").toString()));
      }
      // validate the optional field `managedBy`
      if (jsonObj.get("managedBy") != null && !jsonObj.get("managedBy").isJsonNull()) {
        ManagedByEnum.validateJsonElement(jsonObj.get("managedBy"));
      }
      if ((jsonObj.get("devicePlatform") != null && !jsonObj.get("devicePlatform").isJsonNull()) && !jsonObj.get("devicePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePlatform").toString()));
      }
      // validate the optional field `devicePlatform`
      if (jsonObj.get("devicePlatform") != null && !jsonObj.get("devicePlatform").isJsonNull()) {
        DevicePlatformEnum.validateJsonElement(jsonObj.get("devicePlatform"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateADeviceByMACAddress200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateADeviceByMACAddress200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateADeviceByMACAddress200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateADeviceByMACAddress200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateADeviceByMACAddress200Response>() {
           @Override
           public void write(JsonWriter out, CreateADeviceByMACAddress200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateADeviceByMACAddress200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateADeviceByMACAddress200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateADeviceByMACAddress200Response
   * @throws IOException if the JSON string is invalid with respect to CreateADeviceByMACAddress200Response
   */
  public static CreateADeviceByMACAddress200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateADeviceByMACAddress200Response.class);
  }

  /**
   * Convert an instance of CreateADeviceByMACAddress200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

