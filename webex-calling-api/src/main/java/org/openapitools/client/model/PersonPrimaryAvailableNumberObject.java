// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.STATE;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonPrimaryAvailableNumberObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class PersonPrimaryAvailableNumberObject {
  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private STATE state;

  public static final String SERIALIZED_NAME_IS_MAIN_NUMBER = "isMainNumber";
  @SerializedName(SERIALIZED_NAME_IS_MAIN_NUMBER)
  private Boolean isMainNumber;

  /**
   * Indicates the telephony type for the number.
   */
  @JsonAdapter(TelephonyTypeEnum.Adapter.class)
  public enum TelephonyTypeEnum {
    PSTN_NUMBER("PSTN_NUMBER"),
    
    MOBILE_NUMBER("MOBILE_NUMBER");

    private String value;

    TelephonyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TelephonyTypeEnum fromValue(String value) {
      for (TelephonyTypeEnum b : TelephonyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TelephonyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TelephonyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TelephonyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TelephonyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TelephonyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TELEPHONY_TYPE = "telephonyType";
  @SerializedName(SERIALIZED_NAME_TELEPHONY_TYPE)
  private TelephonyTypeEnum telephonyType;

  public static final String SERIALIZED_NAME_MOBILE_NETWORK = "mobileNetwork";
  @SerializedName(SERIALIZED_NAME_MOBILE_NETWORK)
  private String mobileNetwork;

  public static final String SERIALIZED_NAME_ROUTING_PROFILE = "routingProfile";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILE)
  private String routingProfile;

  public static final String SERIALIZED_NAME_IS_SERVICE_NUMBER = "isServiceNumber";
  @SerializedName(SERIALIZED_NAME_IS_SERVICE_NUMBER)
  private Boolean isServiceNumber;

  public PersonPrimaryAvailableNumberObject() {
  }

  public PersonPrimaryAvailableNumberObject phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * A unique identifier for the phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PersonPrimaryAvailableNumberObject state(STATE state) {
    this.state = state;
    return this;
  }

  /**
   * Phone number&#39;s state.
   * @return state
   */
  @javax.annotation.Nonnull
  public STATE getState() {
    return state;
  }

  public void setState(STATE state) {
    this.state = state;
  }


  public PersonPrimaryAvailableNumberObject isMainNumber(Boolean isMainNumber) {
    this.isMainNumber = isMainNumber;
    return this;
  }

  /**
   * Indicates if the phone number is used as a location CLID.
   * @return isMainNumber
   */
  @javax.annotation.Nonnull
  public Boolean getIsMainNumber() {
    return isMainNumber;
  }

  public void setIsMainNumber(Boolean isMainNumber) {
    this.isMainNumber = isMainNumber;
  }


  public PersonPrimaryAvailableNumberObject telephonyType(TelephonyTypeEnum telephonyType) {
    this.telephonyType = telephonyType;
    return this;
  }

  /**
   * Indicates the telephony type for the number.
   * @return telephonyType
   */
  @javax.annotation.Nonnull
  public TelephonyTypeEnum getTelephonyType() {
    return telephonyType;
  }

  public void setTelephonyType(TelephonyTypeEnum telephonyType) {
    this.telephonyType = telephonyType;
  }


  public PersonPrimaryAvailableNumberObject mobileNetwork(String mobileNetwork) {
    this.mobileNetwork = mobileNetwork;
    return this;
  }

  /**
   * Mobile Network for the number if the number&#39;s &#x60;telephonyType&#x60; is &#x60;MOBILE_NUMBER&#x60;.
   * @return mobileNetwork
   */
  @javax.annotation.Nullable
  public String getMobileNetwork() {
    return mobileNetwork;
  }

  public void setMobileNetwork(String mobileNetwork) {
    this.mobileNetwork = mobileNetwork;
  }


  public PersonPrimaryAvailableNumberObject routingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
    return this;
  }

  /**
   * Routing Profile for the number if the number&#39;s &#x60;telephonyType&#x60; is &#x60;MOBILE_NUMBER&#x60;.
   * @return routingProfile
   */
  @javax.annotation.Nullable
  public String getRoutingProfile() {
    return routingProfile;
  }

  public void setRoutingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
  }


  public PersonPrimaryAvailableNumberObject isServiceNumber(Boolean isServiceNumber) {
    this.isServiceNumber = isServiceNumber;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the phone number is a service number; otherwise, it is a standard number. Service numbers are high-utilization or high-concurrency PSTN phone numbers that are neither mobile nor toll-free.
   * @return isServiceNumber
   */
  @javax.annotation.Nonnull
  public Boolean getIsServiceNumber() {
    return isServiceNumber;
  }

  public void setIsServiceNumber(Boolean isServiceNumber) {
    this.isServiceNumber = isServiceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonPrimaryAvailableNumberObject personPrimaryAvailableNumberObject = (PersonPrimaryAvailableNumberObject) o;
    return Objects.equals(this.phoneNumber, personPrimaryAvailableNumberObject.phoneNumber) &&
        Objects.equals(this.state, personPrimaryAvailableNumberObject.state) &&
        Objects.equals(this.isMainNumber, personPrimaryAvailableNumberObject.isMainNumber) &&
        Objects.equals(this.telephonyType, personPrimaryAvailableNumberObject.telephonyType) &&
        Objects.equals(this.mobileNetwork, personPrimaryAvailableNumberObject.mobileNetwork) &&
        Objects.equals(this.routingProfile, personPrimaryAvailableNumberObject.routingProfile) &&
        Objects.equals(this.isServiceNumber, personPrimaryAvailableNumberObject.isServiceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumber, state, isMainNumber, telephonyType, mobileNetwork, routingProfile, isServiceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonPrimaryAvailableNumberObject {\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    isMainNumber: ").append(toIndentedString(isMainNumber)).append("\n");
    sb.append("    telephonyType: ").append(toIndentedString(telephonyType)).append("\n");
    sb.append("    mobileNetwork: ").append(toIndentedString(mobileNetwork)).append("\n");
    sb.append("    routingProfile: ").append(toIndentedString(routingProfile)).append("\n");
    sb.append("    isServiceNumber: ").append(toIndentedString(isServiceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneNumber");
    openapiFields.add("state");
    openapiFields.add("isMainNumber");
    openapiFields.add("telephonyType");
    openapiFields.add("mobileNetwork");
    openapiFields.add("routingProfile");
    openapiFields.add("isServiceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("isMainNumber");
    openapiRequiredFields.add("telephonyType");
    openapiRequiredFields.add("isServiceNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonPrimaryAvailableNumberObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonPrimaryAvailableNumberObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonPrimaryAvailableNumberObject is not found in the empty JSON string", PersonPrimaryAvailableNumberObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonPrimaryAvailableNumberObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonPrimaryAvailableNumberObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PersonPrimaryAvailableNumberObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      // validate the required field `state`
      STATE.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("telephonyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephonyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephonyType").toString()));
      }
      // validate the required field `telephonyType`
      TelephonyTypeEnum.validateJsonElement(jsonObj.get("telephonyType"));
      if ((jsonObj.get("mobileNetwork") != null && !jsonObj.get("mobileNetwork").isJsonNull()) && !jsonObj.get("mobileNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNetwork").toString()));
      }
      if ((jsonObj.get("routingProfile") != null && !jsonObj.get("routingProfile").isJsonNull()) && !jsonObj.get("routingProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingProfile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonPrimaryAvailableNumberObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonPrimaryAvailableNumberObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonPrimaryAvailableNumberObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonPrimaryAvailableNumberObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonPrimaryAvailableNumberObject>() {
           @Override
           public void write(JsonWriter out, PersonPrimaryAvailableNumberObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonPrimaryAvailableNumberObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonPrimaryAvailableNumberObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonPrimaryAvailableNumberObject
   * @throws IOException if the JSON string is invalid with respect to PersonPrimaryAvailableNumberObject
   */
  public static PersonPrimaryAvailableNumberObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonPrimaryAvailableNumberObject.class);
  }

  /**
   * Convert an instance of PersonPrimaryAvailableNumberObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

