// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModifyCallQueueStrandedCallsObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ModifyCallQueueStrandedCallsObject {
  /**
   * Specifies call processing action type.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    NONE("NONE"),
    
    BUSY("BUSY"),
    
    TRANSFER("TRANSFER"),
    
    NIGHT_SERVICE("NIGHT_SERVICE"),
    
    RINGING("RINGING"),
    
    ANNOUNCEMENT("ANNOUNCEMENT");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_TRANSFER_PHONE_NUMBER = "transferPhoneNumber";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PHONE_NUMBER)
  private String transferPhoneNumber;

  /**
   * Specifies what type of announcement to be played.
   */
  @JsonAdapter(AudioMessageSelectionEnum.Adapter.class)
  public enum AudioMessageSelectionEnum {
    DEFAULT("DEFAULT"),
    
    CUSTOM("CUSTOM");

    private String value;

    AudioMessageSelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioMessageSelectionEnum fromValue(String value) {
      for (AudioMessageSelectionEnum b : AudioMessageSelectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioMessageSelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioMessageSelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioMessageSelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioMessageSelectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioMessageSelectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_MESSAGE_SELECTION = "audioMessageSelection";
  @SerializedName(SERIALIZED_NAME_AUDIO_MESSAGE_SELECTION)
  private AudioMessageSelectionEnum audioMessageSelection;

  public static final String SERIALIZED_NAME_AUDIO_FILES = "audioFiles";
  @SerializedName(SERIALIZED_NAME_AUDIO_FILES)
  private List<Object> audioFiles = new ArrayList<>();

  public ModifyCallQueueStrandedCallsObject() {
  }

  public ModifyCallQueueStrandedCallsObject action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Specifies call processing action type.
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ModifyCallQueueStrandedCallsObject transferPhoneNumber(String transferPhoneNumber) {
    this.transferPhoneNumber = transferPhoneNumber;
    return this;
  }

  /**
   * Call gets transferred to this number when action is set to &#x60;TRANSFER&#x60;. This can also be an extension.
   * @return transferPhoneNumber
   */
  @javax.annotation.Nullable
  public String getTransferPhoneNumber() {
    return transferPhoneNumber;
  }

  public void setTransferPhoneNumber(String transferPhoneNumber) {
    this.transferPhoneNumber = transferPhoneNumber;
  }


  public ModifyCallQueueStrandedCallsObject audioMessageSelection(AudioMessageSelectionEnum audioMessageSelection) {
    this.audioMessageSelection = audioMessageSelection;
    return this;
  }

  /**
   * Specifies what type of announcement to be played.
   * @return audioMessageSelection
   */
  @javax.annotation.Nonnull
  public AudioMessageSelectionEnum getAudioMessageSelection() {
    return audioMessageSelection;
  }

  public void setAudioMessageSelection(AudioMessageSelectionEnum audioMessageSelection) {
    this.audioMessageSelection = audioMessageSelection;
  }


  public ModifyCallQueueStrandedCallsObject audioFiles(List<Object> audioFiles) {
    this.audioFiles = audioFiles;
    return this;
  }

  public ModifyCallQueueStrandedCallsObject addAudioFilesItem(Object audioFilesItem) {
    if (this.audioFiles == null) {
      this.audioFiles = new ArrayList<>();
    }
    this.audioFiles.add(audioFilesItem);
    return this;
  }

  /**
   * List of pre-configured Announcement Audio Files when &#x60;audioMessageSelection&#x60; is &#x60;CUSTOM&#x60;.
   * @return audioFiles
   */
  @javax.annotation.Nullable
  public List<Object> getAudioFiles() {
    return audioFiles;
  }

  public void setAudioFiles(List<Object> audioFiles) {
    this.audioFiles = audioFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyCallQueueStrandedCallsObject modifyCallQueueStrandedCallsObject = (ModifyCallQueueStrandedCallsObject) o;
    return Objects.equals(this.action, modifyCallQueueStrandedCallsObject.action) &&
        Objects.equals(this.transferPhoneNumber, modifyCallQueueStrandedCallsObject.transferPhoneNumber) &&
        Objects.equals(this.audioMessageSelection, modifyCallQueueStrandedCallsObject.audioMessageSelection) &&
        Objects.equals(this.audioFiles, modifyCallQueueStrandedCallsObject.audioFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, transferPhoneNumber, audioMessageSelection, audioFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyCallQueueStrandedCallsObject {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    transferPhoneNumber: ").append(toIndentedString(transferPhoneNumber)).append("\n");
    sb.append("    audioMessageSelection: ").append(toIndentedString(audioMessageSelection)).append("\n");
    sb.append("    audioFiles: ").append(toIndentedString(audioFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("transferPhoneNumber");
    openapiFields.add("audioMessageSelection");
    openapiFields.add("audioFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("audioMessageSelection");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyCallQueueStrandedCallsObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyCallQueueStrandedCallsObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyCallQueueStrandedCallsObject is not found in the empty JSON string", ModifyCallQueueStrandedCallsObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyCallQueueStrandedCallsObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyCallQueueStrandedCallsObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyCallQueueStrandedCallsObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("transferPhoneNumber") != null && !jsonObj.get("transferPhoneNumber").isJsonNull()) && !jsonObj.get("transferPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferPhoneNumber").toString()));
      }
      if (!jsonObj.get("audioMessageSelection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioMessageSelection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioMessageSelection").toString()));
      }
      // validate the required field `audioMessageSelection`
      AudioMessageSelectionEnum.validateJsonElement(jsonObj.get("audioMessageSelection"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("audioFiles") != null && !jsonObj.get("audioFiles").isJsonNull() && !jsonObj.get("audioFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioFiles` to be an array in the JSON string but got `%s`", jsonObj.get("audioFiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyCallQueueStrandedCallsObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyCallQueueStrandedCallsObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyCallQueueStrandedCallsObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyCallQueueStrandedCallsObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyCallQueueStrandedCallsObject>() {
           @Override
           public void write(JsonWriter out, ModifyCallQueueStrandedCallsObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyCallQueueStrandedCallsObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyCallQueueStrandedCallsObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyCallQueueStrandedCallsObject
   * @throws IOException if the JSON string is invalid with respect to ModifyCallQueueStrandedCallsObject
   */
  public static ModifyCallQueueStrandedCallsObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyCallQueueStrandedCallsObject.class);
  }

  /**
   * Convert an instance of ModifyCallQueueStrandedCallsObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

