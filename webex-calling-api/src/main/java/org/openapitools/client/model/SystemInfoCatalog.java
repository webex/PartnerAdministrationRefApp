// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SystemInfoCatalog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class SystemInfoCatalog {
  public static final String SERIALIZED_NAME_SYSTEM_SUMMARY = "systemSummary";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SUMMARY)
  private String systemSummary;

  public static final String SERIALIZED_NAME_BROWSER = "browser";
  @SerializedName(SERIALIZED_NAME_BROWSER)
  private String browser;

  public static final String SERIALIZED_NAME_HARDWARE = "hardware";
  @SerializedName(SERIALIZED_NAME_HARDWARE)
  private String hardware;

  public static final String SERIALIZED_NAME_INSTALLED_SOFTWARE = "installedSoftware";
  @SerializedName(SERIALIZED_NAME_INSTALLED_SOFTWARE)
  private String installedSoftware;

  public static final String SERIALIZED_NAME_RUNNING_SOFTWARE = "runningSoftware";
  @SerializedName(SERIALIZED_NAME_RUNNING_SOFTWARE)
  private String runningSoftware;

  public static final String SERIALIZED_NAME_STARTUP_PROGRAMS = "startupPrograms";
  @SerializedName(SERIALIZED_NAME_STARTUP_PROGRAMS)
  private String startupPrograms;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private String storage;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private String video;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private String environmentVariables;

  public static final String SERIALIZED_NAME_PROCESSES = "processes";
  @SerializedName(SERIALIZED_NAME_PROCESSES)
  private String processes;

  public static final String SERIALIZED_NAME_LOGICAL_DRIVES = "logicalDrives";
  @SerializedName(SERIALIZED_NAME_LOGICAL_DRIVES)
  private String logicalDrives;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private String devices;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private String services;

  public static final String SERIALIZED_NAME_SYSTEM_DRIVERS = "systemDrivers";
  @SerializedName(SERIALIZED_NAME_SYSTEM_DRIVERS)
  private String systemDrivers;

  public static final String SERIALIZED_NAME_SIGNED_DRIVERS = "signedDrivers";
  @SerializedName(SERIALIZED_NAME_SIGNED_DRIVERS)
  private String signedDrivers;

  public static final String SERIALIZED_NAME_EVENT_VIEWER = "eventViewer";
  @SerializedName(SERIALIZED_NAME_EVENT_VIEWER)
  private String eventViewer;

  public static final String SERIALIZED_NAME_BIOS = "bios";
  @SerializedName(SERIALIZED_NAME_BIOS)
  private String bios;

  public SystemInfoCatalog() {
  }

  public SystemInfoCatalog systemSummary(String systemSummary) {
    this.systemSummary = systemSummary;
    return this;
  }

  /**
   * System summary.
   * @return systemSummary
   */
  @javax.annotation.Nullable
  public String getSystemSummary() {
    return systemSummary;
  }

  public void setSystemSummary(String systemSummary) {
    this.systemSummary = systemSummary;
  }


  public SystemInfoCatalog browser(String browser) {
    this.browser = browser;
    return this;
  }

  /**
   * The browser user agent of the person who acted.
   * @return browser
   */
  @javax.annotation.Nullable
  public String getBrowser() {
    return browser;
  }

  public void setBrowser(String browser) {
    this.browser = browser;
  }


  public SystemInfoCatalog hardware(String hardware) {
    this.hardware = hardware;
    return this;
  }

  /**
   * The type of hardware that the user used to attend the meeting.
   * @return hardware
   */
  @javax.annotation.Nullable
  public String getHardware() {
    return hardware;
  }

  public void setHardware(String hardware) {
    this.hardware = hardware;
  }


  public SystemInfoCatalog installedSoftware(String installedSoftware) {
    this.installedSoftware = installedSoftware;
    return this;
  }

  /**
   * The software that the user used to attend the meeting.
   * @return installedSoftware
   */
  @javax.annotation.Nullable
  public String getInstalledSoftware() {
    return installedSoftware;
  }

  public void setInstalledSoftware(String installedSoftware) {
    this.installedSoftware = installedSoftware;
  }


  public SystemInfoCatalog runningSoftware(String runningSoftware) {
    this.runningSoftware = runningSoftware;
    return this;
  }

  /**
   * The software the user used that is running.
   * @return runningSoftware
   */
  @javax.annotation.Nullable
  public String getRunningSoftware() {
    return runningSoftware;
  }

  public void setRunningSoftware(String runningSoftware) {
    this.runningSoftware = runningSoftware;
  }


  public SystemInfoCatalog startupPrograms(String startupPrograms) {
    this.startupPrograms = startupPrograms;
    return this;
  }

  /**
   * Startup Programs.
   * @return startupPrograms
   */
  @javax.annotation.Nullable
  public String getStartupPrograms() {
    return startupPrograms;
  }

  public void setStartupPrograms(String startupPrograms) {
    this.startupPrograms = startupPrograms;
  }


  public SystemInfoCatalog storage(String storage) {
    this.storage = storage;
    return this;
  }

  /**
   * The storage information of the user&#39;s device.
   * @return storage
   */
  @javax.annotation.Nullable
  public String getStorage() {
    return storage;
  }

  public void setStorage(String storage) {
    this.storage = storage;
  }


  public SystemInfoCatalog video(String video) {
    this.video = video;
    return this;
  }

  /**
   * The video of the user&#39;s device.
   * @return video
   */
  @javax.annotation.Nullable
  public String getVideo() {
    return video;
  }

  public void setVideo(String video) {
    this.video = video;
  }


  public SystemInfoCatalog network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The network of the user&#39;s device.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public SystemInfoCatalog operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * The operating system of the user&#39;s device.
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public SystemInfoCatalog environmentVariables(String environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * The environment variables of the user&#39;s device.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public String getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(String environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public SystemInfoCatalog processes(String processes) {
    this.processes = processes;
    return this;
  }

  /**
   * The processes of the user&#39;s device.
   * @return processes
   */
  @javax.annotation.Nullable
  public String getProcesses() {
    return processes;
  }

  public void setProcesses(String processes) {
    this.processes = processes;
  }


  public SystemInfoCatalog logicalDrives(String logicalDrives) {
    this.logicalDrives = logicalDrives;
    return this;
  }

  /**
   * The logical drives of the user&#39;s device.
   * @return logicalDrives
   */
  @javax.annotation.Nullable
  public String getLogicalDrives() {
    return logicalDrives;
  }

  public void setLogicalDrives(String logicalDrives) {
    this.logicalDrives = logicalDrives;
  }


  public SystemInfoCatalog devices(String devices) {
    this.devices = devices;
    return this;
  }

  /**
   * The device of the user.
   * @return devices
   */
  @javax.annotation.Nullable
  public String getDevices() {
    return devices;
  }

  public void setDevices(String devices) {
    this.devices = devices;
  }


  public SystemInfoCatalog services(String services) {
    this.services = services;
    return this;
  }

  /**
   * The service of the user&#39;s device.
   * @return services
   */
  @javax.annotation.Nullable
  public String getServices() {
    return services;
  }

  public void setServices(String services) {
    this.services = services;
  }


  public SystemInfoCatalog systemDrivers(String systemDrivers) {
    this.systemDrivers = systemDrivers;
    return this;
  }

  /**
   * The system driver of the user&#39;s device.
   * @return systemDrivers
   */
  @javax.annotation.Nullable
  public String getSystemDrivers() {
    return systemDrivers;
  }

  public void setSystemDrivers(String systemDrivers) {
    this.systemDrivers = systemDrivers;
  }


  public SystemInfoCatalog signedDrivers(String signedDrivers) {
    this.signedDrivers = signedDrivers;
    return this;
  }

  /**
   * The sign driver system of the user&#39;s device.
   * @return signedDrivers
   */
  @javax.annotation.Nullable
  public String getSignedDrivers() {
    return signedDrivers;
  }

  public void setSignedDrivers(String signedDrivers) {
    this.signedDrivers = signedDrivers;
  }


  public SystemInfoCatalog eventViewer(String eventViewer) {
    this.eventViewer = eventViewer;
    return this;
  }

  /**
   * The event viewer of the user&#39;s device.
   * @return eventViewer
   */
  @javax.annotation.Nullable
  public String getEventViewer() {
    return eventViewer;
  }

  public void setEventViewer(String eventViewer) {
    this.eventViewer = eventViewer;
  }


  public SystemInfoCatalog bios(String bios) {
    this.bios = bios;
    return this;
  }

  /**
   * The basic input and output system.
   * @return bios
   */
  @javax.annotation.Nullable
  public String getBios() {
    return bios;
  }

  public void setBios(String bios) {
    this.bios = bios;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfoCatalog systemInfoCatalog = (SystemInfoCatalog) o;
    return Objects.equals(this.systemSummary, systemInfoCatalog.systemSummary) &&
        Objects.equals(this.browser, systemInfoCatalog.browser) &&
        Objects.equals(this.hardware, systemInfoCatalog.hardware) &&
        Objects.equals(this.installedSoftware, systemInfoCatalog.installedSoftware) &&
        Objects.equals(this.runningSoftware, systemInfoCatalog.runningSoftware) &&
        Objects.equals(this.startupPrograms, systemInfoCatalog.startupPrograms) &&
        Objects.equals(this.storage, systemInfoCatalog.storage) &&
        Objects.equals(this.video, systemInfoCatalog.video) &&
        Objects.equals(this.network, systemInfoCatalog.network) &&
        Objects.equals(this.operatingSystem, systemInfoCatalog.operatingSystem) &&
        Objects.equals(this.environmentVariables, systemInfoCatalog.environmentVariables) &&
        Objects.equals(this.processes, systemInfoCatalog.processes) &&
        Objects.equals(this.logicalDrives, systemInfoCatalog.logicalDrives) &&
        Objects.equals(this.devices, systemInfoCatalog.devices) &&
        Objects.equals(this.services, systemInfoCatalog.services) &&
        Objects.equals(this.systemDrivers, systemInfoCatalog.systemDrivers) &&
        Objects.equals(this.signedDrivers, systemInfoCatalog.signedDrivers) &&
        Objects.equals(this.eventViewer, systemInfoCatalog.eventViewer) &&
        Objects.equals(this.bios, systemInfoCatalog.bios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemSummary, browser, hardware, installedSoftware, runningSoftware, startupPrograms, storage, video, network, operatingSystem, environmentVariables, processes, logicalDrives, devices, services, systemDrivers, signedDrivers, eventViewer, bios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfoCatalog {\n");
    sb.append("    systemSummary: ").append(toIndentedString(systemSummary)).append("\n");
    sb.append("    browser: ").append(toIndentedString(browser)).append("\n");
    sb.append("    hardware: ").append(toIndentedString(hardware)).append("\n");
    sb.append("    installedSoftware: ").append(toIndentedString(installedSoftware)).append("\n");
    sb.append("    runningSoftware: ").append(toIndentedString(runningSoftware)).append("\n");
    sb.append("    startupPrograms: ").append(toIndentedString(startupPrograms)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    processes: ").append(toIndentedString(processes)).append("\n");
    sb.append("    logicalDrives: ").append(toIndentedString(logicalDrives)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    systemDrivers: ").append(toIndentedString(systemDrivers)).append("\n");
    sb.append("    signedDrivers: ").append(toIndentedString(signedDrivers)).append("\n");
    sb.append("    eventViewer: ").append(toIndentedString(eventViewer)).append("\n");
    sb.append("    bios: ").append(toIndentedString(bios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("systemSummary");
    openapiFields.add("browser");
    openapiFields.add("hardware");
    openapiFields.add("installedSoftware");
    openapiFields.add("runningSoftware");
    openapiFields.add("startupPrograms");
    openapiFields.add("storage");
    openapiFields.add("video");
    openapiFields.add("network");
    openapiFields.add("operatingSystem");
    openapiFields.add("environmentVariables");
    openapiFields.add("processes");
    openapiFields.add("logicalDrives");
    openapiFields.add("devices");
    openapiFields.add("services");
    openapiFields.add("systemDrivers");
    openapiFields.add("signedDrivers");
    openapiFields.add("eventViewer");
    openapiFields.add("bios");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInfoCatalog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfoCatalog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfoCatalog is not found in the empty JSON string", SystemInfoCatalog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfoCatalog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfoCatalog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("systemSummary") != null && !jsonObj.get("systemSummary").isJsonNull()) && !jsonObj.get("systemSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemSummary").toString()));
      }
      if ((jsonObj.get("browser") != null && !jsonObj.get("browser").isJsonNull()) && !jsonObj.get("browser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browser").toString()));
      }
      if ((jsonObj.get("hardware") != null && !jsonObj.get("hardware").isJsonNull()) && !jsonObj.get("hardware").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardware` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardware").toString()));
      }
      if ((jsonObj.get("installedSoftware") != null && !jsonObj.get("installedSoftware").isJsonNull()) && !jsonObj.get("installedSoftware").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installedSoftware` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installedSoftware").toString()));
      }
      if ((jsonObj.get("runningSoftware") != null && !jsonObj.get("runningSoftware").isJsonNull()) && !jsonObj.get("runningSoftware").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runningSoftware` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runningSoftware").toString()));
      }
      if ((jsonObj.get("startupPrograms") != null && !jsonObj.get("startupPrograms").isJsonNull()) && !jsonObj.get("startupPrograms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startupPrograms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startupPrograms").toString()));
      }
      if ((jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) && !jsonObj.get("storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage").toString()));
      }
      if ((jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) && !jsonObj.get("video").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) && !jsonObj.get("operatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
      }
      if ((jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) && !jsonObj.get("environmentVariables").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
      }
      if ((jsonObj.get("processes") != null && !jsonObj.get("processes").isJsonNull()) && !jsonObj.get("processes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processes").toString()));
      }
      if ((jsonObj.get("logicalDrives") != null && !jsonObj.get("logicalDrives").isJsonNull()) && !jsonObj.get("logicalDrives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logicalDrives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logicalDrives").toString()));
      }
      if ((jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) && !jsonObj.get("devices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devices").toString()));
      }
      if ((jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) && !jsonObj.get("services").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be a primitive type in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
      if ((jsonObj.get("systemDrivers") != null && !jsonObj.get("systemDrivers").isJsonNull()) && !jsonObj.get("systemDrivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemDrivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemDrivers").toString()));
      }
      if ((jsonObj.get("signedDrivers") != null && !jsonObj.get("signedDrivers").isJsonNull()) && !jsonObj.get("signedDrivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedDrivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedDrivers").toString()));
      }
      if ((jsonObj.get("eventViewer") != null && !jsonObj.get("eventViewer").isJsonNull()) && !jsonObj.get("eventViewer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventViewer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventViewer").toString()));
      }
      if ((jsonObj.get("bios") != null && !jsonObj.get("bios").isJsonNull()) && !jsonObj.get("bios").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bios` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bios").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfoCatalog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfoCatalog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfoCatalog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfoCatalog.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfoCatalog>() {
           @Override
           public void write(JsonWriter out, SystemInfoCatalog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfoCatalog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInfoCatalog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInfoCatalog
   * @throws IOException if the JSON string is invalid with respect to SystemInfoCatalog
   */
  public static SystemInfoCatalog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfoCatalog.class);
  }

  /**
   * Convert an instance of SystemInfoCatalog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

