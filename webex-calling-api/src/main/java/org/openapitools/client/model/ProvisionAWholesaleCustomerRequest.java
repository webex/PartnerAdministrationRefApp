// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisionAWholesaleCustomerRequestAddress;
import org.openapitools.client.model.ProvisionAWholesaleCustomerRequestCustomerInfo;
import org.openapitools.client.model.ProvisionAWholesaleCustomerRequestProvisioningParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProvisionAWholesaleCustomerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ProvisionAWholesaleCustomerRequest {
  public static final String SERIALIZED_NAME_PROVISIONING_ID = "provisioningId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ID)
  private String provisioningId;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<Object> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ProvisionAWholesaleCustomerRequestAddress address;

  public static final String SERIALIZED_NAME_CUSTOMER_INFO = "customerInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INFO)
  private ProvisionAWholesaleCustomerRequestCustomerInfo customerInfo;

  public static final String SERIALIZED_NAME_PROVISIONING_PARAMETERS = "provisioningParameters";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PARAMETERS)
  private ProvisionAWholesaleCustomerRequestProvisioningParameters provisioningParameters;

  public static final String SERIALIZED_NAME_SUB_PARTNER_ADMIN_EMAIL = "subPartnerAdminEmail";
  @SerializedName(SERIALIZED_NAME_SUB_PARTNER_ADMIN_EMAIL)
  private String subPartnerAdminEmail;

  public ProvisionAWholesaleCustomerRequest() {
  }

  public ProvisionAWholesaleCustomerRequest provisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
    return this;
  }

  /**
   * This Provisioning ID defines how this customer is to be provisioned for Webex Services.  Each Customer Template will have their own unique Provisioning ID. This ID will be displayed under the chosen Customer Template on [Webex Control Hub](https://admin.webex.com).
   * @return provisioningId
   */
  @javax.annotation.Nonnull
  public String getProvisioningId() {
    return provisioningId;
  }

  public void setProvisioningId(String provisioningId) {
    this.provisioningId = provisioningId;
  }


  public ProvisionAWholesaleCustomerRequest packages(List<Object> packages) {
    this.packages = packages;
    return this;
  }

  public ProvisionAWholesaleCustomerRequest addPackagesItem(Object packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The complete list of Webex Wholesale packages to be assigned to the customer.
   * @return packages
   */
  @javax.annotation.Nonnull
  public List<Object> getPackages() {
    return packages;
  }

  public void setPackages(List<Object> packages) {
    this.packages = packages;
  }


  public ProvisionAWholesaleCustomerRequest orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * The organization ID of the enterprise in Webex. Mandatory for existing customers.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public ProvisionAWholesaleCustomerRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * External ID of the Wholesale customer.
   * @return externalId
   */
  @javax.annotation.Nonnull
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public ProvisionAWholesaleCustomerRequest address(ProvisionAWholesaleCustomerRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public ProvisionAWholesaleCustomerRequestAddress getAddress() {
    return address;
  }

  public void setAddress(ProvisionAWholesaleCustomerRequestAddress address) {
    this.address = address;
  }


  public ProvisionAWholesaleCustomerRequest customerInfo(ProvisionAWholesaleCustomerRequestCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
    return this;
  }

  /**
   * Get customerInfo
   * @return customerInfo
   */
  @javax.annotation.Nullable
  public ProvisionAWholesaleCustomerRequestCustomerInfo getCustomerInfo() {
    return customerInfo;
  }

  public void setCustomerInfo(ProvisionAWholesaleCustomerRequestCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
  }


  public ProvisionAWholesaleCustomerRequest provisioningParameters(ProvisionAWholesaleCustomerRequestProvisioningParameters provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
    return this;
  }

  /**
   * Get provisioningParameters
   * @return provisioningParameters
   */
  @javax.annotation.Nullable
  public ProvisionAWholesaleCustomerRequestProvisioningParameters getProvisioningParameters() {
    return provisioningParameters;
  }

  public void setProvisioningParameters(ProvisionAWholesaleCustomerRequestProvisioningParameters provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
  }


  public ProvisionAWholesaleCustomerRequest subPartnerAdminEmail(String subPartnerAdminEmail) {
    this.subPartnerAdminEmail = subPartnerAdminEmail;
    return this;
  }

  /**
   * The email of the sub partner organization admin.
   * @return subPartnerAdminEmail
   */
  @javax.annotation.Nullable
  public String getSubPartnerAdminEmail() {
    return subPartnerAdminEmail;
  }

  public void setSubPartnerAdminEmail(String subPartnerAdminEmail) {
    this.subPartnerAdminEmail = subPartnerAdminEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionAWholesaleCustomerRequest provisionAWholesaleCustomerRequest = (ProvisionAWholesaleCustomerRequest) o;
    return Objects.equals(this.provisioningId, provisionAWholesaleCustomerRequest.provisioningId) &&
        Objects.equals(this.packages, provisionAWholesaleCustomerRequest.packages) &&
        Objects.equals(this.orgId, provisionAWholesaleCustomerRequest.orgId) &&
        Objects.equals(this.externalId, provisionAWholesaleCustomerRequest.externalId) &&
        Objects.equals(this.address, provisionAWholesaleCustomerRequest.address) &&
        Objects.equals(this.customerInfo, provisionAWholesaleCustomerRequest.customerInfo) &&
        Objects.equals(this.provisioningParameters, provisionAWholesaleCustomerRequest.provisioningParameters) &&
        Objects.equals(this.subPartnerAdminEmail, provisionAWholesaleCustomerRequest.subPartnerAdminEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningId, packages, orgId, externalId, address, customerInfo, provisioningParameters, subPartnerAdminEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionAWholesaleCustomerRequest {\n");
    sb.append("    provisioningId: ").append(toIndentedString(provisioningId)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    customerInfo: ").append(toIndentedString(customerInfo)).append("\n");
    sb.append("    provisioningParameters: ").append(toIndentedString(provisioningParameters)).append("\n");
    sb.append("    subPartnerAdminEmail: ").append(toIndentedString(subPartnerAdminEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningId");
    openapiFields.add("packages");
    openapiFields.add("orgId");
    openapiFields.add("externalId");
    openapiFields.add("address");
    openapiFields.add("customerInfo");
    openapiFields.add("provisioningParameters");
    openapiFields.add("subPartnerAdminEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provisioningId");
    openapiRequiredFields.add("packages");
    openapiRequiredFields.add("externalId");
    openapiRequiredFields.add("address");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionAWholesaleCustomerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionAWholesaleCustomerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionAWholesaleCustomerRequest is not found in the empty JSON string", ProvisionAWholesaleCustomerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionAWholesaleCustomerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionAWholesaleCustomerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisionAWholesaleCustomerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("provisioningId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("packages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the required field `address`
      ProvisionAWholesaleCustomerRequestAddress.validateJsonElement(jsonObj.get("address"));
      // validate the optional field `customerInfo`
      if (jsonObj.get("customerInfo") != null && !jsonObj.get("customerInfo").isJsonNull()) {
        ProvisionAWholesaleCustomerRequestCustomerInfo.validateJsonElement(jsonObj.get("customerInfo"));
      }
      // validate the optional field `provisioningParameters`
      if (jsonObj.get("provisioningParameters") != null && !jsonObj.get("provisioningParameters").isJsonNull()) {
        ProvisionAWholesaleCustomerRequestProvisioningParameters.validateJsonElement(jsonObj.get("provisioningParameters"));
      }
      if ((jsonObj.get("subPartnerAdminEmail") != null && !jsonObj.get("subPartnerAdminEmail").isJsonNull()) && !jsonObj.get("subPartnerAdminEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subPartnerAdminEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subPartnerAdminEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionAWholesaleCustomerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionAWholesaleCustomerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionAWholesaleCustomerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionAWholesaleCustomerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionAWholesaleCustomerRequest>() {
           @Override
           public void write(JsonWriter out, ProvisionAWholesaleCustomerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionAWholesaleCustomerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionAWholesaleCustomerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionAWholesaleCustomerRequest
   * @throws IOException if the JSON string is invalid with respect to ProvisionAWholesaleCustomerRequest
   */
  public static ProvisionAWholesaleCustomerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionAWholesaleCustomerRequest.class);
  }

  /**
   * Convert an instance of ProvisionAWholesaleCustomerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

