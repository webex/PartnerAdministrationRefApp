// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.CreateAWorkspaceRequestCalendar;
import org.openapitools.client.model.CreateAWorkspaceRequestCalling;
import org.openapitools.client.model.CreateAWorkspaceRequestDeviceHostedMeetings;
import org.openapitools.client.model.CreateAWorkspaceRequestIndoorNavigation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAWorkspaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CreateAWorkspaceRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_WORKSPACE_LOCATION_ID = "workspaceLocationId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_LOCATION_ID)
  private String workspaceLocationId;

  public static final String SERIALIZED_NAME_FLOOR_ID = "floorId";
  @SerializedName(SERIALIZED_NAME_FLOOR_ID)
  private String floorId;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private BigDecimal capacity;

  /**
   * The type that best describes the workspace.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NOT_SET("notSet"),
    
    FOCUS("focus"),
    
    HUDDLE("huddle"),
    
    MEETING_ROOM("meetingRoom"),
    
    OPEN("open"),
    
    DESK("desk"),
    
    OTHER("other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SIP_ADDRESS = "sipAddress";
  @SerializedName(SERIALIZED_NAME_SIP_ADDRESS)
  private String sipAddress;

  public static final String SERIALIZED_NAME_CALLING = "calling";
  @SerializedName(SERIALIZED_NAME_CALLING)
  private CreateAWorkspaceRequestCalling calling;

  public static final String SERIALIZED_NAME_CALENDAR = "calendar";
  @SerializedName(SERIALIZED_NAME_CALENDAR)
  private CreateAWorkspaceRequestCalendar calendar;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  /**
   * Hot desking status of the workspace.
   */
  @JsonAdapter(HotdeskingStatusEnum.Adapter.class)
  public enum HotdeskingStatusEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    HotdeskingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HotdeskingStatusEnum fromValue(String value) {
      for (HotdeskingStatusEnum b : HotdeskingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HotdeskingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HotdeskingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HotdeskingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HotdeskingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HotdeskingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOTDESKING_STATUS = "hotdeskingStatus";
  @SerializedName(SERIALIZED_NAME_HOTDESKING_STATUS)
  private HotdeskingStatusEnum hotdeskingStatus;

  public static final String SERIALIZED_NAME_DEVICE_HOSTED_MEETINGS = "deviceHostedMeetings";
  @SerializedName(SERIALIZED_NAME_DEVICE_HOSTED_MEETINGS)
  private CreateAWorkspaceRequestDeviceHostedMeetings deviceHostedMeetings;

  /**
   * The supported devices for the workspace. Default is &#x60;collaborationDevices&#x60;.
   */
  @JsonAdapter(SupportedDevicesEnum.Adapter.class)
  public enum SupportedDevicesEnum {
    COLLABORATION_DEVICES("collaborationDevices"),
    
    PHONES("phones");

    private String value;

    SupportedDevicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedDevicesEnum fromValue(String value) {
      for (SupportedDevicesEnum b : SupportedDevicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedDevicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedDevicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedDevicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedDevicesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedDevicesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_DEVICES = "supportedDevices";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DEVICES)
  private SupportedDevicesEnum supportedDevices;

  public static final String SERIALIZED_NAME_INDOOR_NAVIGATION = "indoorNavigation";
  @SerializedName(SERIALIZED_NAME_INDOOR_NAVIGATION)
  private CreateAWorkspaceRequestIndoorNavigation indoorNavigation;

  public CreateAWorkspaceRequest() {
  }

  public CreateAWorkspaceRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A friendly name for the workspace.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateAWorkspaceRequest orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * &#x60;OrgId&#x60; associated with the workspace. Only admin users of another organization (such as partners) may use this parameter.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public CreateAWorkspaceRequest locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Location associated with the workspace. Must be provided when the &#x60;floorId&#x60; is set.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public CreateAWorkspaceRequest workspaceLocationId(String workspaceLocationId) {
    this.workspaceLocationId = workspaceLocationId;
    return this;
  }

  /**
   * Legacy workspace location ID associated with the workspace. Prefer &#x60;locationId&#x60;.
   * @return workspaceLocationId
   */
  @javax.annotation.Nullable
  public String getWorkspaceLocationId() {
    return workspaceLocationId;
  }

  public void setWorkspaceLocationId(String workspaceLocationId) {
    this.workspaceLocationId = workspaceLocationId;
  }


  public CreateAWorkspaceRequest floorId(String floorId) {
    this.floorId = floorId;
    return this;
  }

  /**
   * Floor associated with the workspace.
   * @return floorId
   */
  @javax.annotation.Nullable
  public String getFloorId() {
    return floorId;
  }

  public void setFloorId(String floorId) {
    this.floorId = floorId;
  }


  public CreateAWorkspaceRequest capacity(BigDecimal capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * How many people the workspace is suitable for. If set, must be 0 or higher.
   * @return capacity
   */
  @javax.annotation.Nullable
  public BigDecimal getCapacity() {
    return capacity;
  }

  public void setCapacity(BigDecimal capacity) {
    this.capacity = capacity;
  }


  public CreateAWorkspaceRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type that best describes the workspace.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CreateAWorkspaceRequest sipAddress(String sipAddress) {
    this.sipAddress = sipAddress;
    return this;
  }

  /**
   * The &#x60;sipAddress&#x60; field can only be provided when calling type is &#x60;thirdPartySipCalling&#x60;.
   * @return sipAddress
   */
  @javax.annotation.Nullable
  public String getSipAddress() {
    return sipAddress;
  }

  public void setSipAddress(String sipAddress) {
    this.sipAddress = sipAddress;
  }


  public CreateAWorkspaceRequest calling(CreateAWorkspaceRequestCalling calling) {
    this.calling = calling;
    return this;
  }

  /**
   * Get calling
   * @return calling
   */
  @javax.annotation.Nullable
  public CreateAWorkspaceRequestCalling getCalling() {
    return calling;
  }

  public void setCalling(CreateAWorkspaceRequestCalling calling) {
    this.calling = calling;
  }


  public CreateAWorkspaceRequest calendar(CreateAWorkspaceRequestCalendar calendar) {
    this.calendar = calendar;
    return this;
  }

  /**
   * Get calendar
   * @return calendar
   */
  @javax.annotation.Nullable
  public CreateAWorkspaceRequestCalendar getCalendar() {
    return calendar;
  }

  public void setCalendar(CreateAWorkspaceRequestCalendar calendar) {
    this.calendar = calendar;
  }


  public CreateAWorkspaceRequest notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes associated to the workspace.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CreateAWorkspaceRequest hotdeskingStatus(HotdeskingStatusEnum hotdeskingStatus) {
    this.hotdeskingStatus = hotdeskingStatus;
    return this;
  }

  /**
   * Hot desking status of the workspace.
   * @return hotdeskingStatus
   */
  @javax.annotation.Nullable
  public HotdeskingStatusEnum getHotdeskingStatus() {
    return hotdeskingStatus;
  }

  public void setHotdeskingStatus(HotdeskingStatusEnum hotdeskingStatus) {
    this.hotdeskingStatus = hotdeskingStatus;
  }


  public CreateAWorkspaceRequest deviceHostedMeetings(CreateAWorkspaceRequestDeviceHostedMeetings deviceHostedMeetings) {
    this.deviceHostedMeetings = deviceHostedMeetings;
    return this;
  }

  /**
   * Get deviceHostedMeetings
   * @return deviceHostedMeetings
   */
  @javax.annotation.Nullable
  public CreateAWorkspaceRequestDeviceHostedMeetings getDeviceHostedMeetings() {
    return deviceHostedMeetings;
  }

  public void setDeviceHostedMeetings(CreateAWorkspaceRequestDeviceHostedMeetings deviceHostedMeetings) {
    this.deviceHostedMeetings = deviceHostedMeetings;
  }


  public CreateAWorkspaceRequest supportedDevices(SupportedDevicesEnum supportedDevices) {
    this.supportedDevices = supportedDevices;
    return this;
  }

  /**
   * The supported devices for the workspace. Default is &#x60;collaborationDevices&#x60;.
   * @return supportedDevices
   */
  @javax.annotation.Nullable
  public SupportedDevicesEnum getSupportedDevices() {
    return supportedDevices;
  }

  public void setSupportedDevices(SupportedDevicesEnum supportedDevices) {
    this.supportedDevices = supportedDevices;
  }


  public CreateAWorkspaceRequest indoorNavigation(CreateAWorkspaceRequestIndoorNavigation indoorNavigation) {
    this.indoorNavigation = indoorNavigation;
    return this;
  }

  /**
   * Get indoorNavigation
   * @return indoorNavigation
   */
  @javax.annotation.Nullable
  public CreateAWorkspaceRequestIndoorNavigation getIndoorNavigation() {
    return indoorNavigation;
  }

  public void setIndoorNavigation(CreateAWorkspaceRequestIndoorNavigation indoorNavigation) {
    this.indoorNavigation = indoorNavigation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAWorkspaceRequest createAWorkspaceRequest = (CreateAWorkspaceRequest) o;
    return Objects.equals(this.displayName, createAWorkspaceRequest.displayName) &&
        Objects.equals(this.orgId, createAWorkspaceRequest.orgId) &&
        Objects.equals(this.locationId, createAWorkspaceRequest.locationId) &&
        Objects.equals(this.workspaceLocationId, createAWorkspaceRequest.workspaceLocationId) &&
        Objects.equals(this.floorId, createAWorkspaceRequest.floorId) &&
        Objects.equals(this.capacity, createAWorkspaceRequest.capacity) &&
        Objects.equals(this.type, createAWorkspaceRequest.type) &&
        Objects.equals(this.sipAddress, createAWorkspaceRequest.sipAddress) &&
        Objects.equals(this.calling, createAWorkspaceRequest.calling) &&
        Objects.equals(this.calendar, createAWorkspaceRequest.calendar) &&
        Objects.equals(this.notes, createAWorkspaceRequest.notes) &&
        Objects.equals(this.hotdeskingStatus, createAWorkspaceRequest.hotdeskingStatus) &&
        Objects.equals(this.deviceHostedMeetings, createAWorkspaceRequest.deviceHostedMeetings) &&
        Objects.equals(this.supportedDevices, createAWorkspaceRequest.supportedDevices) &&
        Objects.equals(this.indoorNavigation, createAWorkspaceRequest.indoorNavigation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, orgId, locationId, workspaceLocationId, floorId, capacity, type, sipAddress, calling, calendar, notes, hotdeskingStatus, deviceHostedMeetings, supportedDevices, indoorNavigation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAWorkspaceRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    workspaceLocationId: ").append(toIndentedString(workspaceLocationId)).append("\n");
    sb.append("    floorId: ").append(toIndentedString(floorId)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sipAddress: ").append(toIndentedString(sipAddress)).append("\n");
    sb.append("    calling: ").append(toIndentedString(calling)).append("\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    hotdeskingStatus: ").append(toIndentedString(hotdeskingStatus)).append("\n");
    sb.append("    deviceHostedMeetings: ").append(toIndentedString(deviceHostedMeetings)).append("\n");
    sb.append("    supportedDevices: ").append(toIndentedString(supportedDevices)).append("\n");
    sb.append("    indoorNavigation: ").append(toIndentedString(indoorNavigation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("orgId");
    openapiFields.add("locationId");
    openapiFields.add("workspaceLocationId");
    openapiFields.add("floorId");
    openapiFields.add("capacity");
    openapiFields.add("type");
    openapiFields.add("sipAddress");
    openapiFields.add("calling");
    openapiFields.add("calendar");
    openapiFields.add("notes");
    openapiFields.add("hotdeskingStatus");
    openapiFields.add("deviceHostedMeetings");
    openapiFields.add("supportedDevices");
    openapiFields.add("indoorNavigation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAWorkspaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAWorkspaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAWorkspaceRequest is not found in the empty JSON string", CreateAWorkspaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAWorkspaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAWorkspaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAWorkspaceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("workspaceLocationId") != null && !jsonObj.get("workspaceLocationId").isJsonNull()) && !jsonObj.get("workspaceLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceLocationId").toString()));
      }
      if ((jsonObj.get("floorId") != null && !jsonObj.get("floorId").isJsonNull()) && !jsonObj.get("floorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("sipAddress") != null && !jsonObj.get("sipAddress").isJsonNull()) && !jsonObj.get("sipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sipAddress").toString()));
      }
      // validate the optional field `calling`
      if (jsonObj.get("calling") != null && !jsonObj.get("calling").isJsonNull()) {
        CreateAWorkspaceRequestCalling.validateJsonElement(jsonObj.get("calling"));
      }
      // validate the optional field `calendar`
      if (jsonObj.get("calendar") != null && !jsonObj.get("calendar").isJsonNull()) {
        CreateAWorkspaceRequestCalendar.validateJsonElement(jsonObj.get("calendar"));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("hotdeskingStatus") != null && !jsonObj.get("hotdeskingStatus").isJsonNull()) && !jsonObj.get("hotdeskingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotdeskingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotdeskingStatus").toString()));
      }
      // validate the optional field `hotdeskingStatus`
      if (jsonObj.get("hotdeskingStatus") != null && !jsonObj.get("hotdeskingStatus").isJsonNull()) {
        HotdeskingStatusEnum.validateJsonElement(jsonObj.get("hotdeskingStatus"));
      }
      // validate the optional field `deviceHostedMeetings`
      if (jsonObj.get("deviceHostedMeetings") != null && !jsonObj.get("deviceHostedMeetings").isJsonNull()) {
        CreateAWorkspaceRequestDeviceHostedMeetings.validateJsonElement(jsonObj.get("deviceHostedMeetings"));
      }
      if ((jsonObj.get("supportedDevices") != null && !jsonObj.get("supportedDevices").isJsonNull()) && !jsonObj.get("supportedDevices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedDevices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportedDevices").toString()));
      }
      // validate the optional field `supportedDevices`
      if (jsonObj.get("supportedDevices") != null && !jsonObj.get("supportedDevices").isJsonNull()) {
        SupportedDevicesEnum.validateJsonElement(jsonObj.get("supportedDevices"));
      }
      // validate the optional field `indoorNavigation`
      if (jsonObj.get("indoorNavigation") != null && !jsonObj.get("indoorNavigation").isJsonNull()) {
        CreateAWorkspaceRequestIndoorNavigation.validateJsonElement(jsonObj.get("indoorNavigation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAWorkspaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAWorkspaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAWorkspaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAWorkspaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAWorkspaceRequest>() {
           @Override
           public void write(JsonWriter out, CreateAWorkspaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAWorkspaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAWorkspaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAWorkspaceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAWorkspaceRequest
   */
  public static CreateAWorkspaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAWorkspaceRequest.class);
  }

  /**
   * Convert an instance of CreateAWorkspaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

