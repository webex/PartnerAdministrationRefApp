// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallRecordingPutRepeat;
import org.openapitools.client.model.CallRecordingPutStartStopAnnouncement;
import org.openapitools.client.model.ConfigureCallRecordingSettingsForAVirtualLineRequestNotification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallRecordingPut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class CallRecordingPut {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * Call recording scenario.
   */
  @JsonAdapter(RecordEnum.Adapter.class)
  public enum RecordEnum {
    ALWAYS("Always"),
    
    NEVER("Never"),
    
    ALWAYS_WITH_PAUSE_RESUME("Always with Pause/Resume"),
    
    ON_DEMAND_WITH_USER_INITIATED_START("On Demand with User Initiated Start");

    private String value;

    RecordEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordEnum fromValue(String value) {
      for (RecordEnum b : RecordEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecordEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private RecordEnum record;

  public static final String SERIALIZED_NAME_RECORD_VOICEMAIL_ENABLED = "recordVoicemailEnabled";
  @SerializedName(SERIALIZED_NAME_RECORD_VOICEMAIL_ENABLED)
  private Boolean recordVoicemailEnabled;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private ConfigureCallRecordingSettingsForAVirtualLineRequestNotification notification;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private CallRecordingPutRepeat repeat;

  public static final String SERIALIZED_NAME_START_STOP_ANNOUNCEMENT = "startStopAnnouncement";
  @SerializedName(SERIALIZED_NAME_START_STOP_ANNOUNCEMENT)
  private CallRecordingPutStartStopAnnouncement startStopAnnouncement;

  public CallRecordingPut() {
  }

  public CallRecordingPut enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * &#x60;true&#x60; if call recording is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CallRecordingPut record(RecordEnum record) {
    this.record = record;
    return this;
  }

  /**
   * Call recording scenario.
   * @return record
   */
  @javax.annotation.Nullable
  public RecordEnum getRecord() {
    return record;
  }

  public void setRecord(RecordEnum record) {
    this.record = record;
  }


  public CallRecordingPut recordVoicemailEnabled(Boolean recordVoicemailEnabled) {
    this.recordVoicemailEnabled = recordVoicemailEnabled;
    return this;
  }

  /**
   * When &#x60;true&#x60;, voicemail messages are also recorded.
   * @return recordVoicemailEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRecordVoicemailEnabled() {
    return recordVoicemailEnabled;
  }

  public void setRecordVoicemailEnabled(Boolean recordVoicemailEnabled) {
    this.recordVoicemailEnabled = recordVoicemailEnabled;
  }


  public CallRecordingPut notification(ConfigureCallRecordingSettingsForAVirtualLineRequestNotification notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nullable
  public ConfigureCallRecordingSettingsForAVirtualLineRequestNotification getNotification() {
    return notification;
  }

  public void setNotification(ConfigureCallRecordingSettingsForAVirtualLineRequestNotification notification) {
    this.notification = notification;
  }


  public CallRecordingPut repeat(CallRecordingPutRepeat repeat) {
    this.repeat = repeat;
    return this;
  }

  /**
   * Get repeat
   * @return repeat
   */
  @javax.annotation.Nullable
  public CallRecordingPutRepeat getRepeat() {
    return repeat;
  }

  public void setRepeat(CallRecordingPutRepeat repeat) {
    this.repeat = repeat;
  }


  public CallRecordingPut startStopAnnouncement(CallRecordingPutStartStopAnnouncement startStopAnnouncement) {
    this.startStopAnnouncement = startStopAnnouncement;
    return this;
  }

  /**
   * Get startStopAnnouncement
   * @return startStopAnnouncement
   */
  @javax.annotation.Nullable
  public CallRecordingPutStartStopAnnouncement getStartStopAnnouncement() {
    return startStopAnnouncement;
  }

  public void setStartStopAnnouncement(CallRecordingPutStartStopAnnouncement startStopAnnouncement) {
    this.startStopAnnouncement = startStopAnnouncement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecordingPut callRecordingPut = (CallRecordingPut) o;
    return Objects.equals(this.enabled, callRecordingPut.enabled) &&
        Objects.equals(this.record, callRecordingPut.record) &&
        Objects.equals(this.recordVoicemailEnabled, callRecordingPut.recordVoicemailEnabled) &&
        Objects.equals(this.notification, callRecordingPut.notification) &&
        Objects.equals(this.repeat, callRecordingPut.repeat) &&
        Objects.equals(this.startStopAnnouncement, callRecordingPut.startStopAnnouncement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, record, recordVoicemailEnabled, notification, repeat, startStopAnnouncement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecordingPut {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    recordVoicemailEnabled: ").append(toIndentedString(recordVoicemailEnabled)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    startStopAnnouncement: ").append(toIndentedString(startStopAnnouncement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("record");
    openapiFields.add("recordVoicemailEnabled");
    openapiFields.add("notification");
    openapiFields.add("repeat");
    openapiFields.add("startStopAnnouncement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallRecordingPut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallRecordingPut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallRecordingPut is not found in the empty JSON string", CallRecordingPut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallRecordingPut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallRecordingPut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) && !jsonObj.get("record").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record").toString()));
      }
      // validate the optional field `record`
      if (jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) {
        RecordEnum.validateJsonElement(jsonObj.get("record"));
      }
      // validate the optional field `notification`
      if (jsonObj.get("notification") != null && !jsonObj.get("notification").isJsonNull()) {
        ConfigureCallRecordingSettingsForAVirtualLineRequestNotification.validateJsonElement(jsonObj.get("notification"));
      }
      // validate the optional field `repeat`
      if (jsonObj.get("repeat") != null && !jsonObj.get("repeat").isJsonNull()) {
        CallRecordingPutRepeat.validateJsonElement(jsonObj.get("repeat"));
      }
      // validate the optional field `startStopAnnouncement`
      if (jsonObj.get("startStopAnnouncement") != null && !jsonObj.get("startStopAnnouncement").isJsonNull()) {
        CallRecordingPutStartStopAnnouncement.validateJsonElement(jsonObj.get("startStopAnnouncement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallRecordingPut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallRecordingPut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallRecordingPut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallRecordingPut.class));

       return (TypeAdapter<T>) new TypeAdapter<CallRecordingPut>() {
           @Override
           public void write(JsonWriter out, CallRecordingPut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallRecordingPut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallRecordingPut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallRecordingPut
   * @throws IOException if the JSON string is invalid with respect to CallRecordingPut
   */
  public static CallRecordingPut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallRecordingPut.class);
  }

  /**
   * Convert an instance of CallRecordingPut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

