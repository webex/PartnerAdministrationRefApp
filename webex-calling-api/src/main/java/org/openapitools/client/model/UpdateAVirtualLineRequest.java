// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAVirtualLineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class UpdateAVirtualLineRequest {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_ANNOUNCEMENT_LANGUAGE = "announcementLanguage";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_LANGUAGE)
  private String announcementLanguage;

  public static final String SERIALIZED_NAME_CALLER_ID_LAST_NAME = "callerIdLastName";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_LAST_NAME)
  private String callerIdLastName;

  public static final String SERIALIZED_NAME_CALLER_ID_FIRST_NAME = "callerIdFirstName";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_FIRST_NAME)
  private String callerIdFirstName;

  public static final String SERIALIZED_NAME_CALLER_ID_NUMBER = "callerIdNumber";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_NUMBER)
  private String callerIdNumber;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public UpdateAVirtualLineRequest() {
  }

  public UpdateAVirtualLineRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name defined for a virtual line. Minimum length is 1. Maximum length is 64.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UpdateAVirtualLineRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name defined for a virtual line. Minimum length is 1. Maximum length is 64.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UpdateAVirtualLineRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name defined for a virtual line.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateAVirtualLineRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Phone number of a virtual line. Minimum length is 1. Maximum length is 23. Either &#x60;phoneNumber&#x60; or &#x60;extension&#x60; is mandatory.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public UpdateAVirtualLineRequest extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Extension of a virtual line. Minimum length is 2. Maximum length is 10. Either &#x60;phoneNumber&#x60; or &#x60;extension&#x60; is mandatory.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public UpdateAVirtualLineRequest announcementLanguage(String announcementLanguage) {
    this.announcementLanguage = announcementLanguage;
    return this;
  }

  /**
   * Virtual Line&#39;s announcement language.
   * @return announcementLanguage
   */
  @javax.annotation.Nullable
  public String getAnnouncementLanguage() {
    return announcementLanguage;
  }

  public void setAnnouncementLanguage(String announcementLanguage) {
    this.announcementLanguage = announcementLanguage;
  }


  public UpdateAVirtualLineRequest callerIdLastName(String callerIdLastName) {
    this.callerIdLastName = callerIdLastName;
    return this;
  }

  /**
   * Last name used in the Calling Line ID and for dial-by-name functions. Minimum length is 1. Maximum length is 64.
   * @return callerIdLastName
   */
  @javax.annotation.Nullable
  public String getCallerIdLastName() {
    return callerIdLastName;
  }

  public void setCallerIdLastName(String callerIdLastName) {
    this.callerIdLastName = callerIdLastName;
  }


  public UpdateAVirtualLineRequest callerIdFirstName(String callerIdFirstName) {
    this.callerIdFirstName = callerIdFirstName;
    return this;
  }

  /**
   * First name used in the Calling Line ID and for dial-by-name functions. Minimum length is 1. Maximum length is 128.
   * @return callerIdFirstName
   */
  @javax.annotation.Nullable
  public String getCallerIdFirstName() {
    return callerIdFirstName;
  }

  public void setCallerIdFirstName(String callerIdFirstName) {
    this.callerIdFirstName = callerIdFirstName;
  }


  public UpdateAVirtualLineRequest callerIdNumber(String callerIdNumber) {
    this.callerIdNumber = callerIdNumber;
    return this;
  }

  /**
   * Phone number to appear as the CLID for all calls. Minimum length is 1. Maximum length is 23.
   * @return callerIdNumber
   */
  @javax.annotation.Nullable
  public String getCallerIdNumber() {
    return callerIdNumber;
  }

  public void setCallerIdNumber(String callerIdNumber) {
    this.callerIdNumber = callerIdNumber;
  }


  public UpdateAVirtualLineRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone defined for the virtual line.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAVirtualLineRequest updateAVirtualLineRequest = (UpdateAVirtualLineRequest) o;
    return Objects.equals(this.firstName, updateAVirtualLineRequest.firstName) &&
        Objects.equals(this.lastName, updateAVirtualLineRequest.lastName) &&
        Objects.equals(this.displayName, updateAVirtualLineRequest.displayName) &&
        Objects.equals(this.phoneNumber, updateAVirtualLineRequest.phoneNumber) &&
        Objects.equals(this.extension, updateAVirtualLineRequest.extension) &&
        Objects.equals(this.announcementLanguage, updateAVirtualLineRequest.announcementLanguage) &&
        Objects.equals(this.callerIdLastName, updateAVirtualLineRequest.callerIdLastName) &&
        Objects.equals(this.callerIdFirstName, updateAVirtualLineRequest.callerIdFirstName) &&
        Objects.equals(this.callerIdNumber, updateAVirtualLineRequest.callerIdNumber) &&
        Objects.equals(this.timeZone, updateAVirtualLineRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, displayName, phoneNumber, extension, announcementLanguage, callerIdLastName, callerIdFirstName, callerIdNumber, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAVirtualLineRequest {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    announcementLanguage: ").append(toIndentedString(announcementLanguage)).append("\n");
    sb.append("    callerIdLastName: ").append(toIndentedString(callerIdLastName)).append("\n");
    sb.append("    callerIdFirstName: ").append(toIndentedString(callerIdFirstName)).append("\n");
    sb.append("    callerIdNumber: ").append(toIndentedString(callerIdNumber)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("displayName");
    openapiFields.add("phoneNumber");
    openapiFields.add("extension");
    openapiFields.add("announcementLanguage");
    openapiFields.add("callerIdLastName");
    openapiFields.add("callerIdFirstName");
    openapiFields.add("callerIdNumber");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAVirtualLineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAVirtualLineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAVirtualLineRequest is not found in the empty JSON string", UpdateAVirtualLineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAVirtualLineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAVirtualLineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("announcementLanguage") != null && !jsonObj.get("announcementLanguage").isJsonNull()) && !jsonObj.get("announcementLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `announcementLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("announcementLanguage").toString()));
      }
      if ((jsonObj.get("callerIdLastName") != null && !jsonObj.get("callerIdLastName").isJsonNull()) && !jsonObj.get("callerIdLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdLastName").toString()));
      }
      if ((jsonObj.get("callerIdFirstName") != null && !jsonObj.get("callerIdFirstName").isJsonNull()) && !jsonObj.get("callerIdFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdFirstName").toString()));
      }
      if ((jsonObj.get("callerIdNumber") != null && !jsonObj.get("callerIdNumber").isJsonNull()) && !jsonObj.get("callerIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdNumber").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAVirtualLineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAVirtualLineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAVirtualLineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAVirtualLineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAVirtualLineRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAVirtualLineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAVirtualLineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAVirtualLineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAVirtualLineRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAVirtualLineRequest
   */
  public static UpdateAVirtualLineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAVirtualLineRequest.class);
  }

  /**
   * Convert an instance of UpdateAVirtualLineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

