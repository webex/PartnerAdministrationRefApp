// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation;
import org.openapitools.client.model.GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner {
  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_ROUTING_PREFIX = "routingPrefix";
  @SerializedName(SERIALIZED_NAME_ROUTING_PREFIX)
  private String routingPrefix;

  public static final String SERIALIZED_NAME_ESN = "esn";
  @SerializedName(SERIALIZED_NAME_ESN)
  private String esn;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_TYPE = "phoneNumberType";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_TYPE)
  private String phoneNumberType;

  public static final String SERIALIZED_NAME_MAIN_NUMBER = "mainNumber";
  @SerializedName(SERIALIZED_NAME_MAIN_NUMBER)
  private Boolean mainNumber;

  /**
   * The telephony type for the number.
   */
  @JsonAdapter(IncludedTelephonyTypesEnum.Adapter.class)
  public enum IncludedTelephonyTypesEnum {
    PSTN_NUMBER("PSTN_NUMBER"),
    
    MOBILE_NUMBER("MOBILE_NUMBER"),
    
    MOBILE_NUMBER2("MOBILE_NUMBER");

    private String value;

    IncludedTelephonyTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludedTelephonyTypesEnum fromValue(String value) {
      for (IncludedTelephonyTypesEnum b : IncludedTelephonyTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludedTelephonyTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludedTelephonyTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludedTelephonyTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludedTelephonyTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncludedTelephonyTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUDED_TELEPHONY_TYPES = "includedTelephonyTypes";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TELEPHONY_TYPES)
  private IncludedTelephonyTypesEnum includedTelephonyTypes;

  public static final String SERIALIZED_NAME_MOBILE_NETWORK = "mobileNetwork";
  @SerializedName(SERIALIZED_NAME_MOBILE_NETWORK)
  private String mobileNetwork;

  public static final String SERIALIZED_NAME_ROUTING_PROFILE = "routingProfile";
  @SerializedName(SERIALIZED_NAME_ROUTING_PROFILE)
  private String routingProfile;

  public static final String SERIALIZED_NAME_TOLL_FREE_NUMBER = "tollFreeNumber";
  @SerializedName(SERIALIZED_NAME_TOLL_FREE_NUMBER)
  private Boolean tollFreeNumber;

  public static final String SERIALIZED_NAME_IS_SERVICE_NUMBER = "isServiceNumber";
  @SerializedName(SERIALIZED_NAME_IS_SERVICE_NUMBER)
  private Boolean isServiceNumber;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation location;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner owner;

  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner() {
  }

  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * A unique identifier for the phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Extension for a phone number.
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner routingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
    return this;
  }

  /**
   * Routing prefix of location.
   * @return routingPrefix
   */
  @javax.annotation.Nullable
  public String getRoutingPrefix() {
    return routingPrefix;
  }

  public void setRoutingPrefix(String routingPrefix) {
    this.routingPrefix = routingPrefix;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner esn(String esn) {
    this.esn = esn;
    return this;
  }

  /**
   * Routing prefix + extension of a person or workspace.
   * @return esn
   */
  @javax.annotation.Nullable
  public String getEsn() {
    return esn;
  }

  public void setEsn(String esn) {
    this.esn = esn;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Phone number&#39;s state.
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner phoneNumberType(String phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
    return this;
  }

  /**
   * Type of phone number.
   * @return phoneNumberType
   */
  @javax.annotation.Nonnull
  public String getPhoneNumberType() {
    return phoneNumberType;
  }

  public void setPhoneNumberType(String phoneNumberType) {
    this.phoneNumberType = phoneNumberType;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner mainNumber(Boolean mainNumber) {
    this.mainNumber = mainNumber;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the phone number is used as location CLID.
   * @return mainNumber
   */
  @javax.annotation.Nonnull
  public Boolean getMainNumber() {
    return mainNumber;
  }

  public void setMainNumber(Boolean mainNumber) {
    this.mainNumber = mainNumber;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner includedTelephonyTypes(IncludedTelephonyTypesEnum includedTelephonyTypes) {
    this.includedTelephonyTypes = includedTelephonyTypes;
    return this;
  }

  /**
   * The telephony type for the number.
   * @return includedTelephonyTypes
   */
  @javax.annotation.Nonnull
  public IncludedTelephonyTypesEnum getIncludedTelephonyTypes() {
    return includedTelephonyTypes;
  }

  public void setIncludedTelephonyTypes(IncludedTelephonyTypesEnum includedTelephonyTypes) {
    this.includedTelephonyTypes = includedTelephonyTypes;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner mobileNetwork(String mobileNetwork) {
    this.mobileNetwork = mobileNetwork;
    return this;
  }

  /**
   * Mobile Network for the number if the number is MOBILE_NUMBER.
   * @return mobileNetwork
   */
  @javax.annotation.Nullable
  public String getMobileNetwork() {
    return mobileNetwork;
  }

  public void setMobileNetwork(String mobileNetwork) {
    this.mobileNetwork = mobileNetwork;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner routingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
    return this;
  }

  /**
   * Routing Profile for the number if the number is MOBILE_NUMBER.
   * @return routingProfile
   */
  @javax.annotation.Nullable
  public String getRoutingProfile() {
    return routingProfile;
  }

  public void setRoutingProfile(String routingProfile) {
    this.routingProfile = routingProfile;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner tollFreeNumber(Boolean tollFreeNumber) {
    this.tollFreeNumber = tollFreeNumber;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the phone number is a toll-free number.
   * @return tollFreeNumber
   */
  @javax.annotation.Nonnull
  public Boolean getTollFreeNumber() {
    return tollFreeNumber;
  }

  public void setTollFreeNumber(Boolean tollFreeNumber) {
    this.tollFreeNumber = tollFreeNumber;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner isServiceNumber(Boolean isServiceNumber) {
    this.isServiceNumber = isServiceNumber;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the phone number is a service number; otherwise, it is a standard number.
   * @return isServiceNumber
   */
  @javax.annotation.Nonnull
  public Boolean getIsServiceNumber() {
    return isServiceNumber;
  }

  public void setIsServiceNumber(Boolean isServiceNumber) {
    this.isServiceNumber = isServiceNumber;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner location(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation getLocation() {
    return location;
  }

  public void setLocation(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation location) {
    this.location = location;
  }


  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner owner(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner getOwner() {
    return owner;
  }

  public void setOwner(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner owner) {
    this.owner = owner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner = (GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner) o;
    return Objects.equals(this.phoneNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.phoneNumber) &&
        Objects.equals(this.extension, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.extension) &&
        Objects.equals(this.routingPrefix, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.routingPrefix) &&
        Objects.equals(this.esn, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.esn) &&
        Objects.equals(this.state, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.state) &&
        Objects.equals(this.phoneNumberType, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.phoneNumberType) &&
        Objects.equals(this.mainNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.mainNumber) &&
        Objects.equals(this.includedTelephonyTypes, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.includedTelephonyTypes) &&
        Objects.equals(this.mobileNetwork, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.mobileNetwork) &&
        Objects.equals(this.routingProfile, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.routingProfile) &&
        Objects.equals(this.tollFreeNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.tollFreeNumber) &&
        Objects.equals(this.isServiceNumber, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.isServiceNumber) &&
        Objects.equals(this.location, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.location) &&
        Objects.equals(this.owner, getPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.owner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumber, extension, routingPrefix, esn, state, phoneNumberType, mainNumber, includedTelephonyTypes, mobileNetwork, routingProfile, tollFreeNumber, isServiceNumber, location, owner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner {\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    routingPrefix: ").append(toIndentedString(routingPrefix)).append("\n");
    sb.append("    esn: ").append(toIndentedString(esn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    phoneNumberType: ").append(toIndentedString(phoneNumberType)).append("\n");
    sb.append("    mainNumber: ").append(toIndentedString(mainNumber)).append("\n");
    sb.append("    includedTelephonyTypes: ").append(toIndentedString(includedTelephonyTypes)).append("\n");
    sb.append("    mobileNetwork: ").append(toIndentedString(mobileNetwork)).append("\n");
    sb.append("    routingProfile: ").append(toIndentedString(routingProfile)).append("\n");
    sb.append("    tollFreeNumber: ").append(toIndentedString(tollFreeNumber)).append("\n");
    sb.append("    isServiceNumber: ").append(toIndentedString(isServiceNumber)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneNumber");
    openapiFields.add("extension");
    openapiFields.add("routingPrefix");
    openapiFields.add("esn");
    openapiFields.add("state");
    openapiFields.add("phoneNumberType");
    openapiFields.add("mainNumber");
    openapiFields.add("includedTelephonyTypes");
    openapiFields.add("mobileNetwork");
    openapiFields.add("routingProfile");
    openapiFields.add("tollFreeNumber");
    openapiFields.add("isServiceNumber");
    openapiFields.add("location");
    openapiFields.add("owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("phoneNumberType");
    openapiRequiredFields.add("mainNumber");
    openapiRequiredFields.add("includedTelephonyTypes");
    openapiRequiredFields.add("tollFreeNumber");
    openapiRequiredFields.add("isServiceNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner is not found in the empty JSON string", GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      /*for (String requiredField : GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }*/
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("routingPrefix") != null && !jsonObj.get("routingPrefix").isJsonNull()) && !jsonObj.get("routingPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingPrefix").toString()));
      }
      if ((jsonObj.get("esn") != null && !jsonObj.get("esn").isJsonNull()) && !jsonObj.get("esn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esn").toString()));
      }
      /*if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }*/
      /*if (!jsonObj.get("phoneNumberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberType").toString()));
      }
      if (!jsonObj.get("includedTelephonyTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTelephonyTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includedTelephonyTypes").toString()));
      }
      // validate the required field `includedTelephonyTypes`
      IncludedTelephonyTypesEnum.validateJsonElement(jsonObj.get("includedTelephonyTypes"));
      if ((jsonObj.get("mobileNetwork") != null && !jsonObj.get("mobileNetwork").isJsonNull()) && !jsonObj.get("mobileNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNetwork").toString()));
      }
      if ((jsonObj.get("routingProfile") != null && !jsonObj.get("routingProfile").isJsonNull()) && !jsonObj.get("routingProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingProfile").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInnerOwner.validateJsonElement(jsonObj.get("owner"));
      }*/
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner>() {
           @Override
           public void write(JsonWriter out, GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner
   * @throws IOException if the JSON string is invalid with respect to GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner
   */
  public static GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner.class);
  }

  /**
   * Convert an instance of GetPhoneNumbersForAnOrganizationWithGivenCriterias200ResponsePhoneNumbersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

