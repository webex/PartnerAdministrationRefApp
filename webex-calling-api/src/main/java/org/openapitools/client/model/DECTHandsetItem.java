// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DECTHandsetItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class DECTHandsetItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_NAME = "defaultDisplayName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DISPLAY_NAME)
  private String defaultDisplayName;

  public static final String SERIALIZED_NAME_CUSTOM_DISPLAY_NAME = "customDisplayName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DISPLAY_NAME)
  private String customDisplayName;

  public static final String SERIALIZED_NAME_ACCESS_CODE = "accessCode";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE)
  private String accessCode;

  public static final String SERIALIZED_NAME_PRIMARY_ENABLED = "primaryEnabled";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENABLED)
  private Boolean primaryEnabled;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<Object> lines = new ArrayList<>();

  public DECTHandsetItem() {
  }

  public DECTHandsetItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the handset.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DECTHandsetItem index(String index) {
    this.index = index;
    return this;
  }

  /**
   * Index of the handset.
   * @return index
   */
  @javax.annotation.Nonnull
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public DECTHandsetItem defaultDisplayName(String defaultDisplayName) {
    this.defaultDisplayName = defaultDisplayName;
    return this;
  }

  /**
   * Default display name for the handset.
   * @return defaultDisplayName
   */
  @javax.annotation.Nonnull
  public String getDefaultDisplayName() {
    return defaultDisplayName;
  }

  public void setDefaultDisplayName(String defaultDisplayName) {
    this.defaultDisplayName = defaultDisplayName;
  }


  public DECTHandsetItem customDisplayName(String customDisplayName) {
    this.customDisplayName = customDisplayName;
    return this;
  }

  /**
   * Custom display name on the handset.
   * @return customDisplayName
   */
  @javax.annotation.Nullable
  public String getCustomDisplayName() {
    return customDisplayName;
  }

  public void setCustomDisplayName(String customDisplayName) {
    this.customDisplayName = customDisplayName;
  }


  public DECTHandsetItem accessCode(String accessCode) {
    this.accessCode = accessCode;
    return this;
  }

  /**
   * Access code is used to pair handsets to the DECT Network for the first time or if a handset becomes disconnected.
   * @return accessCode
   */
  @javax.annotation.Nullable
  public String getAccessCode() {
    return accessCode;
  }

  public void setAccessCode(String accessCode) {
    this.accessCode = accessCode;
  }


  public DECTHandsetItem primaryEnabled(Boolean primaryEnabled) {
    this.primaryEnabled = primaryEnabled;
    return this;
  }

  /**
   * Flags the handset as a primary line if &#x60;true&#x60;.
   * @return primaryEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryEnabled() {
    return primaryEnabled;
  }

  public void setPrimaryEnabled(Boolean primaryEnabled) {
    this.primaryEnabled = primaryEnabled;
  }


  public DECTHandsetItem lines(List<Object> lines) {
    this.lines = lines;
    return this;
  }

  public DECTHandsetItem addLinesItem(Object linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * Array of lines associated to the handset up to a maximum of 2.
   * @return lines
   */
  @javax.annotation.Nonnull
  public List<Object> getLines() {
    return lines;
  }

  public void setLines(List<Object> lines) {
    this.lines = lines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DECTHandsetItem deCTHandsetItem = (DECTHandsetItem) o;
    return Objects.equals(this.id, deCTHandsetItem.id) &&
        Objects.equals(this.index, deCTHandsetItem.index) &&
        Objects.equals(this.defaultDisplayName, deCTHandsetItem.defaultDisplayName) &&
        Objects.equals(this.customDisplayName, deCTHandsetItem.customDisplayName) &&
        Objects.equals(this.accessCode, deCTHandsetItem.accessCode) &&
        Objects.equals(this.primaryEnabled, deCTHandsetItem.primaryEnabled) &&
        Objects.equals(this.lines, deCTHandsetItem.lines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, index, defaultDisplayName, customDisplayName, accessCode, primaryEnabled, lines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DECTHandsetItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    defaultDisplayName: ").append(toIndentedString(defaultDisplayName)).append("\n");
    sb.append("    customDisplayName: ").append(toIndentedString(customDisplayName)).append("\n");
    sb.append("    accessCode: ").append(toIndentedString(accessCode)).append("\n");
    sb.append("    primaryEnabled: ").append(toIndentedString(primaryEnabled)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("index");
    openapiFields.add("defaultDisplayName");
    openapiFields.add("customDisplayName");
    openapiFields.add("accessCode");
    openapiFields.add("primaryEnabled");
    openapiFields.add("lines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("defaultDisplayName");
    openapiRequiredFields.add("lines");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DECTHandsetItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DECTHandsetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DECTHandsetItem is not found in the empty JSON string", DECTHandsetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DECTHandsetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DECTHandsetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DECTHandsetItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if (!jsonObj.get("defaultDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultDisplayName").toString()));
      }
      if ((jsonObj.get("customDisplayName") != null && !jsonObj.get("customDisplayName").isJsonNull()) && !jsonObj.get("customDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customDisplayName").toString()));
      }
      if ((jsonObj.get("accessCode") != null && !jsonObj.get("accessCode").isJsonNull()) && !jsonObj.get("accessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessCode").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("lines") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DECTHandsetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DECTHandsetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DECTHandsetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DECTHandsetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DECTHandsetItem>() {
           @Override
           public void write(JsonWriter out, DECTHandsetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DECTHandsetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DECTHandsetItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DECTHandsetItem
   * @throws IOException if the JSON string is invalid with respect to DECTHandsetItem
   */
  public static DECTHandsetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DECTHandsetItem.class);
  }

  /**
   * Convert an instance of DECTHandsetItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

