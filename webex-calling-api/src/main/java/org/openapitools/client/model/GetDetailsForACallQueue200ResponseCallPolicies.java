// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetDetailsForACallQueue200ResponseCallPoliciesCallBounce;
import org.openapitools.client.model.GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policy controlling how calls are routed to &#x60;agents&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class GetDetailsForACallQueue200ResponseCallPolicies {
  /**
   * Call routing type to use to dispatch calls to agents.
   */
  @JsonAdapter(RoutingTypeEnum.Adapter.class)
  public enum RoutingTypeEnum {
    PRIORITY_BASED("PRIORITY_BASED"),
    
    SKILL_BASED("SKILL_BASED"),
    
    PRIORITY_BASED2("PRIORITY_BASED");

    private String value;

    RoutingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoutingTypeEnum fromValue(String value) {
      for (RoutingTypeEnum b : RoutingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoutingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoutingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoutingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoutingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoutingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTING_TYPE = "routingType";
  @SerializedName(SERIALIZED_NAME_ROUTING_TYPE)
  private RoutingTypeEnum routingType;

  /**
   * Call routing policy to use to dispatch calls to agents.
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    CIRCULAR("CIRCULAR"),
    
    REGULAR("REGULAR"),
    
    SIMULTANEOUS("SIMULTANEOUS"),
    
    UNIFORM("UNIFORM"),
    
    WEIGHTED("WEIGHTED"),
    
    UNIFORM2("UNIFORM");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private PolicyEnum policy;

  public static final String SERIALIZED_NAME_CALL_BOUNCE = "callBounce";
  @SerializedName(SERIALIZED_NAME_CALL_BOUNCE)
  private GetDetailsForACallQueue200ResponseCallPoliciesCallBounce callBounce;

  public static final String SERIALIZED_NAME_DISTINCTIVE_RING = "distinctiveRing";
  @SerializedName(SERIALIZED_NAME_DISTINCTIVE_RING)
  private GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing distinctiveRing;

  public GetDetailsForACallQueue200ResponseCallPolicies() {
  }

  public GetDetailsForACallQueue200ResponseCallPolicies routingType(RoutingTypeEnum routingType) {
    this.routingType = routingType;
    return this;
  }

  /**
   * Call routing type to use to dispatch calls to agents.
   * @return routingType
   */
  @javax.annotation.Nonnull
  public RoutingTypeEnum getRoutingType() {
    return routingType;
  }

  public void setRoutingType(RoutingTypeEnum routingType) {
    this.routingType = routingType;
  }


  public GetDetailsForACallQueue200ResponseCallPolicies policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Call routing policy to use to dispatch calls to agents.
   * @return policy
   */
  @javax.annotation.Nonnull
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  public GetDetailsForACallQueue200ResponseCallPolicies callBounce(GetDetailsForACallQueue200ResponseCallPoliciesCallBounce callBounce) {
    this.callBounce = callBounce;
    return this;
  }

  /**
   * Get callBounce
   * @return callBounce
   */
  @javax.annotation.Nonnull
  public GetDetailsForACallQueue200ResponseCallPoliciesCallBounce getCallBounce() {
    return callBounce;
  }

  public void setCallBounce(GetDetailsForACallQueue200ResponseCallPoliciesCallBounce callBounce) {
    this.callBounce = callBounce;
  }


  public GetDetailsForACallQueue200ResponseCallPolicies distinctiveRing(GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing distinctiveRing) {
    this.distinctiveRing = distinctiveRing;
    return this;
  }

  /**
   * Get distinctiveRing
   * @return distinctiveRing
   */
  @javax.annotation.Nonnull
  public GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing getDistinctiveRing() {
    return distinctiveRing;
  }

  public void setDistinctiveRing(GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing distinctiveRing) {
    this.distinctiveRing = distinctiveRing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDetailsForACallQueue200ResponseCallPolicies getDetailsForACallQueue200ResponseCallPolicies = (GetDetailsForACallQueue200ResponseCallPolicies) o;
    return Objects.equals(this.routingType, getDetailsForACallQueue200ResponseCallPolicies.routingType) &&
        Objects.equals(this.policy, getDetailsForACallQueue200ResponseCallPolicies.policy) &&
        Objects.equals(this.callBounce, getDetailsForACallQueue200ResponseCallPolicies.callBounce) &&
        Objects.equals(this.distinctiveRing, getDetailsForACallQueue200ResponseCallPolicies.distinctiveRing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(routingType, policy, callBounce, distinctiveRing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDetailsForACallQueue200ResponseCallPolicies {\n");
    sb.append("    routingType: ").append(toIndentedString(routingType)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    callBounce: ").append(toIndentedString(callBounce)).append("\n");
    sb.append("    distinctiveRing: ").append(toIndentedString(distinctiveRing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("routingType");
    openapiFields.add("policy");
    openapiFields.add("callBounce");
    openapiFields.add("distinctiveRing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("routingType");
    openapiRequiredFields.add("policy");
    openapiRequiredFields.add("callBounce");
    openapiRequiredFields.add("distinctiveRing");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDetailsForACallQueue200ResponseCallPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDetailsForACallQueue200ResponseCallPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDetailsForACallQueue200ResponseCallPolicies is not found in the empty JSON string", GetDetailsForACallQueue200ResponseCallPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDetailsForACallQueue200ResponseCallPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDetailsForACallQueue200ResponseCallPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDetailsForACallQueue200ResponseCallPolicies.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("routingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingType").toString()));
      }
      // validate the required field `routingType`
      RoutingTypeEnum.validateJsonElement(jsonObj.get("routingType"));
      if (!jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // validate the required field `policy`
      PolicyEnum.validateJsonElement(jsonObj.get("policy"));
      // validate the required field `callBounce`
      GetDetailsForACallQueue200ResponseCallPoliciesCallBounce.validateJsonElement(jsonObj.get("callBounce"));
      // validate the required field `distinctiveRing`
      GetDetailsForACallQueue200ResponseCallPoliciesDistinctiveRing.validateJsonElement(jsonObj.get("distinctiveRing"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDetailsForACallQueue200ResponseCallPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDetailsForACallQueue200ResponseCallPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDetailsForACallQueue200ResponseCallPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDetailsForACallQueue200ResponseCallPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDetailsForACallQueue200ResponseCallPolicies>() {
           @Override
           public void write(JsonWriter out, GetDetailsForACallQueue200ResponseCallPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDetailsForACallQueue200ResponseCallPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDetailsForACallQueue200ResponseCallPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDetailsForACallQueue200ResponseCallPolicies
   * @throws IOException if the JSON string is invalid with respect to GetDetailsForACallQueue200ResponseCallPolicies
   */
  public static GetDetailsForACallQueue200ResponseCallPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDetailsForACallQueue200ResponseCallPolicies.class);
  }

  /**
   * Convert an instance of GetDetailsForACallQueue200ResponseCallPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

