// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateComplianceStatusResponseLocationStateEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComplianceStatusResponseLocationStatusObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class ComplianceStatusResponseLocationStatusObject {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private UpdateComplianceStatusResponseLocationStateEnum state;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Object> locations = new ArrayList<>();

  public ComplianceStatusResponseLocationStatusObject() {
  }

  public ComplianceStatusResponseLocationStatusObject state(UpdateComplianceStatusResponseLocationStateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Configuration stage that was last completed. The order of precedence is &#x60;LOCATION_SETUP&#x60;, &#x60;ALERTS&#x60;, &#x60;NETWORK_ELEMENTS&#x60;, &#x60;ROUTING_ENABLE&#x60;. If at least one location is &#x60;LOCATION_SETUP&#x60;, then &#x60;locationState&#x60; will be set to &#x60;LOCATION_SETUP&#x60;. Otherwise, &#x60;locationState&#x60; will check for the next precedence option and at least one location should have that option.
   * @return state
   */
  @javax.annotation.Nullable
  public UpdateComplianceStatusResponseLocationStateEnum getState() {
    return state;
  }

  public void setState(UpdateComplianceStatusResponseLocationStateEnum state) {
    this.state = state;
  }


  public ComplianceStatusResponseLocationStatusObject count(BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * Total count of locations available in the organization.
   * @return count
   */
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public ComplianceStatusResponseLocationStatusObject locations(List<Object> locations) {
    this.locations = locations;
    return this;
  }

  public ComplianceStatusResponseLocationStatusObject addLocationsItem(Object locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * List of locations that have completed the least amount of setup. Only 4 locations are included in this list.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Object> getLocations() {
    return locations;
  }

  public void setLocations(List<Object> locations) {
    this.locations = locations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceStatusResponseLocationStatusObject complianceStatusResponseLocationStatusObject = (ComplianceStatusResponseLocationStatusObject) o;
    return Objects.equals(this.state, complianceStatusResponseLocationStatusObject.state) &&
        Objects.equals(this.count, complianceStatusResponseLocationStatusObject.count) &&
        Objects.equals(this.locations, complianceStatusResponseLocationStatusObject.locations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, count, locations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceStatusResponseLocationStatusObject {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("count");
    openapiFields.add("locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplianceStatusResponseLocationStatusObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceStatusResponseLocationStatusObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceStatusResponseLocationStatusObject is not found in the empty JSON string", ComplianceStatusResponseLocationStatusObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplianceStatusResponseLocationStatusObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceStatusResponseLocationStatusObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        UpdateComplianceStatusResponseLocationStateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceStatusResponseLocationStatusObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceStatusResponseLocationStatusObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceStatusResponseLocationStatusObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceStatusResponseLocationStatusObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceStatusResponseLocationStatusObject>() {
           @Override
           public void write(JsonWriter out, ComplianceStatusResponseLocationStatusObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceStatusResponseLocationStatusObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplianceStatusResponseLocationStatusObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplianceStatusResponseLocationStatusObject
   * @throws IOException if the JSON string is invalid with respect to ComplianceStatusResponseLocationStatusObject
   */
  public static ComplianceStatusResponseLocationStatusObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceStatusResponseLocationStatusObject.class);
  }

  /**
   * Convert an instance of ComplianceStatusResponseLocationStatusObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

