// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CountObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartJobResponseObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class StartJobResponseObject {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_SOURCE_USER_ID = "sourceUserId";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_ID)
  private String sourceUserId;

  public static final String SERIALIZED_NAME_SOURCE_CUSTOMER_ID = "sourceCustomerId";
  @SerializedName(SERIALIZED_NAME_SOURCE_CUSTOMER_ID)
  private String sourceCustomerId;

  public static final String SERIALIZED_NAME_TARGET_CUSTOMER_ID = "targetCustomerId";
  @SerializedName(SERIALIZED_NAME_TARGET_CUSTOMER_ID)
  private String targetCustomerId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private BigDecimal instanceId;

  public static final String SERIALIZED_NAME_JOB_EXECUTION_STATUS = "jobExecutionStatus";
  @SerializedName(SERIALIZED_NAME_JOB_EXECUTION_STATUS)
  private List<Object> jobExecutionStatus = new ArrayList<>();

  /**
   * Most recent status of the job at the time of invocation.
   */
  @JsonAdapter(LatestExecutionStatusEnum.Adapter.class)
  public enum LatestExecutionStatusEnum {
    STARTING("STARTING"),
    
    STARTED("STARTED"),
    
    COMPLETED("COMPLETED"),
    
    FAILED("FAILED");

    private String value;

    LatestExecutionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LatestExecutionStatusEnum fromValue(String value) {
      for (LatestExecutionStatusEnum b : LatestExecutionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LatestExecutionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LatestExecutionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LatestExecutionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LatestExecutionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LatestExecutionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATEST_EXECUTION_STATUS = "latestExecutionStatus";
  @SerializedName(SERIALIZED_NAME_LATEST_EXECUTION_STATUS)
  private LatestExecutionStatusEnum latestExecutionStatus;

  /**
   * Most recent exit code of the job at the time of invocation.
   */
  @JsonAdapter(LatestExecutionExitCodeEnum.Adapter.class)
  public enum LatestExecutionExitCodeEnum {
    UNKNOWN("UNKNOWN"),
    
    COMPLETED("COMPLETED"),
    
    FAILED("FAILED"),
    
    STOPPED("STOPPED"),
    
    COMPLETED_WITH_ERRORS("COMPLETED_WITH_ERRORS");

    private String value;

    LatestExecutionExitCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LatestExecutionExitCodeEnum fromValue(String value) {
      for (LatestExecutionExitCodeEnum b : LatestExecutionExitCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LatestExecutionExitCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LatestExecutionExitCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LatestExecutionExitCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LatestExecutionExitCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LatestExecutionExitCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATEST_EXECUTION_EXIT_CODE = "latestExecutionExitCode";
  @SerializedName(SERIALIZED_NAME_LATEST_EXECUTION_EXIT_CODE)
  private LatestExecutionExitCodeEnum latestExecutionExitCode;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private CountObject counts;

  public StartJobResponseObject() {
  }

  public StartJobResponseObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Job name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartJobResponseObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the job.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StartJobResponseObject trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * Unique identifier to track the flow of HTTP requests.
   * @return trackingId
   */
  @javax.annotation.Nonnull
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }


  public StartJobResponseObject sourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
    return this;
  }

  /**
   * Unique identifier of the user who ran the job.
   * @return sourceUserId
   */
  @javax.annotation.Nonnull
  public String getSourceUserId() {
    return sourceUserId;
  }

  public void setSourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
  }


  public StartJobResponseObject sourceCustomerId(String sourceCustomerId) {
    this.sourceCustomerId = sourceCustomerId;
    return this;
  }

  /**
   * Unique identifier of the customer who ran the job.
   * @return sourceCustomerId
   */
  @javax.annotation.Nonnull
  public String getSourceCustomerId() {
    return sourceCustomerId;
  }

  public void setSourceCustomerId(String sourceCustomerId) {
    this.sourceCustomerId = sourceCustomerId;
  }


  public StartJobResponseObject targetCustomerId(String targetCustomerId) {
    this.targetCustomerId = targetCustomerId;
    return this;
  }

  /**
   * Unique identifier of the customer for whom the job was run.
   * @return targetCustomerId
   */
  @javax.annotation.Nonnull
  public String getTargetCustomerId() {
    return targetCustomerId;
  }

  public void setTargetCustomerId(String targetCustomerId) {
    this.targetCustomerId = targetCustomerId;
  }


  public StartJobResponseObject instanceId(BigDecimal instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Unique identifier of the job instance.
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public BigDecimal getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(BigDecimal instanceId) {
    this.instanceId = instanceId;
  }


  public StartJobResponseObject jobExecutionStatus(List<Object> jobExecutionStatus) {
    this.jobExecutionStatus = jobExecutionStatus;
    return this;
  }

  public StartJobResponseObject addJobExecutionStatusItem(Object jobExecutionStatusItem) {
    if (this.jobExecutionStatus == null) {
      this.jobExecutionStatus = new ArrayList<>();
    }
    this.jobExecutionStatus.add(jobExecutionStatusItem);
    return this;
  }

  /**
   * Most recent step&#39;s execution status, including statuses of all steps in the job execution.
   * @return jobExecutionStatus
   */
  @javax.annotation.Nullable
  public List<Object> getJobExecutionStatus() {
    return jobExecutionStatus;
  }

  public void setJobExecutionStatus(List<Object> jobExecutionStatus) {
    this.jobExecutionStatus = jobExecutionStatus;
  }


  public StartJobResponseObject latestExecutionStatus(LatestExecutionStatusEnum latestExecutionStatus) {
    this.latestExecutionStatus = latestExecutionStatus;
    return this;
  }

  /**
   * Most recent status of the job at the time of invocation.
   * @return latestExecutionStatus
   */
  @javax.annotation.Nonnull
  public LatestExecutionStatusEnum getLatestExecutionStatus() {
    return latestExecutionStatus;
  }

  public void setLatestExecutionStatus(LatestExecutionStatusEnum latestExecutionStatus) {
    this.latestExecutionStatus = latestExecutionStatus;
  }


  public StartJobResponseObject latestExecutionExitCode(LatestExecutionExitCodeEnum latestExecutionExitCode) {
    this.latestExecutionExitCode = latestExecutionExitCode;
    return this;
  }

  /**
   * Most recent exit code of the job at the time of invocation.
   * @return latestExecutionExitCode
   */
  @javax.annotation.Nullable
  public LatestExecutionExitCodeEnum getLatestExecutionExitCode() {
    return latestExecutionExitCode;
  }

  public void setLatestExecutionExitCode(LatestExecutionExitCodeEnum latestExecutionExitCode) {
    this.latestExecutionExitCode = latestExecutionExitCode;
  }


  public StartJobResponseObject counts(CountObject counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nonnull
  public CountObject getCounts() {
    return counts;
  }

  public void setCounts(CountObject counts) {
    this.counts = counts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartJobResponseObject startJobResponseObject = (StartJobResponseObject) o;
    return Objects.equals(this.name, startJobResponseObject.name) &&
        Objects.equals(this.id, startJobResponseObject.id) &&
        Objects.equals(this.trackingId, startJobResponseObject.trackingId) &&
        Objects.equals(this.sourceUserId, startJobResponseObject.sourceUserId) &&
        Objects.equals(this.sourceCustomerId, startJobResponseObject.sourceCustomerId) &&
        Objects.equals(this.targetCustomerId, startJobResponseObject.targetCustomerId) &&
        Objects.equals(this.instanceId, startJobResponseObject.instanceId) &&
        Objects.equals(this.jobExecutionStatus, startJobResponseObject.jobExecutionStatus) &&
        Objects.equals(this.latestExecutionStatus, startJobResponseObject.latestExecutionStatus) &&
        Objects.equals(this.latestExecutionExitCode, startJobResponseObject.latestExecutionExitCode) &&
        Objects.equals(this.counts, startJobResponseObject.counts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, trackingId, sourceUserId, sourceCustomerId, targetCustomerId, instanceId, jobExecutionStatus, latestExecutionStatus, latestExecutionExitCode, counts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartJobResponseObject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    sourceUserId: ").append(toIndentedString(sourceUserId)).append("\n");
    sb.append("    sourceCustomerId: ").append(toIndentedString(sourceCustomerId)).append("\n");
    sb.append("    targetCustomerId: ").append(toIndentedString(targetCustomerId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    jobExecutionStatus: ").append(toIndentedString(jobExecutionStatus)).append("\n");
    sb.append("    latestExecutionStatus: ").append(toIndentedString(latestExecutionStatus)).append("\n");
    sb.append("    latestExecutionExitCode: ").append(toIndentedString(latestExecutionExitCode)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("trackingId");
    openapiFields.add("sourceUserId");
    openapiFields.add("sourceCustomerId");
    openapiFields.add("targetCustomerId");
    openapiFields.add("instanceId");
    openapiFields.add("jobExecutionStatus");
    openapiFields.add("latestExecutionStatus");
    openapiFields.add("latestExecutionExitCode");
    openapiFields.add("counts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("trackingId");
    openapiRequiredFields.add("sourceUserId");
    openapiRequiredFields.add("sourceCustomerId");
    openapiRequiredFields.add("targetCustomerId");
    openapiRequiredFields.add("instanceId");
    openapiRequiredFields.add("latestExecutionStatus");
    openapiRequiredFields.add("counts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartJobResponseObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartJobResponseObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartJobResponseObject is not found in the empty JSON string", StartJobResponseObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartJobResponseObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartJobResponseObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartJobResponseObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
      if (!jsonObj.get("sourceUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUserId").toString()));
      }
      if (!jsonObj.get("sourceCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCustomerId").toString()));
      }
      if (!jsonObj.get("targetCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCustomerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobExecutionStatus") != null && !jsonObj.get("jobExecutionStatus").isJsonNull() && !jsonObj.get("jobExecutionStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobExecutionStatus` to be an array in the JSON string but got `%s`", jsonObj.get("jobExecutionStatus").toString()));
      }
      if (!jsonObj.get("latestExecutionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestExecutionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestExecutionStatus").toString()));
      }
      // validate the required field `latestExecutionStatus`
      LatestExecutionStatusEnum.validateJsonElement(jsonObj.get("latestExecutionStatus"));
      if ((jsonObj.get("latestExecutionExitCode") != null && !jsonObj.get("latestExecutionExitCode").isJsonNull()) && !jsonObj.get("latestExecutionExitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestExecutionExitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestExecutionExitCode").toString()));
      }
      // validate the optional field `latestExecutionExitCode`
      if (jsonObj.get("latestExecutionExitCode") != null && !jsonObj.get("latestExecutionExitCode").isJsonNull()) {
        LatestExecutionExitCodeEnum.validateJsonElement(jsonObj.get("latestExecutionExitCode"));
      }
      // validate the required field `counts`
      CountObject.validateJsonElement(jsonObj.get("counts"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartJobResponseObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartJobResponseObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartJobResponseObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartJobResponseObject.class));

       return (TypeAdapter<T>) new TypeAdapter<StartJobResponseObject>() {
           @Override
           public void write(JsonWriter out, StartJobResponseObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartJobResponseObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartJobResponseObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartJobResponseObject
   * @throws IOException if the JSON string is invalid with respect to StartJobResponseObject
   */
  public static StartJobResponseObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartJobResponseObject.class);
  }

  /**
   * Convert an instance of StartJobResponseObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

