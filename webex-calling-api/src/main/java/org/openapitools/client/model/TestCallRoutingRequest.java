// Copyright 2025 Cisco Systems Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * All Webex calling API
 * Webex calling API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OriginatorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestCallRoutingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T15:45:43.258095Z[Europe/Dublin]", comments = "Generator version: 7.9.0")
public class TestCallRoutingRequest {
  public static final String SERIALIZED_NAME_ORIGINATOR_ID = "originatorId";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ID)
  private String originatorId;

  public static final String SERIALIZED_NAME_ORIGINATOR_TYPE = "originatorType";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_TYPE)
  private OriginatorType originatorType;

  public static final String SERIALIZED_NAME_ORIGINATOR_NUMBER = "originatorNumber";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NUMBER)
  private String originatorNumber;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_INCLUDE_APPLIED_SERVICES = "includeAppliedServices";
  @SerializedName(SERIALIZED_NAME_INCLUDE_APPLIED_SERVICES)
  private Boolean includeAppliedServices;

  public TestCallRoutingRequest() {
  }

  public TestCallRoutingRequest originatorId(String originatorId) {
    this.originatorId = originatorId;
    return this;
  }

  /**
   * This element is used to identify the originating party. It can be a person ID or a trunk ID.
   * @return originatorId
   */
  @javax.annotation.Nonnull
  public String getOriginatorId() {
    return originatorId;
  }

  public void setOriginatorId(String originatorId) {
    this.originatorId = originatorId;
  }


  public TestCallRoutingRequest originatorType(OriginatorType originatorType) {
    this.originatorType = originatorType;
    return this;
  }

  /**
   * Get originatorType
   * @return originatorType
   */
  @javax.annotation.Nonnull
  public OriginatorType getOriginatorType() {
    return originatorType;
  }

  public void setOriginatorType(OriginatorType originatorType) {
    this.originatorType = originatorType;
  }


  public TestCallRoutingRequest originatorNumber(String originatorNumber) {
    this.originatorNumber = originatorNumber;
    return this;
  }

  /**
   * Only used when &#x60;originatorType&#x60; is &#x60;TRUNK&#x60;. The &#x60;originatorNumber&#x60; can be a phone number or URI.
   * @return originatorNumber
   */
  @javax.annotation.Nullable
  public String getOriginatorNumber() {
    return originatorNumber;
  }

  public void setOriginatorNumber(String originatorNumber) {
    this.originatorNumber = originatorNumber;
  }


  public TestCallRoutingRequest destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * This element specifies the called party. It can be any dialable string, for example, an ESN number, E.164 number, hosted user DN, extension, extension with location code, URL, or FAC code.
   * @return destination
   */
  @javax.annotation.Nonnull
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public TestCallRoutingRequest includeAppliedServices(Boolean includeAppliedServices) {
    this.includeAppliedServices = includeAppliedServices;
    return this;
  }

  /**
   * This element is used to retrieve if any translation pattern, call intercept, permission by type is present for the called party.
   * @return includeAppliedServices
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAppliedServices() {
    return includeAppliedServices;
  }

  public void setIncludeAppliedServices(Boolean includeAppliedServices) {
    this.includeAppliedServices = includeAppliedServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCallRoutingRequest testCallRoutingRequest = (TestCallRoutingRequest) o;
    return Objects.equals(this.originatorId, testCallRoutingRequest.originatorId) &&
        Objects.equals(this.originatorType, testCallRoutingRequest.originatorType) &&
        Objects.equals(this.originatorNumber, testCallRoutingRequest.originatorNumber) &&
        Objects.equals(this.destination, testCallRoutingRequest.destination) &&
        Objects.equals(this.includeAppliedServices, testCallRoutingRequest.includeAppliedServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originatorId, originatorType, originatorNumber, destination, includeAppliedServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCallRoutingRequest {\n");
    sb.append("    originatorId: ").append(toIndentedString(originatorId)).append("\n");
    sb.append("    originatorType: ").append(toIndentedString(originatorType)).append("\n");
    sb.append("    originatorNumber: ").append(toIndentedString(originatorNumber)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    includeAppliedServices: ").append(toIndentedString(includeAppliedServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("originatorId");
    openapiFields.add("originatorType");
    openapiFields.add("originatorNumber");
    openapiFields.add("destination");
    openapiFields.add("includeAppliedServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("originatorId");
    openapiRequiredFields.add("originatorType");
    openapiRequiredFields.add("destination");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCallRoutingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCallRoutingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCallRoutingRequest is not found in the empty JSON string", TestCallRoutingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCallRoutingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCallRoutingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCallRoutingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("originatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorId").toString()));
      }
      // validate the required field `originatorType`
      OriginatorType.validateJsonElement(jsonObj.get("originatorType"));
      if ((jsonObj.get("originatorNumber") != null && !jsonObj.get("originatorNumber").isJsonNull()) && !jsonObj.get("originatorNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorNumber").toString()));
      }
      if (!jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCallRoutingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCallRoutingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCallRoutingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCallRoutingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCallRoutingRequest>() {
           @Override
           public void write(JsonWriter out, TestCallRoutingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCallRoutingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCallRoutingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCallRoutingRequest
   * @throws IOException if the JSON string is invalid with respect to TestCallRoutingRequest
   */
  public static TestCallRoutingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCallRoutingRequest.class);
  }

  /**
   * Convert an instance of TestCallRoutingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

